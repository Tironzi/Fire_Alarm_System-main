
fire_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000770c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080078f8  080078f8  000088f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d48  08007d48  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d50  08007d50  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d50  08007d50  00008d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d54  08007d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d4  08007f2c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08007f2c  00009558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f881  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d63  00000000  00000000  00018a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0001b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b44  00000000  00000000  0001c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be21  00000000  00000000  0001d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143ba  00000000  00000000  00038ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad0c  00000000  00000000  0004d3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e80c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  000e8108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ece08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080078dc 	.word	0x080078dc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080078dc 	.word	0x080078dc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__gesf2>:
 8000c00:	f04f 3cff 	mov.w	ip, #4294967295
 8000c04:	e006      	b.n	8000c14 <__cmpsf2+0x4>
 8000c06:	bf00      	nop

08000c08 <__lesf2>:
 8000c08:	f04f 0c01 	mov.w	ip, #1
 8000c0c:	e002      	b.n	8000c14 <__cmpsf2+0x4>
 8000c0e:	bf00      	nop

08000c10 <__cmpsf2>:
 8000c10:	f04f 0c01 	mov.w	ip, #1
 8000c14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d011      	beq.n	8000c50 <__cmpsf2+0x40>
 8000c2c:	b001      	add	sp, #4
 8000c2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c32:	bf18      	it	ne
 8000c34:	ea90 0f01 	teqne	r0, r1
 8000c38:	bf58      	it	pl
 8000c3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c3e:	bf88      	it	hi
 8000c40:	17c8      	asrhi	r0, r1, #31
 8000c42:	bf38      	it	cc
 8000c44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c48:	bf18      	it	ne
 8000c4a:	f040 0001 	orrne.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c54:	d102      	bne.n	8000c5c <__cmpsf2+0x4c>
 8000c56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c5a:	d105      	bne.n	8000c68 <__cmpsf2+0x58>
 8000c5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c60:	d1e4      	bne.n	8000c2c <__cmpsf2+0x1c>
 8000c62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c66:	d0e1      	beq.n	8000c2c <__cmpsf2+0x1c>
 8000c68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__aeabi_cfrcmple>:
 8000c70:	4684      	mov	ip, r0
 8000c72:	4608      	mov	r0, r1
 8000c74:	4661      	mov	r1, ip
 8000c76:	e7ff      	b.n	8000c78 <__aeabi_cfcmpeq>

08000c78 <__aeabi_cfcmpeq>:
 8000c78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c7a:	f7ff ffc9 	bl	8000c10 <__cmpsf2>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	bf48      	it	mi
 8000c82:	f110 0f00 	cmnmi.w	r0, #0
 8000c86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c88 <__aeabi_fcmpeq>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff fff4 	bl	8000c78 <__aeabi_cfcmpeq>
 8000c90:	bf0c      	ite	eq
 8000c92:	2001      	moveq	r0, #1
 8000c94:	2000      	movne	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmplt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffea 	bl	8000c78 <__aeabi_cfcmpeq>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fcmple>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff ffe0 	bl	8000c78 <__aeabi_cfcmpeq>
 8000cb8:	bf94      	ite	ls
 8000cba:	2001      	movls	r0, #1
 8000cbc:	2000      	movhi	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_fcmpge>:
 8000cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc8:	f7ff ffd2 	bl	8000c70 <__aeabi_cfrcmple>
 8000ccc:	bf94      	ite	ls
 8000cce:	2001      	movls	r0, #1
 8000cd0:	2000      	movhi	r0, #0
 8000cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fcmpgt>:
 8000cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cdc:	f7ff ffc8 	bl	8000c70 <__aeabi_cfrcmple>
 8000ce0:	bf34      	ite	cc
 8000ce2:	2001      	movcc	r0, #1
 8000ce4:	2000      	movcs	r0, #0
 8000ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cea:	bf00      	nop

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b5b0      	push	{r4, r5, r7, lr}
 8000cee:	b092      	sub	sp, #72	@ 0x48
 8000cf0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fde1 	bl	80018b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f88b 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 f9bb 	bl	8001074 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cfe:	f000 f8c7 	bl	8000e90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d02:	f000 f915 	bl	8000f30 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000d06:	f000 f961 	bl	8000fcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d0a:	f000 f989 	bl	8001020 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Delay_Init(&htim1, &htim2);
 8000d0e:	4936      	ldr	r1, [pc, #216]	@ (8000de8 <main+0xfc>)
 8000d10:	4836      	ldr	r0, [pc, #216]	@ (8000dec <main+0x100>)
 8000d12:	f003 f9b1 	bl	8004078 <Delay_Init>
	flame_Init(GPIOB, GPIO_PIN_1);
 8000d16:	2102      	movs	r1, #2
 8000d18:	4835      	ldr	r0, [pc, #212]	@ (8000df0 <main+0x104>)
 8000d1a:	f003 fb2f 	bl	800437c <flame_Init>
	mq2_Init(GPIOB, GPIO_PIN_2);
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4833      	ldr	r0, [pc, #204]	@ (8000df0 <main+0x104>)
 8000d22:	f003 fd33 	bl	800478c <mq2_Init>
	DHT22_GetData(&Temperature, &Humidity);
 8000d26:	4933      	ldr	r1, [pc, #204]	@ (8000df4 <main+0x108>)
 8000d28:	4833      	ldr	r0, [pc, #204]	@ (8000df8 <main+0x10c>)
 8000d2a:	f003 fa91 	bl	8004250 <DHT22_GetData>
	Lcd_PortType ports[] = { GPIOC, GPIOC, GPIOC, GPIOC }; //Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000d2e:	4b33      	ldr	r3, [pc, #204]	@ (8000dfc <main+0x110>)
 8000d30:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = { GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9 };
 8000d3a:	4a31      	ldr	r2, [pc, #196]	@ (8000e00 <main+0x114>)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d44:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_13, GPIOB, GPIO_PIN_15,
 8000d48:	4c2e      	ldr	r4, [pc, #184]	@ (8000e04 <main+0x118>)
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	f107 021c 	add.w	r2, r7, #28
 8000d50:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000d54:	2300      	movs	r3, #0
 8000d56:	9303      	str	r3, [sp, #12]
 8000d58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <main+0x104>)
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <main+0x104>)
 8000d6a:	f003 fb2f 	bl	80043cc <Lcd_create>
 8000d6e:	4625      	mov	r5, r4
 8000d70:	463c      	mov	r4, r7
 8000d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d7a:	e885 0003 	stmia.w	r5, {r0, r1}
			LCD_4_BIT_MODE); //Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	int simcheck = SIM_Check(&huart1);
 8000d7e:	4822      	ldr	r0, [pc, #136]	@ (8000e08 <main+0x11c>)
 8000d80:	f003 fc5a 	bl	8004638 <SIM_Check>
 8000d84:	4603      	mov	r3, r0
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t status = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	76fb      	strb	r3, [r7, #27]
	uint8_t status_1 = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	76bb      	strb	r3, [r7, #26]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		DHT22_GetData(&Temperature, &Humidity);
 8000d90:	4918      	ldr	r1, [pc, #96]	@ (8000df4 <main+0x108>)
 8000d92:	4819      	ldr	r0, [pc, #100]	@ (8000df8 <main+0x10c>)
 8000d94:	f003 fa5c 	bl	8004250 <DHT22_GetData>
		switch (status) {
 8000d98:	7efb      	ldrb	r3, [r7, #27]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <main+0xb8>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d00d      	beq.n	8000dbe <main+0xd2>
 8000da2:	e016      	b.n	8000dd2 <main+0xe6>
		case 0:
			// Function 1: display temp&&humid and sim_connect
			Display_Temp(Temperature);
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <main+0x10c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fd53 	bl	8004854 <Display_Temp>
			Display_Rh(Humidity);
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <main+0x108>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fd7e 	bl	80048b4 <Display_Rh>
			Display_Sim(simcheck);
 8000db8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000dba:	f003 fdab 	bl	8004914 <Display_Sim>
		case 1:
			// Function 2: display lcd warning
			Lcd_warning(Temperature, &status, &status_1);
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <main+0x10c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f107 021a 	add.w	r2, r7, #26
 8000dc6:	f107 011b 	add.w	r1, r7, #27
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fdc2 	bl	8004954 <Lcd_warning>
			break;
 8000dd0:	bf00      	nop
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <main+0x120>)
 8000dd8:	f001 f9a9 	bl	800212e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de0:	f000 fd9c 	bl	800191c <HAL_Delay>
		DHT22_GetData(&Temperature, &Humidity);
 8000de4:	e7d4      	b.n	8000d90 <main+0xa4>
 8000de6:	bf00      	nop
 8000de8:	20000238 	.word	0x20000238
 8000dec:	200001f0 	.word	0x200001f0
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	2000037c 	.word	0x2000037c
 8000df8:	20000378 	.word	0x20000378
 8000dfc:	080078f8 	.word	0x080078f8
 8000e00:	08007908 	.word	0x08007908
 8000e04:	200003f4 	.word	0x200003f4
 8000e08:	20000280 	.word	0x20000280
 8000e0c:	40011000 	.word	0x40011000

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b090      	sub	sp, #64	@ 0x40
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	2228      	movs	r2, #40	@ 0x28
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f004 fc73 	bl	800570a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e46:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f9a7 	bl	80021a4 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e5c:	f000 f9e2 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e60:	230f      	movs	r3, #15
 8000e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2302      	movs	r3, #2
 8000e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fc15 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e84:	f000 f9ce 	bl	8001224 <Error_Handler>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3740      	adds	r7, #64	@ 0x40
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000eae:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <MX_TIM1_Init+0x9c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36-1;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000eb4:	2223      	movs	r2, #35	@ 0x23
 8000eb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000ec0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ec4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000eda:	f001 fda3 	bl	8002a24 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 f99e 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000ef6:	f001 ff8d 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f00:	f000 f990 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_TIM1_Init+0x98>)
 8000f12:	f002 f987 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f1c:	f000 f982 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200001f0 	.word	0x200001f0
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f56:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f76:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f78:	f001 fd54 	bl	8002a24 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f82:	f000 f94f 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000f94:	f001 ff3e 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f9e:	f000 f941 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <MX_TIM2_Init+0x98>)
 8000fb0:	f002 f938 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fba:	f000 f933 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000238 	.word	0x20000238

08000fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_USART1_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_USART1_UART_Init+0x4c>)
 8001004:	f002 f98c 	bl	8003320 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f909 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000280 	.word	0x20000280
 800101c:	40013800 	.word	0x40013800

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <MX_USART2_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_USART2_UART_Init+0x4c>)
 8001058:	f002 f962 	bl	8003320 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f8df 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200002c8 	.word	0x200002c8
 8001070:	40004400 	.word	0x40004400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	4b58      	ldr	r3, [pc, #352]	@ (80011ec <MX_GPIO_Init+0x178>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a57      	ldr	r2, [pc, #348]	@ (80011ec <MX_GPIO_Init+0x178>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b55      	ldr	r3, [pc, #340]	@ (80011ec <MX_GPIO_Init+0x178>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	4b52      	ldr	r3, [pc, #328]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a51      	ldr	r2, [pc, #324]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b4f      	ldr	r3, [pc, #316]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0320 	and.w	r3, r3, #32
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b4c      	ldr	r3, [pc, #304]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b49      	ldr	r3, [pc, #292]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b46      	ldr	r3, [pc, #280]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a45      	ldr	r2, [pc, #276]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <MX_GPIO_Init+0x178>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|D4_OUT_Pin|D5_OUT_Pin|D6_OUT_Pin
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 510f 	mov.w	r1, #9152	@ 0x23c0
 80010ee:	4840      	ldr	r0, [pc, #256]	@ (80011f0 <MX_GPIO_Init+0x17c>)
 80010f0:	f001 f805 	bl	80020fe <HAL_GPIO_WritePin>
                          |D7_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_OUT_GPIO_Port, PUMP_OUT_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2110      	movs	r1, #16
 80010f8:	483e      	ldr	r0, [pc, #248]	@ (80011f4 <MX_GPIO_Init+0x180>)
 80010fa:	f001 f800 	bl	80020fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHT_OUT_Pin|BUZZER_OUT_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2160      	movs	r1, #96	@ 0x60
 8001102:	483c      	ldr	r0, [pc, #240]	@ (80011f4 <MX_GPIO_Init+0x180>)
 8001104:	f000 fffb 	bl	80020fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DHT22_OUT_Pin|RS_Pin|EN_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f24a 0101 	movw	r1, #40961	@ 0xa001
 800110e:	483a      	ldr	r0, [pc, #232]	@ (80011f8 <MX_GPIO_Init+0x184>)
 8001110:	f000 fff5 	bl	80020fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 D4_OUT_Pin D5_OUT_Pin D6_OUT_Pin
                           D7_OUT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|D4_OUT_Pin|D5_OUT_Pin|D6_OUT_Pin
 8001114:	f44f 530f 	mov.w	r3, #9152	@ 0x23c0
 8001118:	613b      	str	r3, [r7, #16]
                          |D7_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4619      	mov	r1, r3
 800112c:	4830      	ldr	r0, [pc, #192]	@ (80011f0 <MX_GPIO_Init+0x17c>)
 800112e:	f000 fe3b 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001132:	2307      	movs	r3, #7
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <MX_GPIO_Init+0x188>)
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	482a      	ldr	r0, [pc, #168]	@ (80011f0 <MX_GPIO_Init+0x17c>)
 8001146:	f000 fe2f 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800114a:	2308      	movs	r3, #8
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	4824      	ldr	r0, [pc, #144]	@ (80011f0 <MX_GPIO_Init+0x17c>)
 800115e:	f000 fe23 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_OUT_Pin LIGHT_OUT_Pin BUZZER_OUT_Pin */
  GPIO_InitStruct.Pin = PUMP_OUT_Pin|LIGHT_OUT_Pin|BUZZER_OUT_Pin;
 8001162:	2370      	movs	r3, #112	@ 0x70
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	481e      	ldr	r0, [pc, #120]	@ (80011f4 <MX_GPIO_Init+0x180>)
 800117a:	f000 fe15 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_OUT_Pin RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = DHT22_OUT_Pin|RS_Pin|EN_Pin;
 800117e:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <MX_GPIO_Init+0x184>)
 8001198:	f000 fe06 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLAME_IN_Pin MQ_2_Pin */
  GPIO_InitStruct.Pin = FLAME_IN_Pin|MQ_2_Pin;
 800119c:	2306      	movs	r3, #6
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <MX_GPIO_Init+0x184>)
 80011b0:	f000 fdfa 	bl	8001da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 2);
 80011b4:	2202      	movs	r2, #2
 80011b6:	2100      	movs	r1, #0
 80011b8:	2006      	movs	r0, #6
 80011ba:	f000 fc88 	bl	8001ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011be:	2006      	movs	r0, #6
 80011c0:	f000 fca1 	bl	8001b06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2100      	movs	r1, #0
 80011c8:	2007      	movs	r0, #7
 80011ca:	f000 fc80 	bl	8001ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ce:	2007      	movs	r0, #7
 80011d0:	f000 fc99 	bl	8001b06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2008      	movs	r0, #8
 80011da:	f000 fc78 	bl	8001ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011de:	2008      	movs	r0, #8
 80011e0:	f000 fc91 	bl	8001b06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	10210000 	.word	0x10210000

08001200 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001212:	f000 fb67 	bl	80018e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40000800 	.word	0x40000800

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <Error_Handler+0x8>

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_MspInit+0x60>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a15      	ldr	r2, [pc, #84]	@ (8001290 <HAL_MspInit+0x60>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_MspInit+0x60>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_MspInit+0x60>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <HAL_MspInit+0x60>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <HAL_MspInit+0x60>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fc26 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_MspInit+0x64>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_MspInit+0x64>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000

08001298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <HAL_TIM_Base_MspInit+0x58>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10c      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_TIM_Base_MspInit+0x5c>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <HAL_TIM_Base_MspInit+0x5c>)
 80012b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_TIM_Base_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012c2:	e010      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012cc:	d10b      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_TIM_Base_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_TIM_Base_MspInit+0x5c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_TIM_Base_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <HAL_UART_MspInit+0x118>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13a      	bne.n	800138e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001318:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a3d      	ldr	r2, [pc, #244]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a37      	ldr	r2, [pc, #220]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4619      	mov	r1, r3
 800135c:	482e      	ldr	r0, [pc, #184]	@ (8001418 <HAL_UART_MspInit+0x120>)
 800135e:	f000 fd23 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	4619      	mov	r1, r3
 8001376:	4828      	ldr	r0, [pc, #160]	@ (8001418 <HAL_UART_MspInit+0x120>)
 8001378:	f000 fd16 	bl	8001da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2025      	movs	r0, #37	@ 0x25
 8001382:	f000 fba4 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001386:	2025      	movs	r0, #37	@ 0x25
 8001388:	f000 fbbd 	bl	8001b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138c:	e03c      	b.n	8001408 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a22      	ldr	r2, [pc, #136]	@ (800141c <HAL_UART_MspInit+0x124>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d137      	bne.n	8001408 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_UART_MspInit+0x11c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	@ (8001418 <HAL_UART_MspInit+0x120>)
 80013dc:	f000 fce4 	bl	8001da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e0:	2308      	movs	r3, #8
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4809      	ldr	r0, [pc, #36]	@ (8001418 <HAL_UART_MspInit+0x120>)
 80013f4:	f000 fcd8 	bl	8001da8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2026      	movs	r0, #38	@ 0x26
 80013fe:	f000 fb66 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001402:	2026      	movs	r0, #38	@ 0x26
 8001404:	f000 fb7f 	bl	8001b06 <HAL_NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013800 	.word	0x40013800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	40004400 	.word	0x40004400

08001420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	@ 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_InitTick+0xe8>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <HAL_InitTick+0xe8>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <HAL_InitTick+0xe8>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144e:	f107 0210 	add.w	r2, r7, #16
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fa95 	bl	8002988 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d103      	bne.n	8001470 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001468:	f001 fa66 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 800146c:	6378      	str	r0, [r7, #52]	@ 0x34
 800146e:	e004      	b.n	800147a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001470:	f001 fa62 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8001474:	4603      	mov	r3, r0
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147c:	4a23      	ldr	r2, [pc, #140]	@ (800150c <HAL_InitTick+0xec>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	3b01      	subs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_InitTick+0xf0>)
 800148a:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <HAL_InitTick+0xf4>)
 800148c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_InitTick+0xf0>)
 8001490:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001494:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001496:	4a1e      	ldr	r2, [pc, #120]	@ (8001510 <HAL_InitTick+0xf0>)
 8001498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_InitTick+0xf0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_InitTick+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_InitTick+0xf0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80014ae:	4818      	ldr	r0, [pc, #96]	@ (8001510 <HAL_InitTick+0xf0>)
 80014b0:	f001 fab8 	bl	8002a24 <HAL_TIM_Base_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11b      	bne.n	80014fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014c2:	4813      	ldr	r0, [pc, #76]	@ (8001510 <HAL_InitTick+0xf0>)
 80014c4:	f001 fb56 	bl	8002b74 <HAL_TIM_Base_Start_IT>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d111      	bne.n	80014fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014d6:	201e      	movs	r0, #30
 80014d8:	f000 fb15 	bl	8001b06 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	d808      	bhi.n	80014f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014e2:	2200      	movs	r2, #0
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	201e      	movs	r0, #30
 80014e8:	f000 faf1 	bl	8001ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <HAL_InitTick+0xf8>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e002      	b.n	80014fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3738      	adds	r7, #56	@ 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	431bde83 	.word	0x431bde83
 8001510:	20000310 	.word	0x20000310
 8001514:	40000800 	.word	0x40000800
 8001518:	20000004 	.word	0x20000004

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	static uint8_t buzzerState = 0;
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)
 8001578:	2101      	movs	r1, #1
 800157a:	4814      	ldr	r0, [pc, #80]	@ (80015cc <EXTI0_IRQHandler+0x58>)
 800157c:	f000 fda8 	bl	80020d0 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11c      	bne.n	80015c0 <EXTI0_IRQHandler+0x4c>
			&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET)) {
 8001586:	2108      	movs	r1, #8
 8001588:	4810      	ldr	r0, [pc, #64]	@ (80015cc <EXTI0_IRQHandler+0x58>)
 800158a:	f000 fda1 	bl	80020d0 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d115      	bne.n	80015c0 <EXTI0_IRQHandler+0x4c>
		// Đảo trạng thái còi
		buzzerState = !buzzerState;
 8001594:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <EXTI0_IRQHandler+0x5c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <EXTI0_IRQHandler+0x5c>)
 80015a6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <EXTI0_IRQHandler+0x5c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	2110      	movs	r1, #16
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <EXTI0_IRQHandler+0x60>)
 80015bc:	f000 fd9f 	bl	80020fe <HAL_GPIO_WritePin>
				buzzerState ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f000 fdcd 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40011000 	.word	0x40011000
 80015d0:	20000358 	.word	0x20000358
 80015d4:	40010800 	.word	0x40010800

080015d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	static uint8_t buzzerState = 0;
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 80015dc:	2102      	movs	r1, #2
 80015de:	4814      	ldr	r0, [pc, #80]	@ (8001630 <EXTI1_IRQHandler+0x58>)
 80015e0:	f000 fd76 	bl	80020d0 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11c      	bne.n	8001624 <EXTI1_IRQHandler+0x4c>
			&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET)) {
 80015ea:	2108      	movs	r1, #8
 80015ec:	4810      	ldr	r0, [pc, #64]	@ (8001630 <EXTI1_IRQHandler+0x58>)
 80015ee:	f000 fd6f 	bl	80020d0 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d115      	bne.n	8001624 <EXTI1_IRQHandler+0x4c>
		// Đảo trạng thái còi
		buzzerState = !buzzerState;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <EXTI1_IRQHandler+0x5c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <EXTI1_IRQHandler+0x5c>)
 800160a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <EXTI1_IRQHandler+0x5c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <EXTI1_IRQHandler+0x60>)
 8001620:	f000 fd6d 	bl	80020fe <HAL_GPIO_WritePin>
				buzzerState ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001624:	2002      	movs	r0, #2
 8001626:	f000 fd9b 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40011000 	.word	0x40011000
 8001634:	20000359 	.word	0x20000359
 8001638:	40010800 	.word	0x40010800

0800163c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	static uint8_t buzzerState = 0;
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET)
 8001640:	2104      	movs	r1, #4
 8001642:	4814      	ldr	r0, [pc, #80]	@ (8001694 <EXTI2_IRQHandler+0x58>)
 8001644:	f000 fd44 	bl	80020d0 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11c      	bne.n	8001688 <EXTI2_IRQHandler+0x4c>
			&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET)) {
 800164e:	2108      	movs	r1, #8
 8001650:	4810      	ldr	r0, [pc, #64]	@ (8001694 <EXTI2_IRQHandler+0x58>)
 8001652:	f000 fd3d 	bl	80020d0 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d115      	bne.n	8001688 <EXTI2_IRQHandler+0x4c>
		// Đảo trạng thái còi
		buzzerState = !buzzerState;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <EXTI2_IRQHandler+0x5c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <EXTI2_IRQHandler+0x5c>)
 800166e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <EXTI2_IRQHandler+0x5c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	2120      	movs	r1, #32
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <EXTI2_IRQHandler+0x60>)
 8001684:	f000 fd3b 	bl	80020fe <HAL_GPIO_WritePin>
				buzzerState ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001688:	2004      	movs	r0, #4
 800168a:	f000 fd69 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40011000 	.word	0x40011000
 8001698:	2000035a 	.word	0x2000035a
 800169c:	40010800 	.word	0x40010800

080016a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <TIM4_IRQHandler+0x10>)
 80016a6:	f001 fac5 	bl	8002c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000310 	.word	0x20000310

080016b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <USART1_IRQHandler+0x10>)
 80016ba:	f001 ffa3 	bl	8003604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000280 	.word	0x20000280

080016c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <USART2_IRQHandler+0x10>)
 80016ce:	f001 ff99 	bl	8003604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002c8 	.word	0x200002c8

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <_kill>:

int _kill(int pid, int sig)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f4:	f004 f872 	bl	80057dc <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2216      	movs	r2, #22
 80016fc:	601a      	str	r2, [r3, #0]
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_exit>:

void _exit (int status)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001712:	f04f 31ff 	mov.w	r1, #4294967295
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffe7 	bl	80016ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
  }

  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
  }
  return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f003 ffda 	bl	80057dc <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000c000 	.word	0x2000c000
 8001854:	00000400 	.word	0x00000400
 8001858:	2000035c 	.word	0x2000035c
 800185c:	20000558 	.word	0x20000558

08001860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff fff8 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001872:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001888:	4c09      	ldr	r4, [pc, #36]	@ (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f003 ffa7 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7ff fa27 	bl	8000cec <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018a8:	08007d58 	.word	0x08007d58
  ldr r2, =_sbss
 80018ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018b0:	20000558 	.word	0x20000558

080018b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_2_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_Init+0x28>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_Init+0x28>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f8f5 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	2003      	movs	r0, #3
 80018d0:	f7ff fda6 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fcac 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x1c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_IncTick+0x20>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a03      	ldr	r2, [pc, #12]	@ (8001904 <HAL_IncTick+0x20>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000008 	.word	0x20000008
 8001904:	20000360 	.word	0x20000360

08001908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b02      	ldr	r3, [pc, #8]	@ (8001918 <HAL_GetTick+0x10>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000360 	.word	0x20000360

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff fff0 	bl	8001908 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffe0 	bl	8001908 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4906      	ldr	r1, [pc, #24]	@ (80019fc <__NVIC_EnableIRQ+0x34>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	@ (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	@ 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff4f 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae0:	f7ff ff64 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff ffb2 	bl	8001a54 <NVIC_EncodePriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff81 	bl	8001a00 <__NVIC_SetPriority>
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff57 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d008      	beq.n	8001b4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e020      	b.n	8001b8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020e 	bic.w	r2, r2, #14
 8001b5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d005      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e0d6      	b.n	8001d6a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020e 	bic.w	r2, r2, #14
 8001bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b64      	ldr	r3, [pc, #400]	@ (8001d74 <HAL_DMA_Abort_IT+0x1dc>)
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d958      	bls.n	8001c9a <HAL_DMA_Abort_IT+0x102>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a62      	ldr	r2, [pc, #392]	@ (8001d78 <HAL_DMA_Abort_IT+0x1e0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d04f      	beq.n	8001c92 <HAL_DMA_Abort_IT+0xfa>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a61      	ldr	r2, [pc, #388]	@ (8001d7c <HAL_DMA_Abort_IT+0x1e4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d048      	beq.n	8001c8e <HAL_DMA_Abort_IT+0xf6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_DMA_Abort_IT+0x1e8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d040      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xf0>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <HAL_DMA_Abort_IT+0x1ec>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d038      	beq.n	8001c82 <HAL_DMA_Abort_IT+0xea>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5c      	ldr	r2, [pc, #368]	@ (8001d88 <HAL_DMA_Abort_IT+0x1f0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d030      	beq.n	8001c7c <HAL_DMA_Abort_IT+0xe4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d8c <HAL_DMA_Abort_IT+0x1f4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d028      	beq.n	8001c76 <HAL_DMA_Abort_IT+0xde>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a52      	ldr	r2, [pc, #328]	@ (8001d74 <HAL_DMA_Abort_IT+0x1dc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d020      	beq.n	8001c70 <HAL_DMA_Abort_IT+0xd8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a57      	ldr	r2, [pc, #348]	@ (8001d90 <HAL_DMA_Abort_IT+0x1f8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d019      	beq.n	8001c6c <HAL_DMA_Abort_IT+0xd4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a55      	ldr	r2, [pc, #340]	@ (8001d94 <HAL_DMA_Abort_IT+0x1fc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d012      	beq.n	8001c68 <HAL_DMA_Abort_IT+0xd0>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a54      	ldr	r2, [pc, #336]	@ (8001d98 <HAL_DMA_Abort_IT+0x200>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00a      	beq.n	8001c62 <HAL_DMA_Abort_IT+0xca>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a52      	ldr	r2, [pc, #328]	@ (8001d9c <HAL_DMA_Abort_IT+0x204>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d102      	bne.n	8001c5c <HAL_DMA_Abort_IT+0xc4>
 8001c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5a:	e01b      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c60:	e018      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c66:	e015      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c68:	2310      	movs	r3, #16
 8001c6a:	e013      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e011      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c74:	e00e      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c7a:	e00b      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c80:	e008      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c86:	e005      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8c:	e002      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c8e:	2310      	movs	r3, #16
 8001c90:	e000      	b.n	8001c94 <HAL_DMA_Abort_IT+0xfc>
 8001c92:	2301      	movs	r3, #1
 8001c94:	4a42      	ldr	r2, [pc, #264]	@ (8001da0 <HAL_DMA_Abort_IT+0x208>)
 8001c96:	6053      	str	r3, [r2, #4]
 8001c98:	e057      	b.n	8001d4a <HAL_DMA_Abort_IT+0x1b2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a36      	ldr	r2, [pc, #216]	@ (8001d78 <HAL_DMA_Abort_IT+0x1e0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d04f      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x1ac>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a34      	ldr	r2, [pc, #208]	@ (8001d7c <HAL_DMA_Abort_IT+0x1e4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d048      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x1a8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a33      	ldr	r2, [pc, #204]	@ (8001d80 <HAL_DMA_Abort_IT+0x1e8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d040      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x1a2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a31      	ldr	r2, [pc, #196]	@ (8001d84 <HAL_DMA_Abort_IT+0x1ec>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d038      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x19c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a30      	ldr	r2, [pc, #192]	@ (8001d88 <HAL_DMA_Abort_IT+0x1f0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d030      	beq.n	8001d2e <HAL_DMA_Abort_IT+0x196>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <HAL_DMA_Abort_IT+0x1f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d028      	beq.n	8001d28 <HAL_DMA_Abort_IT+0x190>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_DMA_Abort_IT+0x1dc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d020      	beq.n	8001d22 <HAL_DMA_Abort_IT+0x18a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d90 <HAL_DMA_Abort_IT+0x1f8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_DMA_Abort_IT+0x186>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <HAL_DMA_Abort_IT+0x1fc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d012      	beq.n	8001d1a <HAL_DMA_Abort_IT+0x182>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <HAL_DMA_Abort_IT+0x200>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00a      	beq.n	8001d14 <HAL_DMA_Abort_IT+0x17c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a26      	ldr	r2, [pc, #152]	@ (8001d9c <HAL_DMA_Abort_IT+0x204>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d102      	bne.n	8001d0e <HAL_DMA_Abort_IT+0x176>
 8001d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0c:	e01b      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d12:	e018      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d18:	e015      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	e013      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e011      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d26:	e00e      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d2c:	e00b      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d32:	e008      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d38:	e005      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d3e:	e002      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d40:	2310      	movs	r3, #16
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Abort_IT+0x1ae>
 8001d44:	2301      	movs	r3, #1
 8001d46:	4a17      	ldr	r2, [pc, #92]	@ (8001da4 <HAL_DMA_Abort_IT+0x20c>)
 8001d48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
    } 
  }
  return status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020080 	.word	0x40020080
 8001d78:	40020008 	.word	0x40020008
 8001d7c:	4002001c 	.word	0x4002001c
 8001d80:	40020030 	.word	0x40020030
 8001d84:	40020044 	.word	0x40020044
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	40020408 	.word	0x40020408
 8001d94:	4002041c 	.word	0x4002041c
 8001d98:	40020430 	.word	0x40020430
 8001d9c:	40020444 	.word	0x40020444
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020000 	.word	0x40020000

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b08b      	sub	sp, #44	@ 0x2c
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e179      	b.n	80020b0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8168 	bne.w	80020aa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a96      	ldr	r2, [pc, #600]	@ (8002038 <HAL_GPIO_Init+0x290>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d05e      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001de4:	4a94      	ldr	r2, [pc, #592]	@ (8002038 <HAL_GPIO_Init+0x290>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d875      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001dea:	4a94      	ldr	r2, [pc, #592]	@ (800203c <HAL_GPIO_Init+0x294>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d058      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001df0:	4a92      	ldr	r2, [pc, #584]	@ (800203c <HAL_GPIO_Init+0x294>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d86f      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001df6:	4a92      	ldr	r2, [pc, #584]	@ (8002040 <HAL_GPIO_Init+0x298>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d052      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a90      	ldr	r2, [pc, #576]	@ (8002040 <HAL_GPIO_Init+0x298>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d869      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e02:	4a90      	ldr	r2, [pc, #576]	@ (8002044 <HAL_GPIO_Init+0x29c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d04c      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001e08:	4a8e      	ldr	r2, [pc, #568]	@ (8002044 <HAL_GPIO_Init+0x29c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d863      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a8e      	ldr	r2, [pc, #568]	@ (8002048 <HAL_GPIO_Init+0x2a0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d046      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001e14:	4a8c      	ldr	r2, [pc, #560]	@ (8002048 <HAL_GPIO_Init+0x2a0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d85d      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d82a      	bhi.n	8001e74 <HAL_GPIO_Init+0xcc>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d859      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e22:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <HAL_GPIO_Init+0x80>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001e7d 	.word	0x08001e7d
 8001e30:	08001e8f 	.word	0x08001e8f
 8001e34:	08001ed1 	.word	0x08001ed1
 8001e38:	08001ed7 	.word	0x08001ed7
 8001e3c:	08001ed7 	.word	0x08001ed7
 8001e40:	08001ed7 	.word	0x08001ed7
 8001e44:	08001ed7 	.word	0x08001ed7
 8001e48:	08001ed7 	.word	0x08001ed7
 8001e4c:	08001ed7 	.word	0x08001ed7
 8001e50:	08001ed7 	.word	0x08001ed7
 8001e54:	08001ed7 	.word	0x08001ed7
 8001e58:	08001ed7 	.word	0x08001ed7
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001ed7 	.word	0x08001ed7
 8001e64:	08001ed7 	.word	0x08001ed7
 8001e68:	08001ed7 	.word	0x08001ed7
 8001e6c:	08001e85 	.word	0x08001e85
 8001e70:	08001e99 	.word	0x08001e99
 8001e74:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_GPIO_Init+0x2a4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7a:	e02c      	b.n	8001ed6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e029      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e024      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	3308      	adds	r3, #8
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e01f      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e01a      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e013      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	611a      	str	r2, [r3, #16]
          break;
 8001ec2:	e009      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	615a      	str	r2, [r3, #20]
          break;
 8001ece:	e003      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          break;
 8001ed6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d801      	bhi.n	8001ee2 <HAL_GPIO_Init+0x13a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_Init+0x13e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2bff      	cmp	r3, #255	@ 0xff
 8001eec:	d802      	bhi.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x152>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	3b08      	subs	r3, #8
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	210f      	movs	r1, #15
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80c1 	beq.w	80020aa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f28:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <HAL_GPIO_Init+0x2a8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a48      	ldr	r2, [pc, #288]	@ (8002050 <HAL_GPIO_Init+0x2a8>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b46      	ldr	r3, [pc, #280]	@ (8002050 <HAL_GPIO_Init+0x2a8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f40:	4a44      	ldr	r2, [pc, #272]	@ (8002054 <HAL_GPIO_Init+0x2ac>)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3c      	ldr	r2, [pc, #240]	@ (8002058 <HAL_GPIO_Init+0x2b0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d01f      	beq.n	8001fac <HAL_GPIO_Init+0x204>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <HAL_GPIO_Init+0x2b4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d019      	beq.n	8001fa8 <HAL_GPIO_Init+0x200>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	@ (8002060 <HAL_GPIO_Init+0x2b8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_GPIO_Init+0x1fc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a39      	ldr	r2, [pc, #228]	@ (8002064 <HAL_GPIO_Init+0x2bc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00d      	beq.n	8001fa0 <HAL_GPIO_Init+0x1f8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a38      	ldr	r2, [pc, #224]	@ (8002068 <HAL_GPIO_Init+0x2c0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <HAL_GPIO_Init+0x1f4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a37      	ldr	r2, [pc, #220]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_GPIO_Init+0x1f0>
 8001f94:	2305      	movs	r3, #5
 8001f96:	e00a      	b.n	8001fae <HAL_GPIO_Init+0x206>
 8001f98:	2306      	movs	r3, #6
 8001f9a:	e008      	b.n	8001fae <HAL_GPIO_Init+0x206>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x206>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e004      	b.n	8001fae <HAL_GPIO_Init+0x206>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x206>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_Init+0x206>
 8001fac:	2300      	movs	r3, #0
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fbe:	4925      	ldr	r1, [pc, #148]	@ (8002054 <HAL_GPIO_Init+0x2ac>)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd8:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4924      	ldr	r1, [pc, #144]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe6:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4920      	ldr	r1, [pc, #128]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	491a      	ldr	r1, [pc, #104]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4916      	ldr	r1, [pc, #88]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8002018:	4013      	ands	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d025      	beq.n	8002074 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4910      	ldr	r1, [pc, #64]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e025      	b.n	8002082 <HAL_GPIO_Init+0x2da>
 8002036:	bf00      	nop
 8002038:	10320000 	.word	0x10320000
 800203c:	10310000 	.word	0x10310000
 8002040:	10220000 	.word	0x10220000
 8002044:	10210000 	.word	0x10210000
 8002048:	10120000 	.word	0x10120000
 800204c:	10110000 	.word	0x10110000
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	40010800 	.word	0x40010800
 800205c:	40010c00 	.word	0x40010c00
 8002060:	40011000 	.word	0x40011000
 8002064:	40011400 	.word	0x40011400
 8002068:	40011800 	.word	0x40011800
 800206c:	40011c00 	.word	0x40011c00
 8002070:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002074:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_GPIO_Init+0x324>)
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	43db      	mvns	r3, r3
 800207c:	4913      	ldr	r1, [pc, #76]	@ (80020cc <HAL_GPIO_Init+0x324>)
 800207e:	4013      	ands	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800208e:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_GPIO_Init+0x324>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	490e      	ldr	r1, [pc, #56]	@ (80020cc <HAL_GPIO_Init+0x324>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_GPIO_Init+0x324>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4909      	ldr	r1, [pc, #36]	@ (80020cc <HAL_GPIO_Init+0x324>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	3301      	adds	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f ae7e 	bne.w	8001dbc <HAL_GPIO_Init+0x14>
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	372c      	adds	r7, #44	@ 0x2c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e001      	b.n	80020f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	807b      	strh	r3, [r7, #2]
 800210a:	4613      	mov	r3, r2
 800210c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210e:	787b      	ldrb	r3, [r7, #1]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800211a:	e003      	b.n	8002124 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	041a      	lsls	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	041a      	lsls	r2, r3, #16
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43d9      	mvns	r1, r3
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	400b      	ands	r3, r1
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002176:	4a05      	ldr	r2, [pc, #20]	@ (800218c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f806 	bl	8002190 <HAL_GPIO_EXTI_Callback>
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e272      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b92      	ldr	r3, [pc, #584]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
 80021dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b89      	ldr	r3, [pc, #548]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x12c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d168      	bne.n	80022d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e24c      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x76>
 800220c:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a7f      	ldr	r2, [pc, #508]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7b      	ldr	r3, [pc, #492]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7a      	ldr	r2, [pc, #488]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b78      	ldr	r3, [pc, #480]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a77      	ldr	r2, [pc, #476]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xbc>
 8002246:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a71      	ldr	r2, [pc, #452]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 8002260:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6a      	ldr	r2, [pc, #424]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a67      	ldr	r2, [pc, #412]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fb42 	bl	8001908 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fb3e 	bl	8001908 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e200      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe4>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fb2e 	bl	8001908 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fb2a 	bl	8001908 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1ec      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x10c>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ea:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
 80022f6:	4b46      	ldr	r3, [pc, #280]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1c0      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4939      	ldr	r1, [pc, #228]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e03a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fae3 	bl	8001908 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7ff fadf 	bl	8001908 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1a1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4927      	ldr	r1, [pc, #156]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <HAL_RCC_OscConfig+0x270>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff fac2 	bl	8001908 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff fabe 	bl	8001908 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e180      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03a      	beq.n	8002428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff faa2 	bl	8001908 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fa9e 	bl	8001908 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e160      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f000 fafe 	bl	80029e8 <RCC_Delay>
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_RCC_OscConfig+0x274>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fa88 	bl	8001908 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	e00f      	b.n	800241c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fa84 	bl	8001908 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d908      	bls.n	800241c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e146      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	42420000 	.word	0x42420000
 8002418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b92      	ldr	r3, [pc, #584]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e9      	bne.n	80023fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a6 	beq.w	8002582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b8b      	ldr	r3, [pc, #556]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b88      	ldr	r3, [pc, #544]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a87      	ldr	r2, [pc, #540]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b85      	ldr	r3, [pc, #532]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b82      	ldr	r3, [pc, #520]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7e      	ldr	r2, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fa45 	bl	8001908 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7ff fa41 	bl	8001908 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	@ 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e103      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x312>
 80024a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x334>
 80024be:	4b6a      	ldr	r3, [pc, #424]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a69      	ldr	r2, [pc, #420]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b67      	ldr	r3, [pc, #412]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a66      	ldr	r2, [pc, #408]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x356>
 80024e0:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a60      	ldr	r2, [pc, #384]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b58      	ldr	r3, [pc, #352]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a57      	ldr	r2, [pc, #348]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7ff f9f5 	bl	8001908 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff f9f1 	bl	8001908 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0b1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x37e>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff f9df 	bl	8001908 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff f9db 	bl	8001908 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e09b      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b3c      	ldr	r3, [pc, #240]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a3b      	ldr	r2, [pc, #236]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d061      	beq.n	800265c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d146      	bne.n	800262e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff f9af 	bl	8001908 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff f9ab 	bl	8001908 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e06d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4921      	ldr	r1, [pc, #132]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a19      	ldr	r1, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	430b      	orrs	r3, r1
 80025fa:	491b      	ldr	r1, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff f97f 	bl	8001908 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff f97b 	bl	8001908 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x46a>
 800262c:	e035      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff f968 	bl	8001908 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7ff f964 	bl	8001908 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e026      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x498>
 800265a:	e01e      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e019      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x500>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4965      	ldr	r1, [pc, #404]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800270e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7ff f8b6 	bl	8001908 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7ff f8b2 	bl	8001908 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4922      	ldr	r1, [pc, #136]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	@ (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fde2 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	080079a4 	.word	0x080079a4
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x30>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x36>
 80028aa:	e027      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	e027      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0c9b      	lsrs	r3, r3, #18
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	4a11      	ldr	r2, [pc, #68]	@ (800291c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e004      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	613b      	str	r3, [r7, #16]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	693b      	ldr	r3, [r7, #16]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	080079bc 	.word	0x080079bc
 800291c:	080079cc 	.word	0x080079cc
 8002920:	003d0900 	.word	0x003d0900

08002924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b02      	ldr	r3, [pc, #8]	@ (8002934 <HAL_RCC_GetHCLKFreq+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000000 	.word	0x20000000

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800293c:	f7ff fff2 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	@ (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	080079b4 	.word	0x080079b4

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002964:	f7ff ffde 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0adb      	lsrs	r3, r3, #11
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	@ (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	080079b4 	.word	0x080079b4

08002988 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	220f      	movs	r2, #15
 8002996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_RCC_GetClockConfig+0x58>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0203 	and.w	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029a4:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <HAL_RCC_GetClockConfig+0x58>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_GetClockConfig+0x58>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCC_GetClockConfig+0x58>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_GetClockConfig+0x5c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0207 	and.w	r2, r3, #7
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40022000 	.word	0x40022000

080029e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <RCC_Delay+0x34>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <RCC_Delay+0x38>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a04:	bf00      	nop
  }
  while (Delay --);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	60fa      	str	r2, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <RCC_Delay+0x1c>
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fc24 	bl	8001298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fac2 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d001      	beq.n	8002adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e03c      	b.n	8002b56 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b60 <HAL_TIM_Base_Start+0x9c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d018      	beq.n	8002b20 <HAL_TIM_Base_Start+0x5c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b64 <HAL_TIM_Base_Start+0xa0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_TIM_Base_Start+0x5c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b00:	d00e      	beq.n	8002b20 <HAL_TIM_Base_Start+0x5c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a18      	ldr	r2, [pc, #96]	@ (8002b68 <HAL_TIM_Base_Start+0xa4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_TIM_Base_Start+0x5c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a16      	ldr	r2, [pc, #88]	@ (8002b6c <HAL_TIM_Base_Start+0xa8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_Base_Start+0x5c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	@ (8002b70 <HAL_TIM_Base_Start+0xac>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d010      	beq.n	8002b54 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	e007      	b.n	8002b54 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40013400 	.word	0x40013400
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00

08002b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e044      	b.n	8002c16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_TIM_Base_Start_IT+0xac>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x6c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x6c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d00e      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x6c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <HAL_TIM_Base_Start_IT+0xb4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x6c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_TIM_Base_Start_IT+0xb8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x6c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <HAL_TIM_Base_Start_IT+0xbc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d010      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c02:	e007      	b.n	8002c14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40013400 	.word	0x40013400
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	40000c00 	.word	0x40000c00

08002c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f998 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f98b 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f99a 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0204 	mvn.w	r2, #4
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f972 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f965 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f974 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0208 	mvn.w	r2, #8
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f94c 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f93f 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f94e 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0210 	mvn.w	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2208      	movs	r2, #8
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f926 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f919 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f928 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0201 	mvn.w	r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fa30 	bl	8001200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 faa5 	bl	800330e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8f8 	bl	8002fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0220 	mvn.w	r2, #32
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa78 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0b4      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x186>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e68:	d03e      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6e:	f200 8087 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e76:	f000 8086 	beq.w	8002f86 <HAL_TIM_ConfigClockSource+0x172>
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7e:	d87f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b70      	cmp	r3, #112	@ 0x70
 8002e82:	d01a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xa6>
 8002e84:	2b70      	cmp	r3, #112	@ 0x70
 8002e86:	d87b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b60      	cmp	r3, #96	@ 0x60
 8002e8a:	d050      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x11a>
 8002e8c:	2b60      	cmp	r3, #96	@ 0x60
 8002e8e:	d877      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b50      	cmp	r3, #80	@ 0x50
 8002e92:	d03c      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xfa>
 8002e94:	2b50      	cmp	r3, #80	@ 0x50
 8002e96:	d873      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d058      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x13a>
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d86f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b30      	cmp	r3, #48	@ 0x30
 8002ea2:	d064      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b30      	cmp	r3, #48	@ 0x30
 8002ea6:	d86b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d060      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d867      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d05a      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	e062      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eca:	f000 f98c 	bl	80031e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
      break;
 8002ee6:	e04f      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef8:	f000 f975 	bl	80031e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f0a:	609a      	str	r2, [r3, #8]
      break;
 8002f0c:	e03c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f8ec 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2150      	movs	r1, #80	@ 0x50
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f943 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e02c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f90a 	bl	8003154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2160      	movs	r1, #96	@ 0x60
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f933 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e01c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f8cc 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2140      	movs	r1, #64	@ 0x40
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f923 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 f91a 	bl	80031b2 <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e000      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
	...

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a39      	ldr	r2, [pc, #228]	@ (80030e4 <TIM_Base_SetConfig+0xf8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a38      	ldr	r2, [pc, #224]	@ (80030e8 <TIM_Base_SetConfig+0xfc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00f      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003012:	d00b      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a35      	ldr	r2, [pc, #212]	@ (80030ec <TIM_Base_SetConfig+0x100>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a34      	ldr	r2, [pc, #208]	@ (80030f0 <TIM_Base_SetConfig+0x104>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a33      	ldr	r2, [pc, #204]	@ (80030f4 <TIM_Base_SetConfig+0x108>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d108      	bne.n	800303e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <TIM_Base_SetConfig+0xf8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <TIM_Base_SetConfig+0x82>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a27      	ldr	r2, [pc, #156]	@ (80030e8 <TIM_Base_SetConfig+0xfc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00f      	beq.n	800306e <TIM_Base_SetConfig+0x82>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003054:	d00b      	beq.n	800306e <TIM_Base_SetConfig+0x82>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a24      	ldr	r2, [pc, #144]	@ (80030ec <TIM_Base_SetConfig+0x100>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <TIM_Base_SetConfig+0x82>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <TIM_Base_SetConfig+0x104>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0x82>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <TIM_Base_SetConfig+0x108>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0f      	ldr	r2, [pc, #60]	@ (80030e4 <TIM_Base_SetConfig+0xf8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0xc8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0e      	ldr	r2, [pc, #56]	@ (80030e8 <TIM_Base_SetConfig+0xfc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f023 0201 	bic.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]
  }
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00

080030f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 030a 	bic.w	r3, r3, #10
 8003134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800317e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	031b      	lsls	r3, r3, #12
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f043 0307 	orr.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003200:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	021a      	lsls	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e050      	b.n	80032de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1b      	ldr	r2, [pc, #108]	@ (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a19      	ldr	r2, [pc, #100]	@ (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003292:	d00e      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a15      	ldr	r2, [pc, #84]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a12      	ldr	r2, [pc, #72]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40013400 	.word	0x40013400
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e042      	b.n	80033b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd ffd6 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fdf9 	bl	8003f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d175      	bne.n	80034cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_UART_Transmit+0x2c>
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e06e      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fe fa83 	bl	8001908 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003418:	d108      	bne.n	800342c <HAL_UART_Transmit+0x6c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e003      	b.n	8003434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003434:	e02e      	b.n	8003494 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fb97 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e03a      	b.n	80034ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3302      	adds	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e007      	b.n	8003486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1cb      	bne.n	8003436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	@ 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fb63 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e006      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b08a      	sub	sp, #40	@ 0x28
 80034da:	af02      	add	r7, sp, #8
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f040 8081 	bne.w	80035fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_UART_Receive+0x2e>
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e079      	b.n	80035fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2222      	movs	r2, #34	@ 0x22
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351c:	f7fe f9f4 	bl	8001908 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003536:	d108      	bne.n	800354a <HAL_UART_Receive+0x74>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e003      	b.n	8003552 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003552:	e047      	b.n	80035e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2200      	movs	r2, #0
 800355c:	2120      	movs	r1, #32
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fb08 	bl	8003b74 <UART_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e042      	b.n	80035fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10c      	bne.n	8003596 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003588:	b29a      	uxth	r2, r3
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	3302      	adds	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e01f      	b.n	80035d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359e:	d007      	beq.n	80035b0 <HAL_UART_Receive+0xda>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_UART_Receive+0xe8>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e008      	b.n	80035d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1b2      	bne.n	8003554 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ba      	sub	sp, #232	@ 0xe8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_UART_IRQHandler+0x66>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fbbc 	bl	8003de0 <UART_Receive_IT>
      return;
 8003668:	e25b      	b.n	8003b22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800366a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80de 	beq.w	8003830 <HAL_UART_IRQHandler+0x22c>
 8003674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003684:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80d1 	beq.w	8003830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_UART_IRQHandler+0xae>
 800369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xd2>
 80036be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f043 0202 	orr.w	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_UART_IRQHandler+0xf6>
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f043 0204 	orr.w	r2, r3, #4
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <HAL_UART_IRQHandler+0x126>
 8003706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f043 0208 	orr.w	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 81f2 	beq.w	8003b18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_UART_IRQHandler+0x14e>
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fb47 	bl	8003de0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_UART_IRQHandler+0x17a>
 8003776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04f      	beq.n	800381e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa51 	bl	8003c26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d041      	beq.n	8003816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3314      	adds	r3, #20
 8003798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3314      	adds	r3, #20
 80037ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1d9      	bne.n	8003792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d013      	beq.n	800380e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	4a7e      	ldr	r2, [pc, #504]	@ (80039e4 <HAL_UART_IRQHandler+0x3e0>)
 80037ec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe f9d0 	bl	8001b98 <HAL_DMA_Abort_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e00e      	b.n	800382c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f99c 	bl	8003b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e00a      	b.n	800382c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f998 	bl	8003b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e006      	b.n	800382c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f994 	bl	8003b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800382a:	e175      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	bf00      	nop
    return;
 800382e:	e173      	b.n	8003b18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 814f 	bne.w	8003ad8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8148 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8141 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80b6 	beq.w	80039e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8145 	beq.w	8003b1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800389a:	429a      	cmp	r2, r3
 800389c:	f080 813e 	bcs.w	8003b1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f000 8088 	beq.w	80039c4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1d9      	bne.n	80038b4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003924:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003928:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800392c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e1      	bne.n	8003900 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800394c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800394e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003960:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003962:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003966:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800396e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e3      	bne.n	800393c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003994:	f023 0310 	bic.w	r3, r3, #16
 8003998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e3      	bne.n	8003982 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe f8af 	bl	8001b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8bf 	bl	8003b5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039e0:	e09c      	b.n	8003b1c <HAL_UART_IRQHandler+0x518>
 80039e2:	bf00      	nop
 80039e4:	08003ceb 	.word	0x08003ceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 808e 	beq.w	8003b20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8089 	beq.w	8003b20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a32:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e3      	bne.n	8003a0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	623b      	str	r3, [r7, #32]
   return(result);
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3314      	adds	r3, #20
 8003a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e3      	bne.n	8003a46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0310 	bic.w	r3, r3, #16
 8003aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ab0:	61fa      	str	r2, [r7, #28]
 8003ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	617b      	str	r3, [r7, #20]
   return(result);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e3      	bne.n	8003a8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f844 	bl	8003b5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ad6:	e023      	b.n	8003b20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_UART_IRQHandler+0x4f4>
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f90e 	bl	8003d12 <UART_Transmit_IT>
    return;
 8003af6:	e014      	b.n	8003b22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <HAL_UART_IRQHandler+0x51e>
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f94d 	bl	8003db0 <UART_EndTransmit_IT>
    return;
 8003b16:	e004      	b.n	8003b22 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b18:	bf00      	nop
 8003b1a:	e002      	b.n	8003b22 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b20:	bf00      	nop
  }
}
 8003b22:	37e8      	adds	r7, #232	@ 0xe8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b84:	e03b      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d037      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd febb 	bl	8001908 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e03a      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d023      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b80      	cmp	r3, #128	@ 0x80
 8003bba:	d020      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b40      	cmp	r3, #64	@ 0x40
 8003bc0:	d01d      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d116      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f81d 	bl	8003c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2208      	movs	r2, #8
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00f      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d0b4      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b095      	sub	sp, #84	@ 0x54
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d119      	bne.n	8003cd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f023 0310 	bic.w	r3, r3, #16
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cbe:	61ba      	str	r2, [r7, #24]
 8003cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6979      	ldr	r1, [r7, #20]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ce0:	bf00      	nop
 8003ce2:	3754      	adds	r7, #84	@ 0x54
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff ff21 	bl	8003b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b21      	cmp	r3, #33	@ 0x21
 8003d24:	d13e      	bne.n	8003da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d2e:	d114      	bne.n	8003d5a <UART_Transmit_IT+0x48>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d110      	bne.n	8003d5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	621a      	str	r2, [r3, #32]
 8003d58:	e008      	b.n	8003d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6211      	str	r1, [r2, #32]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fea9 	bl	8003b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	@ 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b22      	cmp	r3, #34	@ 0x22
 8003df2:	f040 80ae 	bne.w	8003f52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfe:	d117      	bne.n	8003e30 <UART_Receive_IT+0x50>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d113      	bne.n	8003e30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e2e:	e026      	b.n	8003e7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e42:	d007      	beq.n	8003e54 <UART_Receive_IT+0x74>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <UART_Receive_IT+0x82>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e008      	b.n	8003e74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d15d      	bne.n	8003f4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0220 	bic.w	r2, r2, #32
 8003ea0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d135      	bne.n	8003f44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	613b      	str	r3, [r7, #16]
   return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 0310 	bic.w	r3, r3, #16
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efe:	623a      	str	r2, [r7, #32]
 8003f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d10a      	bne.n	8003f36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fe0e 	bl	8003b5e <HAL_UARTEx_RxEventCallback>
 8003f42:	e002      	b.n	8003f4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fdf8 	bl	8003b3a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e002      	b.n	8003f54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3730      	adds	r7, #48	@ 0x30
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f96:	f023 030c 	bic.w	r3, r3, #12
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004070 <UART_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe fccc 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	e002      	b.n	8003fd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fcb4 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009a      	lsls	r2, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <UART_SetConfig+0x118>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	0119      	lsls	r1, r3, #4
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fbb2 f2f3 	udiv	r2, r2, r3
 8004008:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <UART_SetConfig+0x118>)
 800400a:	fba3 0302 	umull	r0, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2064      	movs	r0, #100	@ 0x64
 8004012:	fb00 f303 	mul.w	r3, r0, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	3332      	adds	r3, #50	@ 0x32
 800401c:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <UART_SetConfig+0x118>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004028:	4419      	add	r1, r3
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <UART_SetConfig+0x118>)
 8004042:	fba3 0302 	umull	r0, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2064      	movs	r0, #100	@ 0x64
 800404a:	fb00 f303 	mul.w	r3, r0, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	3332      	adds	r3, #50	@ 0x32
 8004054:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <UART_SetConfig+0x118>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	440a      	add	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40013800 	.word	0x40013800
 8004074:	51eb851f 	.word	0x51eb851f

08004078 <Delay_Init>:
TIM_HandleTypeDef *delay_timer_handle_us; // Pointer to timer handle for microsecond delay
TIM_HandleTypeDef *delay_timer_handle_ms; // Pointer to timer handle for millisecond delay

// Khởi tạo hàm delay với timer cụ thể cho microsecond và millisecond
void Delay_Init(TIM_HandleTypeDef *timer_handle_us,
		TIM_HandleTypeDef *timer_handle_ms) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	delay_timer_handle_us = timer_handle_us;    // Timer cho micro giây
 8004082:	4a0a      	ldr	r2, [pc, #40]	@ (80040ac <Delay_Init+0x34>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6013      	str	r3, [r2, #0]
	delay_timer_handle_ms = timer_handle_ms;    // Timer cho mili giây
 8004088:	4a09      	ldr	r2, [pc, #36]	@ (80040b0 <Delay_Init+0x38>)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start(delay_timer_handle_us);  // Bắt đầu timer cho micro giây
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <Delay_Init+0x34>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fd16 	bl	8002ac4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(delay_timer_handle_ms);  // Bắt đầu timer cho mili giây
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <Delay_Init+0x38>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fd11 	bl	8002ac4 <HAL_TIM_Base_Start>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000364 	.word	0x20000364
 80040b0:	20000368 	.word	0x20000368

080040b4 <delay_us>:

// Hàm delay với thời gian microsecond
void delay_us(uint16_t us) {
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
	// Set counter của timer về 0
	__HAL_TIM_SET_COUNTER(delay_timer_handle_us, 0);
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <delay_us+0x30>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2200      	movs	r2, #0
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

	// Chờ cho đến khi timer đếm đủ thời gian yêu cầu (micro giây)
	while (__HAL_TIM_GET_COUNTER(delay_timer_handle_us) < us)
 80040c8:	bf00      	nop
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <delay_us+0x30>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3f8      	bcc.n	80040ca <delay_us+0x16>
		;
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	20000364 	.word	0x20000364

080040e8 <Set_Pin_Output>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004106:	2301      	movs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410a:	2302      	movs	r3, #2
 800410c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fd fe47 	bl	8001da8 <HAL_GPIO_Init>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004122:	b580      	push	{r7, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004144:	2301      	movs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004148:	f107 0308 	add.w	r3, r7, #8
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fe2a 	bl	8001da8 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8004162:	2101      	movs	r1, #1
 8004164:	4815      	ldr	r0, [pc, #84]	@ (80041bc <DHT22_Check_Response+0x60>)
 8004166:	f7ff ffdc 	bl	8004122 <Set_Pin_Input>
	uint8_t Response = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	71fb      	strb	r3, [r7, #7]
	delay_us(40);  // wait for 40us
 800416e:	2028      	movs	r0, #40	@ 0x28
 8004170:	f7ff ffa0 	bl	80040b4 <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // if the pin is low
 8004174:	2101      	movs	r1, #1
 8004176:	4811      	ldr	r0, [pc, #68]	@ (80041bc <DHT22_Check_Response+0x60>)
 8004178:	f7fd ffaa 	bl	80020d0 <HAL_GPIO_ReadPin>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <DHT22_Check_Response+0x44>
	{
		delay_us(80);   // wait for 80us
 8004182:	2050      	movs	r0, #80	@ 0x50
 8004184:	f7ff ff96 	bl	80040b4 <delay_us>

		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 8004188:	2101      	movs	r1, #1
 800418a:	480c      	ldr	r0, [pc, #48]	@ (80041bc <DHT22_Check_Response+0x60>)
 800418c:	f7fd ffa0 	bl	80020d0 <HAL_GPIO_ReadPin>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <DHT22_Check_Response+0x40>
			Response = 1;  // if the pin is high, response is ok
 8004196:	2301      	movs	r3, #1
 8004198:	71fb      	strb	r3, [r7, #7]
 800419a:	e001      	b.n	80041a0 <DHT22_Check_Response+0x44>
		else
			Response = -1;
 800419c:	23ff      	movs	r3, #255	@ 0xff
 800419e:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 80041a0:	bf00      	nop
 80041a2:	2101      	movs	r1, #1
 80041a4:	4805      	ldr	r0, [pc, #20]	@ (80041bc <DHT22_Check_Response+0x60>)
 80041a6:	f7fd ff93 	bl	80020d0 <HAL_GPIO_ReadPin>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f8      	bne.n	80041a2 <DHT22_Check_Response+0x46>
		;   // wait for the pin to go low
	return Response;
 80041b0:	79fb      	ldrb	r3, [r7, #7]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40010c00 	.word	0x40010c00

080041c0 <DHT22_Read>:

uint8_t DHT22_Read(void) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 80041c6:	2300      	movs	r3, #0
 80041c8:	71bb      	strb	r3, [r7, #6]
 80041ca:	e037      	b.n	800423c <DHT22_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 80041cc:	bf00      	nop
 80041ce:	2101      	movs	r1, #1
 80041d0:	481e      	ldr	r0, [pc, #120]	@ (800424c <DHT22_Read+0x8c>)
 80041d2:	f7fd ff7d 	bl	80020d0 <HAL_GPIO_ReadPin>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f8      	beq.n	80041ce <DHT22_Read+0xe>
			;   // wait for the pin to go high
		delay_us(40);   // wait for 40 us
 80041dc:	2028      	movs	r0, #40	@ 0x28
 80041de:	f7ff ff69 	bl	80040b4 <delay_us>

		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80041e2:	2101      	movs	r1, #1
 80041e4:	4819      	ldr	r0, [pc, #100]	@ (800424c <DHT22_Read+0x8c>)
 80041e6:	f7fd ff73 	bl	80020d0 <HAL_GPIO_ReadPin>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10e      	bne.n	800420e <DHT22_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2201      	movs	r2, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	b25a      	sxtb	r2, r3
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	4013      	ands	r3, r2
 8004208:	b25b      	sxtb	r3, r3
 800420a:	71fb      	strb	r3, [r7, #7]
 800420c:	e00b      	b.n	8004226 <DHT22_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 800420e:	79bb      	ldrb	r3, [r7, #6]
 8004210:	f1c3 0307 	rsb	r3, r3, #7
 8004214:	2201      	movs	r2, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	b25a      	sxtb	r2, r3
 800421c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004220:	4313      	orrs	r3, r2
 8004222:	b25b      	sxtb	r3, r3
 8004224:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 8004226:	bf00      	nop
 8004228:	2101      	movs	r1, #1
 800422a:	4808      	ldr	r0, [pc, #32]	@ (800424c <DHT22_Read+0x8c>)
 800422c:	f7fd ff50 	bl	80020d0 <HAL_GPIO_ReadPin>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f8      	bne.n	8004228 <DHT22_Read+0x68>
	for (j = 0; j < 8; j++) {
 8004236:	79bb      	ldrb	r3, [r7, #6]
 8004238:	3301      	adds	r3, #1
 800423a:	71bb      	strb	r3, [r7, #6]
 800423c:	79bb      	ldrb	r3, [r7, #6]
 800423e:	2b07      	cmp	r3, #7
 8004240:	d9c4      	bls.n	80041cc <DHT22_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 }
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40010c00 	.word	0x40010c00

08004250 <DHT22_GetData>:
 uint8_t DHT22_GetData(float *Temperature, float *Humidity) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
 uint8_t Response = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
 // Start the DHT22 communication
 Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 800425e:	2101      	movs	r1, #1
 8004260:	483d      	ldr	r0, [pc, #244]	@ (8004358 <DHT22_GetData+0x108>)
 8004262:	f7ff ff41 	bl	80040e8 <Set_Pin_Output>
 HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8004266:	2200      	movs	r2, #0
 8004268:	2101      	movs	r1, #1
 800426a:	483b      	ldr	r0, [pc, #236]	@ (8004358 <DHT22_GetData+0x108>)
 800426c:	f7fd ff47 	bl	80020fe <HAL_GPIO_WritePin>
	delay_us(1200);   // wait for > 1ms
 8004270:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8004274:	f7ff ff1e 	bl	80040b4 <delay_us>

 HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8004278:	2201      	movs	r2, #1
 800427a:	2101      	movs	r1, #1
 800427c:	4836      	ldr	r0, [pc, #216]	@ (8004358 <DHT22_GetData+0x108>)
 800427e:	f7fd ff3e 	bl	80020fe <HAL_GPIO_WritePin>
	delay_us(20);   // wait for 20us
 8004282:	2014      	movs	r0, #20
 8004284:	f7ff ff16 	bl	80040b4 <delay_us>

 Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8004288:	2101      	movs	r1, #1
 800428a:	4833      	ldr	r0, [pc, #204]	@ (8004358 <DHT22_GetData+0x108>)
 800428c:	f7ff ff49 	bl	8004122 <Set_Pin_Input>

 // Check response from DHT22
 DHT22_Check_Response();
 8004290:	f7ff ff64 	bl	800415c <DHT22_Check_Response>
 Rh_byte1 = DHT22_Read();  // Read RH data
 8004294:	f7ff ff94 	bl	80041c0 <DHT22_Read>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	4b2f      	ldr	r3, [pc, #188]	@ (800435c <DHT22_GetData+0x10c>)
 800429e:	701a      	strb	r2, [r3, #0]
 Rh_byte2 = DHT22_Read();
 80042a0:	f7ff ff8e 	bl	80041c0 <DHT22_Read>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004360 <DHT22_GetData+0x110>)
 80042aa:	701a      	strb	r2, [r3, #0]
 Temp_byte1 = DHT22_Read();  // Read Temperature data
 80042ac:	f7ff ff88 	bl	80041c0 <DHT22_Read>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <DHT22_GetData+0x114>)
 80042b6:	701a      	strb	r2, [r3, #0]
 Temp_byte2 = DHT22_Read();
 80042b8:	f7ff ff82 	bl	80041c0 <DHT22_Read>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	4b29      	ldr	r3, [pc, #164]	@ (8004368 <DHT22_GetData+0x118>)
 80042c2:	701a      	strb	r2, [r3, #0]
 SUM = DHT22_Read();  // Read checksum
 80042c4:	f7ff ff7c 	bl	80041c0 <DHT22_Read>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b27      	ldr	r3, [pc, #156]	@ (800436c <DHT22_GetData+0x11c>)
 80042ce:	801a      	strh	r2, [r3, #0]

 // Combine bytes to get RH and Temp
 TEMP = ((Temp_byte1 << 8) | Temp_byte2);
 80042d0:	4b24      	ldr	r3, [pc, #144]	@ (8004364 <DHT22_GetData+0x114>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	4b23      	ldr	r3, [pc, #140]	@ (8004368 <DHT22_GetData+0x118>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b21b      	sxth	r3, r3
 80042de:	4313      	orrs	r3, r2
 80042e0:	b21b      	sxth	r3, r3
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <DHT22_GetData+0x120>)
 80042e6:	801a      	strh	r2, [r3, #0]
 RH = ((Rh_byte1 << 8) | Rh_byte2);
 80042e8:	4b1c      	ldr	r3, [pc, #112]	@ (800435c <DHT22_GetData+0x10c>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	b21a      	sxth	r2, r3
 80042f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <DHT22_GetData+0x110>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b21b      	sxth	r3, r3
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004374 <DHT22_GetData+0x124>)
 80042fe:	801a      	strh	r2, [r3, #0]

 // Convert to floating-point
 *Temperature = (float) (TEMP / 10.0);
 8004300:	4b1b      	ldr	r3, [pc, #108]	@ (8004370 <DHT22_GetData+0x120>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc f8e9 	bl	80004dc <__aeabi_i2d>
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <DHT22_GetData+0x128>)
 8004310:	f7fc fa78 	bl	8000804 <__aeabi_ddiv>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f7fc fc20 	bl	8000b60 <__aeabi_d2f>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	601a      	str	r2, [r3, #0]
 *Humidity = (float) (RH / 10.0);
 8004326:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <DHT22_GetData+0x124>)
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f8d6 	bl	80004dc <__aeabi_i2d>
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <DHT22_GetData+0x128>)
 8004336:	f7fc fa65 	bl	8000804 <__aeabi_ddiv>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f7fc fc0d 	bl	8000b60 <__aeabi_d2f>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]

 return Response; // Return the response, 1 means successful, -1 means failed
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40010c00 	.word	0x40010c00
 800435c:	2000036c 	.word	0x2000036c
 8004360:	2000036d 	.word	0x2000036d
 8004364:	2000036e 	.word	0x2000036e
 8004368:	2000036f 	.word	0x2000036f
 800436c:	20000370 	.word	0x20000370
 8004370:	20000374 	.word	0x20000374
 8004374:	20000372 	.word	0x20000372
 8004378:	40240000 	.word	0x40240000

0800437c <flame_Init>:
static struct _flame_device {
	GPIO_TypeDef *port;
	uint16_t pin;
} flame_device;

void flame_Init(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN) {
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]
	flame_device.port = GPIOx;
 8004388:	4a05      	ldr	r2, [pc, #20]	@ (80043a0 <flame_Init+0x24>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6013      	str	r3, [r2, #0]
	flame_device.pin = GPIO_PIN;
 800438e:	4a04      	ldr	r2, [pc, #16]	@ (80043a0 <flame_Init+0x24>)
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	8093      	strh	r3, [r2, #4]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000380 	.word	0x20000380

080043a4 <flame_get_data>:

uint8_t flame_get_data(void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(flame_device.port, flame_device.pin) == 0)
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <flame_get_data+0x24>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a06      	ldr	r2, [pc, #24]	@ (80043c8 <flame_get_data+0x24>)
 80043ae:	8892      	ldrh	r2, [r2, #4]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fe8c 	bl	80020d0 <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <flame_get_data+0x1e>
		return 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <flame_get_data+0x20>
	else
		return 0;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000380 	.word	0x20000380

080043cc <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80043cc:	b5b0      	push	{r4, r5, r7, lr}
 80043ce:	b08a      	sub	sp, #40	@ 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80043da:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80043de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80043e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80043e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ea:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80043ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80043ee:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f80e 	bl	8004422 <Lcd_init>

	return lcd;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	461d      	mov	r5, r3
 800440a:	f107 0410 	add.w	r4, r7, #16
 800440e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004416:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	3728      	adds	r7, #40	@ 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}

08004422 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7d9b      	ldrb	r3, [r3, #22]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8004432:	2133      	movs	r1, #51	@ 0x33
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f863 	bl	8004500 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800443a:	2132      	movs	r1, #50	@ 0x32
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f85f 	bl	8004500 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8004442:	2128      	movs	r1, #40	@ 0x28
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f85b 	bl	8004500 <lcd_write_command>
 800444a:	e003      	b.n	8004454 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800444c:	2138      	movs	r1, #56	@ 0x38
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f856 	bl	8004500 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8004454:	2101      	movs	r1, #1
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f852 	bl	8004500 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);	// Lcd-on, cursor-off, no-blink
 800445c:	210c      	movs	r1, #12
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f84e 	bl	8004500 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8004464:	2106      	movs	r1, #6
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f84a 	bl	8004500 <lcd_write_command>
}
 800446c:	bf00      	nop
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	e00a      	b.n	800449a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f864 	bl	800455c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	3301      	adds	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	7bfc      	ldrb	r4, [r7, #15]
 800449c:	6838      	ldr	r0, [r7, #0]
 800449e:	f7fb fec3 	bl	8000228 <strlen>
 80044a2:	4603      	mov	r3, r0
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d3ed      	bcc.n	8004484 <Lcd_string+0x10>
	}
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
	...

080044b4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
 80044c0:	4613      	mov	r3, r2
 80044c2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	4a07      	ldr	r2, [pc, #28]	@ (80044e4 <Lcd_cursor+0x30>)
 80044c8:	5cd2      	ldrb	r2, [r2, r3]
 80044ca:	78bb      	ldrb	r3, [r7, #2]
 80044cc:	4413      	add	r3, r2
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3b80      	subs	r3, #128	@ 0x80
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f812 	bl	8004500 <lcd_write_command>
	#endif
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	080079d0 	.word	0x080079d0

080044e8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80044f0:	2101      	movs	r1, #1
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f804 	bl	8004500 <lcd_write_command>
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6898      	ldr	r0, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	899b      	ldrh	r3, [r3, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	4619      	mov	r1, r3
 8004518:	f7fd fdf1 	bl	80020fe <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	7d9b      	ldrb	r3, [r3, #22]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d111      	bne.n	8004548 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2204      	movs	r2, #4
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f842 	bl	80045b8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2204      	movs	r2, #4
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f839 	bl	80045b8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8004546:	e005      	b.n	8004554 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	2208      	movs	r2, #8
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f832 	bl	80045b8 <lcd_write>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6898      	ldr	r0, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	899b      	ldrh	r3, [r3, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	4619      	mov	r1, r3
 8004574:	f7fd fdc3 	bl	80020fe <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7d9b      	ldrb	r3, [r3, #22]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2204      	movs	r2, #4
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f814 	bl	80045b8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2204      	movs	r2, #4
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f80b 	bl	80045b8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80045a2:	e005      	b.n	80045b0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	2208      	movs	r2, #8
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f804 	bl	80045b8 <lcd_write>
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
 80045c4:	4613      	mov	r3, r2
 80045c6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e019      	b.n	8004602 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	8819      	ldrh	r1, [r3, #0]
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	fa42 f303 	asr.w	r3, r2, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fd fd81 	bl	80020fe <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	78bb      	ldrb	r3, [r7, #2]
 8004606:	429a      	cmp	r2, r3
 8004608:	d3e1      	bcc.n	80045ce <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6918      	ldr	r0, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8a9b      	ldrh	r3, [r3, #20]
 8004612:	2201      	movs	r2, #1
 8004614:	4619      	mov	r1, r3
 8004616:	f7fd fd72 	bl	80020fe <HAL_GPIO_WritePin>
	//DELAY(1.719);
	HAL_Delay(1);
 800461a:	2001      	movs	r0, #1
 800461c:	f7fd f97e 	bl	800191c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6918      	ldr	r0, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8a9b      	ldrh	r3, [r3, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	4619      	mov	r1, r3
 800462c:	f7fd fd67 	bl	80020fe <HAL_GPIO_WritePin>
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <SIM_Check>:

// Biến toàn cục
uint8_t simBuffer[100] = { 0 };

// Hàm khởi tạo SIM
HAL_StatusTypeDef SIM_Check(UART_HandleTypeDef *huart) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b098      	sub	sp, #96	@ 0x60
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	char ATcommand[80] = "AT\r\n";
 8004640:	4a23      	ldr	r2, [pc, #140]	@ (80046d0 <SIM_Check+0x98>)
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	6810      	ldr	r0, [r2, #0]
 8004648:	6018      	str	r0, [r3, #0]
 800464a:	7912      	ldrb	r2, [r2, #4]
 800464c:	711a      	strb	r2, [r3, #4]
 800464e:	f107 0311 	add.w	r3, r7, #17
 8004652:	224b      	movs	r2, #75	@ 0x4b
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f001 f857 	bl	800570a <memset>
	uint8_t ATisOK = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	while (!ATisOK) {
 8004662:	e02b      	b.n	80046bc <SIM_Check+0x84>
		HAL_UART_Transmit(huart, (uint8_t*) ATcommand, strlen(ATcommand),
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	4618      	mov	r0, r3
 800466a:	f7fb fddd 	bl	8000228 <strlen>
 800466e:	4603      	mov	r3, r0
 8004670:	b29a      	uxth	r2, r3
 8004672:	f107 010c 	add.w	r1, r7, #12
 8004676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe fea0 	bl	80033c0 <HAL_UART_Transmit>
				SIM_TX_TIMEOUT);

		HAL_UART_Receive(huart, simBuffer, 100, SIM_RX_TIMEOUT);
 8004680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004684:	2264      	movs	r2, #100	@ 0x64
 8004686:	4913      	ldr	r1, [pc, #76]	@ (80046d4 <SIM_Check+0x9c>)
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fe ff24 	bl	80034d6 <HAL_UART_Receive>

		if (strstr((char*) simBuffer, "OK")) {
 800468e:	4912      	ldr	r1, [pc, #72]	@ (80046d8 <SIM_Check+0xa0>)
 8004690:	4810      	ldr	r0, [pc, #64]	@ (80046d4 <SIM_Check+0x9c>)
 8004692:	f001 f842 	bl	800571a <strstr>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <SIM_Check+0x72>
			memset(simBuffer, 0, sizeof(simBuffer));
 800469c:	2264      	movs	r2, #100	@ 0x64
 800469e:	2100      	movs	r1, #0
 80046a0:	480c      	ldr	r0, [pc, #48]	@ (80046d4 <SIM_Check+0x9c>)
 80046a2:	f001 f832 	bl	800570a <memset>
			return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e00d      	b.n	80046c6 <SIM_Check+0x8e>
			ATisOK = 1;
		}
		memset(simBuffer, 0, sizeof(simBuffer));
 80046aa:	2264      	movs	r2, #100	@ 0x64
 80046ac:	2100      	movs	r1, #0
 80046ae:	4809      	ldr	r0, [pc, #36]	@ (80046d4 <SIM_Check+0x9c>)
 80046b0:	f001 f82b 	bl	800570a <memset>
		HAL_Delay(1000);
 80046b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046b8:	f7fd f930 	bl	800191c <HAL_Delay>
	while (!ATisOK) {
 80046bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0cf      	beq.n	8004664 <SIM_Check+0x2c>
	}
	return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3760      	adds	r7, #96	@ 0x60
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	08007914 	.word	0x08007914
 80046d4:	20000388 	.word	0x20000388
 80046d8:	08007910 	.word	0x08007910

080046dc <SIM_MakeCall>:

 // Hàm gọi điện (dùng số mặc định từ define)
HAL_StatusTypeDef SIM_MakeCall(UART_HandleTypeDef *huart) {
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b098      	sub	sp, #96	@ 0x60
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	// Sử dụng DEFAULT_PHONE_NUMBER đã define
	uint8_t ATisOK = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	char ATcommand[80] = "ATD" DEFAULT_PHONE_NUMBER ";\r\n";
 80046ea:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <SIM_MakeCall+0xa4>)
 80046ec:	f107 040c 	add.w	r4, r7, #12
 80046f0:	461d      	mov	r5, r3
 80046f2:	6828      	ldr	r0, [r5, #0]
 80046f4:	6869      	ldr	r1, [r5, #4]
 80046f6:	68aa      	ldr	r2, [r5, #8]
 80046f8:	68eb      	ldr	r3, [r5, #12]
 80046fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046fc:	7c2b      	ldrb	r3, [r5, #16]
 80046fe:	7023      	strb	r3, [r4, #0]
 8004700:	f107 031d 	add.w	r3, r7, #29
 8004704:	223f      	movs	r2, #63	@ 0x3f
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fffe 	bl	800570a <memset>
	while (!ATisOK) {
 800470e:	e02e      	b.n	800476e <SIM_MakeCall+0x92>
		HAL_UART_Transmit(huart, (uint8_t*) ATcommand, strlen(ATcommand),
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb fd87 	bl	8000228 <strlen>
 800471a:	4603      	mov	r3, r0
 800471c:	b29a      	uxth	r2, r3
 800471e:	f107 010c 	add.w	r1, r7, #12
 8004722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fe fe4a 	bl	80033c0 <HAL_UART_Transmit>
			SIM_TX_TIMEOUT);
		HAL_UART_Receive(huart, simBuffer, 100, SIM_RX_TIMEOUT);
 800472c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004730:	2264      	movs	r2, #100	@ 0x64
 8004732:	4914      	ldr	r1, [pc, #80]	@ (8004784 <SIM_MakeCall+0xa8>)
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fe fece 	bl	80034d6 <HAL_UART_Receive>
		if (strstr((char*) simBuffer, "OK")) {
 800473a:	4913      	ldr	r1, [pc, #76]	@ (8004788 <SIM_MakeCall+0xac>)
 800473c:	4811      	ldr	r0, [pc, #68]	@ (8004784 <SIM_MakeCall+0xa8>)
 800473e:	f000 ffec 	bl	800571a <strstr>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <SIM_MakeCall+0x80>
		memset(simBuffer, 0, sizeof(simBuffer));
 8004748:	2264      	movs	r2, #100	@ 0x64
 800474a:	2100      	movs	r1, #0
 800474c:	480d      	ldr	r0, [pc, #52]	@ (8004784 <SIM_MakeCall+0xa8>)
 800474e:	f000 ffdc 	bl	800570a <memset>
			ATisOK = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e00d      	b.n	8004778 <SIM_MakeCall+0x9c>
	}
		memset(simBuffer, 0, sizeof(simBuffer));
 800475c:	2264      	movs	r2, #100	@ 0x64
 800475e:	2100      	movs	r1, #0
 8004760:	4808      	ldr	r0, [pc, #32]	@ (8004784 <SIM_MakeCall+0xa8>)
 8004762:	f000 ffd2 	bl	800570a <memset>
		HAL_Delay(1000);
 8004766:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800476a:	f7fd f8d7 	bl	800191c <HAL_Delay>
	while (!ATisOK) {
 800476e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0cc      	beq.n	8004710 <SIM_MakeCall+0x34>
	}
	return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
}
 8004778:	4618      	mov	r0, r3
 800477a:	3760      	adds	r7, #96	@ 0x60
 800477c:	46bd      	mov	sp, r7
 800477e:	bdb0      	pop	{r4, r5, r7, pc}
 8004780:	0800791c 	.word	0x0800791c
 8004784:	20000388 	.word	0x20000388
 8004788:	08007910 	.word	0x08007910

0800478c <mq2_Init>:
static struct _mq2_device {
	GPIO_TypeDef *port;
	uint16_t pin;
} mq2_device;

void mq2_Init(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN) {
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
	mq2_device.port = GPIOx;
 8004798:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <mq2_Init+0x24>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6013      	str	r3, [r2, #0]
	mq2_device.pin = GPIO_PIN;
 800479e:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <mq2_Init+0x24>)
 80047a0:	887b      	ldrh	r3, [r7, #2]
 80047a2:	8093      	strh	r3, [r2, #4]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	200003ec 	.word	0x200003ec

080047b4 <mq2_get_data>:

uint8_t mq2_get_data(void) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(mq2_device.port, mq2_device.pin) == 0)
 80047b8:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <mq2_get_data+0x24>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a06      	ldr	r2, [pc, #24]	@ (80047d8 <mq2_get_data+0x24>)
 80047be:	8892      	ldrh	r2, [r2, #4]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd fc84 	bl	80020d0 <HAL_GPIO_ReadPin>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <mq2_get_data+0x1e>
		return 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <mq2_get_data+0x20>
	else
		return 0;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	200003ec 	.word	0x200003ec

080047dc <Output_On>:
#include "output.h"

/**
 * @brief  Bật đồng loạt các chân
 */
void Output_On(void) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 80047e0:	2108      	movs	r1, #8
 80047e2:	480b      	ldr	r0, [pc, #44]	@ (8004810 <Output_On+0x34>)
 80047e4:	f7fd fc74 	bl	80020d0 <HAL_GPIO_ReadPin>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10e      	bne.n	800480c <Output_On+0x30>
	HAL_GPIO_WritePin(OUTPUT_GPIO_PORT, OUTPUT_PIN_1, GPIO_PIN_RESET);
 80047ee:	2200      	movs	r2, #0
 80047f0:	2110      	movs	r1, #16
 80047f2:	4808      	ldr	r0, [pc, #32]	@ (8004814 <Output_On+0x38>)
 80047f4:	f7fd fc83 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_GPIO_PORT, OUTPUT_PIN_2, GPIO_PIN_SET);
 80047f8:	2201      	movs	r2, #1
 80047fa:	2120      	movs	r1, #32
 80047fc:	4805      	ldr	r0, [pc, #20]	@ (8004814 <Output_On+0x38>)
 80047fe:	f7fd fc7e 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_GPIO_PORT, OUTPUT_PIN_3, GPIO_PIN_SET);
 8004802:	2201      	movs	r2, #1
 8004804:	2140      	movs	r1, #64	@ 0x40
 8004806:	4803      	ldr	r0, [pc, #12]	@ (8004814 <Output_On+0x38>)
 8004808:	f7fd fc79 	bl	80020fe <HAL_GPIO_WritePin>
	}
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40011000 	.word	0x40011000
 8004814:	40010800 	.word	0x40010800

08004818 <Output_Off>:

/**
 * @brief  Tắt đồng loạt các chân
 */
void Output_Off(void) {
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET) {
 800481c:	2108      	movs	r1, #8
 800481e:	480b      	ldr	r0, [pc, #44]	@ (800484c <Output_Off+0x34>)
 8004820:	f7fd fc56 	bl	80020d0 <HAL_GPIO_ReadPin>
 8004824:	4603      	mov	r3, r0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10e      	bne.n	8004848 <Output_Off+0x30>
	HAL_GPIO_WritePin(OUTPUT_GPIO_PORT, OUTPUT_PIN_1, GPIO_PIN_SET);
 800482a:	2201      	movs	r2, #1
 800482c:	2110      	movs	r1, #16
 800482e:	4808      	ldr	r0, [pc, #32]	@ (8004850 <Output_Off+0x38>)
 8004830:	f7fd fc65 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_GPIO_PORT, OUTPUT_PIN_2, GPIO_PIN_RESET);
 8004834:	2200      	movs	r2, #0
 8004836:	2120      	movs	r1, #32
 8004838:	4805      	ldr	r0, [pc, #20]	@ (8004850 <Output_Off+0x38>)
 800483a:	f7fd fc60 	bl	80020fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_GPIO_PORT, OUTPUT_PIN_3, GPIO_PIN_RESET);
 800483e:	2200      	movs	r2, #0
 8004840:	2140      	movs	r1, #64	@ 0x40
 8004842:	4803      	ldr	r0, [pc, #12]	@ (8004850 <Output_Off+0x38>)
 8004844:	f7fd fc5b 	bl	80020fe <HAL_GPIO_WritePin>
	}
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40011000 	.word	0x40011000
 8004850:	40010800 	.word	0x40010800

08004854 <Display_Temp>:


Lcd_HandleTypeDef lcd;
extern UART_HandleTypeDef huart1;

void Display_Temp(float Temp) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	char str[20] = { 0 };
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
	Lcd_cursor(&lcd, 0, 0);
 800486e:	2200      	movs	r2, #0
 8004870:	2100      	movs	r1, #0
 8004872:	480d      	ldr	r0, [pc, #52]	@ (80048a8 <Display_Temp+0x54>)
 8004874:	f7ff fe1e 	bl	80044b4 <Lcd_cursor>
	sprintf(str, "TEMP:- %.2f ", Temp);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fb fe41 	bl	8000500 <__aeabi_f2d>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	f107 000c 	add.w	r0, r7, #12
 8004886:	4909      	ldr	r1, [pc, #36]	@ (80048ac <Display_Temp+0x58>)
 8004888:	f000 fedc 	bl	8005644 <siprintf>
	Lcd_string(&lcd, str);
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	4805      	ldr	r0, [pc, #20]	@ (80048a8 <Display_Temp+0x54>)
 8004894:	f7ff fdee 	bl	8004474 <Lcd_string>
	Lcd_string(&lcd, "C");
 8004898:	4905      	ldr	r1, [pc, #20]	@ (80048b0 <Display_Temp+0x5c>)
 800489a:	4803      	ldr	r0, [pc, #12]	@ (80048a8 <Display_Temp+0x54>)
 800489c:	f7ff fdea 	bl	8004474 <Lcd_string>
}
 80048a0:	bf00      	nop
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200003f4 	.word	0x200003f4
 80048ac:	08007930 	.word	0x08007930
 80048b0:	08007940 	.word	0x08007940

080048b4 <Display_Rh>:

void Display_Rh(float Rh) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
		char str[20] = { 0 };
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	f107 0310 	add.w	r3, r7, #16
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
		Lcd_cursor(&lcd, 1, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2101      	movs	r1, #1
 80048d2:	480d      	ldr	r0, [pc, #52]	@ (8004908 <Display_Rh+0x54>)
 80048d4:	f7ff fdee 	bl	80044b4 <Lcd_cursor>
		sprintf(str, "RH:- %.2f ", Rh);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fb fe11 	bl	8000500 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	f107 000c 	add.w	r0, r7, #12
 80048e6:	4909      	ldr	r1, [pc, #36]	@ (800490c <Display_Rh+0x58>)
 80048e8:	f000 feac 	bl	8005644 <siprintf>
		Lcd_string(&lcd, str);
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	4619      	mov	r1, r3
 80048f2:	4805      	ldr	r0, [pc, #20]	@ (8004908 <Display_Rh+0x54>)
 80048f4:	f7ff fdbe 	bl	8004474 <Lcd_string>
		Lcd_string(&lcd, "%");
 80048f8:	4905      	ldr	r1, [pc, #20]	@ (8004910 <Display_Rh+0x5c>)
 80048fa:	4803      	ldr	r0, [pc, #12]	@ (8004908 <Display_Rh+0x54>)
 80048fc:	f7ff fdba 	bl	8004474 <Lcd_string>
}
 8004900:	bf00      	nop
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	200003f4 	.word	0x200003f4
 800490c:	08007944 	.word	0x08007944
 8004910:	08007950 	.word	0x08007950

08004914 <Display_Sim>:


void Display_Sim(int simcheck) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
		if (simcheck == HAL_OK) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <Display_Sim+0x22>
			Lcd_cursor(&lcd, 1, 14);
 8004922:	220e      	movs	r2, #14
 8004924:	2101      	movs	r1, #1
 8004926:	4808      	ldr	r0, [pc, #32]	@ (8004948 <Display_Sim+0x34>)
 8004928:	f7ff fdc4 	bl	80044b4 <Lcd_cursor>
			Lcd_string(&lcd, "4G");
 800492c:	4907      	ldr	r1, [pc, #28]	@ (800494c <Display_Sim+0x38>)
 800492e:	4806      	ldr	r0, [pc, #24]	@ (8004948 <Display_Sim+0x34>)
 8004930:	f7ff fda0 	bl	8004474 <Lcd_string>
	} else {
			Lcd_string(&lcd, "NO_SIM");
	}
}
 8004934:	e003      	b.n	800493e <Display_Sim+0x2a>
			Lcd_string(&lcd, "NO_SIM");
 8004936:	4906      	ldr	r1, [pc, #24]	@ (8004950 <Display_Sim+0x3c>)
 8004938:	4803      	ldr	r0, [pc, #12]	@ (8004948 <Display_Sim+0x34>)
 800493a:	f7ff fd9b 	bl	8004474 <Lcd_string>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200003f4 	.word	0x200003f4
 800494c:	08007954 	.word	0x08007954
 8004950:	08007958 	.word	0x08007958

08004954 <Lcd_warning>:
void Lcd_warning(float Temp, uint8_t *status, uint8_t *status_1) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
		// Nếu nhiệt độ lớn hơn 40 và cảnh báo chưa được hiển thị
	if (Temp > 35 && *status == 0 && mq2_get_data() == 0
 8004960:	49a2      	ldr	r1, [pc, #648]	@ (8004bec <Lcd_warning+0x298>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7fc f9b8 	bl	8000cd8 <__aeabi_fcmpgt>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d022      	beq.n	80049b4 <Lcd_warning+0x60>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11e      	bne.n	80049b4 <Lcd_warning+0x60>
 8004976:	f7ff ff1d 	bl	80047b4 <mq2_get_data>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d119      	bne.n	80049b4 <Lcd_warning+0x60>
			&& flame_get_data() == 0) {
 8004980:	f7ff fd10 	bl	80043a4 <flame_get_data>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d114      	bne.n	80049b4 <Lcd_warning+0x60>
			Lcd_clear(&lcd);
 800498a:	4899      	ldr	r0, [pc, #612]	@ (8004bf0 <Lcd_warning+0x29c>)
 800498c:	f7ff fdac 	bl	80044e8 <Lcd_clear>
			Lcd_cursor(&lcd, 0, 0);
 8004990:	2200      	movs	r2, #0
 8004992:	2100      	movs	r1, #0
 8004994:	4896      	ldr	r0, [pc, #600]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004996:	f7ff fd8d 	bl	80044b4 <Lcd_cursor>
		Lcd_string(&lcd, "OVER HEAT!!!");
 800499a:	4996      	ldr	r1, [pc, #600]	@ (8004bf4 <Lcd_warning+0x2a0>)
 800499c:	4894      	ldr	r0, [pc, #592]	@ (8004bf0 <Lcd_warning+0x29c>)
 800499e:	f7ff fd69 	bl	8004474 <Lcd_string>
		Output_On();
 80049a2:	f7ff ff1b 	bl	80047dc <Output_On>
		SIM_MakeCall(&huart1);
 80049a6:	4894      	ldr	r0, [pc, #592]	@ (8004bf8 <Lcd_warning+0x2a4>)
 80049a8:	f7ff fe98 	bl	80046dc <SIM_MakeCall>
			// Đặt trạng thái cảnh báo đã được hiển thị
			*status = 1;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e01c      	b.n	80049ee <Lcd_warning+0x9a>

		}
		// Nếu nhiệt độ dưới 40 và cảnh báo đã được hiển thị, xóa cảnh báo
	else if (Temp <= 35 && *status == 1 && mq2_get_data() == 0
 80049b4:	498d      	ldr	r1, [pc, #564]	@ (8004bec <Lcd_warning+0x298>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7fc f97a 	bl	8000cb0 <__aeabi_fcmple>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <Lcd_warning+0x9a>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d111      	bne.n	80049ee <Lcd_warning+0x9a>
 80049ca:	f7ff fef3 	bl	80047b4 <mq2_get_data>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10c      	bne.n	80049ee <Lcd_warning+0x9a>
			&& flame_get_data() == 0) {
 80049d4:	f7ff fce6 	bl	80043a4 <flame_get_data>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <Lcd_warning+0x9a>
		Lcd_clear(&lcd);
 80049de:	4884      	ldr	r0, [pc, #528]	@ (8004bf0 <Lcd_warning+0x29c>)
 80049e0:	f7ff fd82 	bl	80044e8 <Lcd_clear>
			// Đặt trạng thái cảnh báo đã bị xóa
		Output_Off();
 80049e4:	f7ff ff18 	bl	8004818 <Output_Off>
			*status = 0;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
		}
	if (mq2_get_data() == 1 && *status == 0 && Temp < 35
 80049ee:	f7ff fee1 	bl	80047b4 <mq2_get_data>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d124      	bne.n	8004a42 <Lcd_warning+0xee>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d120      	bne.n	8004a42 <Lcd_warning+0xee>
 8004a00:	497a      	ldr	r1, [pc, #488]	@ (8004bec <Lcd_warning+0x298>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7fc f94a 	bl	8000c9c <__aeabi_fcmplt>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d019      	beq.n	8004a42 <Lcd_warning+0xee>
			&& flame_get_data() == 0) {
 8004a0e:	f7ff fcc9 	bl	80043a4 <flame_get_data>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d114      	bne.n	8004a42 <Lcd_warning+0xee>
		Lcd_clear(&lcd);
 8004a18:	4875      	ldr	r0, [pc, #468]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004a1a:	f7ff fd65 	bl	80044e8 <Lcd_clear>
		Lcd_cursor(&lcd, 0, 0);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	4873      	ldr	r0, [pc, #460]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004a24:	f7ff fd46 	bl	80044b4 <Lcd_cursor>
		Lcd_string(&lcd, "Gas detect !!!");
 8004a28:	4974      	ldr	r1, [pc, #464]	@ (8004bfc <Lcd_warning+0x2a8>)
 8004a2a:	4871      	ldr	r0, [pc, #452]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004a2c:	f7ff fd22 	bl	8004474 <Lcd_string>
		Output_On();
 8004a30:	f7ff fed4 	bl	80047dc <Output_On>
		SIM_MakeCall(&huart1);
 8004a34:	4870      	ldr	r0, [pc, #448]	@ (8004bf8 <Lcd_warning+0x2a4>)
 8004a36:	f7ff fe51 	bl	80046dc <SIM_MakeCall>
		*status = 1;  // Đặt trạng thái gas đã được phát hiện
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e01c      	b.n	8004a7c <Lcd_warning+0x128>
	} else if (mq2_get_data() == 0 && *status == 1 && Temp < 35
 8004a42:	f7ff feb7 	bl	80047b4 <mq2_get_data>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d117      	bne.n	8004a7c <Lcd_warning+0x128>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d113      	bne.n	8004a7c <Lcd_warning+0x128>
 8004a54:	4965      	ldr	r1, [pc, #404]	@ (8004bec <Lcd_warning+0x298>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7fc f920 	bl	8000c9c <__aeabi_fcmplt>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <Lcd_warning+0x128>
			&& flame_get_data() == 0) {
 8004a62:	f7ff fc9f 	bl	80043a4 <flame_get_data>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <Lcd_warning+0x128>
		Lcd_clear(&lcd);
 8004a6c:	4860      	ldr	r0, [pc, #384]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004a6e:	f7ff fd3b 	bl	80044e8 <Lcd_clear>
		Output_Off();
 8004a72:	f7ff fed1 	bl	8004818 <Output_Off>
		*status = 0;  // Đặt trạng thái gas đã bị xóa
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
	}
	// Kiểm tra cảm biến Flame (Fire detection)
	if (flame_get_data() == 1 && *status == 0 && Temp < 35
 8004a7c:	f7ff fc92 	bl	80043a4 <flame_get_data>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d124      	bne.n	8004ad0 <Lcd_warning+0x17c>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d120      	bne.n	8004ad0 <Lcd_warning+0x17c>
 8004a8e:	4957      	ldr	r1, [pc, #348]	@ (8004bec <Lcd_warning+0x298>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7fc f903 	bl	8000c9c <__aeabi_fcmplt>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <Lcd_warning+0x17c>
			&& mq2_get_data() == 0) {
 8004a9c:	f7ff fe8a 	bl	80047b4 <mq2_get_data>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d114      	bne.n	8004ad0 <Lcd_warning+0x17c>
		Lcd_clear(&lcd);
 8004aa6:	4852      	ldr	r0, [pc, #328]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004aa8:	f7ff fd1e 	bl	80044e8 <Lcd_clear>
		Lcd_cursor(&lcd, 0, 0);
 8004aac:	2200      	movs	r2, #0
 8004aae:	2100      	movs	r1, #0
 8004ab0:	484f      	ldr	r0, [pc, #316]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004ab2:	f7ff fcff 	bl	80044b4 <Lcd_cursor>
		Lcd_string(&lcd, "Fire detect !!!");
 8004ab6:	4952      	ldr	r1, [pc, #328]	@ (8004c00 <Lcd_warning+0x2ac>)
 8004ab8:	484d      	ldr	r0, [pc, #308]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004aba:	f7ff fcdb 	bl	8004474 <Lcd_string>
		Output_On();
 8004abe:	f7ff fe8d 	bl	80047dc <Output_On>
		SIM_MakeCall(&huart1);
 8004ac2:	484d      	ldr	r0, [pc, #308]	@ (8004bf8 <Lcd_warning+0x2a4>)
 8004ac4:	f7ff fe0a 	bl	80046dc <SIM_MakeCall>
		*status = 1;  // Đặt trạng thái lửa đã được phát hiện
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e01c      	b.n	8004b0a <Lcd_warning+0x1b6>
	} else if (flame_get_data() == 0 && *status == 1 && Temp < 35
 8004ad0:	f7ff fc68 	bl	80043a4 <flame_get_data>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d117      	bne.n	8004b0a <Lcd_warning+0x1b6>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d113      	bne.n	8004b0a <Lcd_warning+0x1b6>
 8004ae2:	4942      	ldr	r1, [pc, #264]	@ (8004bec <Lcd_warning+0x298>)
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7fc f8d9 	bl	8000c9c <__aeabi_fcmplt>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <Lcd_warning+0x1b6>
			&& mq2_get_data() == 0) {
 8004af0:	f7ff fe60 	bl	80047b4 <mq2_get_data>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d107      	bne.n	8004b0a <Lcd_warning+0x1b6>
		Lcd_clear(&lcd);
 8004afa:	483d      	ldr	r0, [pc, #244]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004afc:	f7ff fcf4 	bl	80044e8 <Lcd_clear>
		Output_Off();
 8004b00:	f7ff fe8a 	bl	8004818 <Output_Off>
		*status = 0;  // Đặt trạng thái lửa đã bị xóa
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	701a      	strb	r2, [r3, #0]
	}
	if ((Temp > 35 && mq2_get_data() == 1)
 8004b0a:	4938      	ldr	r1, [pc, #224]	@ (8004bec <Lcd_warning+0x298>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7fc f8e3 	bl	8000cd8 <__aeabi_fcmpgt>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <Lcd_warning+0x1ce>
 8004b18:	f7ff fe4c 	bl	80047b4 <mq2_get_data>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d015      	beq.n	8004b4e <Lcd_warning+0x1fa>
			|| (Temp > 35 && flame_get_data() == 1)
 8004b22:	4932      	ldr	r1, [pc, #200]	@ (8004bec <Lcd_warning+0x298>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7fc f8d7 	bl	8000cd8 <__aeabi_fcmpgt>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <Lcd_warning+0x1e6>
 8004b30:	f7ff fc38 	bl	80043a4 <flame_get_data>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d009      	beq.n	8004b4e <Lcd_warning+0x1fa>
			|| (mq2_get_data() == 1 && flame_get_data() == 1)) {
 8004b3a:	f7ff fe3b 	bl	80047b4 <mq2_get_data>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d11d      	bne.n	8004b80 <Lcd_warning+0x22c>
 8004b44:	f7ff fc2e 	bl	80043a4 <flame_get_data>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d118      	bne.n	8004b80 <Lcd_warning+0x22c>
		if (*status_1 == 0) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d146      	bne.n	8004be4 <Lcd_warning+0x290>
		Lcd_clear(&lcd);
 8004b56:	4826      	ldr	r0, [pc, #152]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004b58:	f7ff fcc6 	bl	80044e8 <Lcd_clear>
		Lcd_cursor(&lcd, 0, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4823      	ldr	r0, [pc, #140]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004b62:	f7ff fca7 	bl	80044b4 <Lcd_cursor>
		Lcd_string(&lcd, "FIRE WARNING !!!");
 8004b66:	4927      	ldr	r1, [pc, #156]	@ (8004c04 <Lcd_warning+0x2b0>)
 8004b68:	4821      	ldr	r0, [pc, #132]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004b6a:	f7ff fc83 	bl	8004474 <Lcd_string>
			Output_On();
 8004b6e:	f7ff fe35 	bl	80047dc <Output_On>
			SIM_MakeCall(&huart1);
 8004b72:	4821      	ldr	r0, [pc, #132]	@ (8004bf8 <Lcd_warning+0x2a4>)
 8004b74:	f7ff fdb2 	bl	80046dc <SIM_MakeCall>
			*status_1 = 1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
		if (*status_1 == 0) {
 8004b7e:	e031      	b.n	8004be4 <Lcd_warning+0x290>
		}
	} else if ((Temp < 35 && mq2_get_data() == 0)
 8004b80:	491a      	ldr	r1, [pc, #104]	@ (8004bec <Lcd_warning+0x298>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7fc f88a 	bl	8000c9c <__aeabi_fcmplt>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <Lcd_warning+0x244>
 8004b8e:	f7ff fe11 	bl	80047b4 <mq2_get_data>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <Lcd_warning+0x270>
			|| (Temp < 35 && flame_get_data() == 0)
 8004b98:	4914      	ldr	r1, [pc, #80]	@ (8004bec <Lcd_warning+0x298>)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7fc f87e 	bl	8000c9c <__aeabi_fcmplt>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <Lcd_warning+0x25c>
 8004ba6:	f7ff fbfd 	bl	80043a4 <flame_get_data>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <Lcd_warning+0x270>
			|| (mq2_get_data() == 0 && flame_get_data() == 0)) {
 8004bb0:	f7ff fe00 	bl	80047b4 <mq2_get_data>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d114      	bne.n	8004be4 <Lcd_warning+0x290>
 8004bba:	f7ff fbf3 	bl	80043a4 <flame_get_data>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <Lcd_warning+0x290>
		if (*status_1 == 1) {
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10b      	bne.n	8004be4 <Lcd_warning+0x290>
		Lcd_clear(&lcd);
 8004bcc:	4808      	ldr	r0, [pc, #32]	@ (8004bf0 <Lcd_warning+0x29c>)
 8004bce:	f7ff fc8b 	bl	80044e8 <Lcd_clear>
		*status = 0;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
		*status_1 = 0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
			Output_Off();
 8004bde:	f7ff fe1b 	bl	8004818 <Output_Off>
		}
	}
}
 8004be2:	e7ff      	b.n	8004be4 <Lcd_warning+0x290>
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	420c0000 	.word	0x420c0000
 8004bf0:	200003f4 	.word	0x200003f4
 8004bf4:	08007960 	.word	0x08007960
 8004bf8:	20000280 	.word	0x20000280
 8004bfc:	08007970 	.word	0x08007970
 8004c00:	08007980 	.word	0x08007980
 8004c04:	08007990 	.word	0x08007990

08004c08 <__cvt>:
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0e:	461d      	mov	r5, r3
 8004c10:	bfbb      	ittet	lt
 8004c12:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004c16:	461d      	movlt	r5, r3
 8004c18:	2300      	movge	r3, #0
 8004c1a:	232d      	movlt	r3, #45	@ 0x2d
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	4614      	mov	r4, r2
 8004c20:	bfb8      	it	lt
 8004c22:	4614      	movlt	r4, r2
 8004c24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004c26:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004c28:	7013      	strb	r3, [r2, #0]
 8004c2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004c30:	f023 0820 	bic.w	r8, r3, #32
 8004c34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c38:	d005      	beq.n	8004c46 <__cvt+0x3e>
 8004c3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c3e:	d100      	bne.n	8004c42 <__cvt+0x3a>
 8004c40:	3601      	adds	r6, #1
 8004c42:	2302      	movs	r3, #2
 8004c44:	e000      	b.n	8004c48 <__cvt+0x40>
 8004c46:	2303      	movs	r3, #3
 8004c48:	aa07      	add	r2, sp, #28
 8004c4a:	9204      	str	r2, [sp, #16]
 8004c4c:	aa06      	add	r2, sp, #24
 8004c4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c52:	e9cd 3600 	strd	r3, r6, [sp]
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	f000 fe85 	bl	8005968 <_dtoa_r>
 8004c5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c62:	4607      	mov	r7, r0
 8004c64:	d119      	bne.n	8004c9a <__cvt+0x92>
 8004c66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004c68:	07db      	lsls	r3, r3, #31
 8004c6a:	d50e      	bpl.n	8004c8a <__cvt+0x82>
 8004c6c:	eb00 0906 	add.w	r9, r0, r6
 8004c70:	2200      	movs	r2, #0
 8004c72:	2300      	movs	r3, #0
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb ff02 	bl	8000a80 <__aeabi_dcmpeq>
 8004c7c:	b108      	cbz	r0, 8004c82 <__cvt+0x7a>
 8004c7e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c82:	2230      	movs	r2, #48	@ 0x30
 8004c84:	9b07      	ldr	r3, [sp, #28]
 8004c86:	454b      	cmp	r3, r9
 8004c88:	d31e      	bcc.n	8004cc8 <__cvt+0xc0>
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	9b07      	ldr	r3, [sp, #28]
 8004c8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004c90:	1bdb      	subs	r3, r3, r7
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	b008      	add	sp, #32
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c9e:	eb00 0906 	add.w	r9, r0, r6
 8004ca2:	d1e5      	bne.n	8004c70 <__cvt+0x68>
 8004ca4:	7803      	ldrb	r3, [r0, #0]
 8004ca6:	2b30      	cmp	r3, #48	@ 0x30
 8004ca8:	d10a      	bne.n	8004cc0 <__cvt+0xb8>
 8004caa:	2200      	movs	r2, #0
 8004cac:	2300      	movs	r3, #0
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7fb fee5 	bl	8000a80 <__aeabi_dcmpeq>
 8004cb6:	b918      	cbnz	r0, 8004cc0 <__cvt+0xb8>
 8004cb8:	f1c6 0601 	rsb	r6, r6, #1
 8004cbc:	f8ca 6000 	str.w	r6, [sl]
 8004cc0:	f8da 3000 	ldr.w	r3, [sl]
 8004cc4:	4499      	add	r9, r3
 8004cc6:	e7d3      	b.n	8004c70 <__cvt+0x68>
 8004cc8:	1c59      	adds	r1, r3, #1
 8004cca:	9107      	str	r1, [sp, #28]
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e7d9      	b.n	8004c84 <__cvt+0x7c>

08004cd0 <__exponent>:
 8004cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	bfb6      	itet	lt
 8004cd6:	232d      	movlt	r3, #45	@ 0x2d
 8004cd8:	232b      	movge	r3, #43	@ 0x2b
 8004cda:	4249      	neglt	r1, r1
 8004cdc:	2909      	cmp	r1, #9
 8004cde:	7002      	strb	r2, [r0, #0]
 8004ce0:	7043      	strb	r3, [r0, #1]
 8004ce2:	dd29      	ble.n	8004d38 <__exponent+0x68>
 8004ce4:	f10d 0307 	add.w	r3, sp, #7
 8004ce8:	461d      	mov	r5, r3
 8004cea:	270a      	movs	r7, #10
 8004cec:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	fb07 1416 	mls	r4, r7, r6, r1
 8004cf6:	3430      	adds	r4, #48	@ 0x30
 8004cf8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	2c63      	cmp	r4, #99	@ 0x63
 8004d00:	4631      	mov	r1, r6
 8004d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d06:	dcf1      	bgt.n	8004cec <__exponent+0x1c>
 8004d08:	3130      	adds	r1, #48	@ 0x30
 8004d0a:	1e94      	subs	r4, r2, #2
 8004d0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d10:	4623      	mov	r3, r4
 8004d12:	1c41      	adds	r1, r0, #1
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	d30a      	bcc.n	8004d2e <__exponent+0x5e>
 8004d18:	f10d 0309 	add.w	r3, sp, #9
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	42ac      	cmp	r4, r5
 8004d20:	bf88      	it	hi
 8004d22:	2300      	movhi	r3, #0
 8004d24:	3302      	adds	r3, #2
 8004d26:	4403      	add	r3, r0
 8004d28:	1a18      	subs	r0, r3, r0
 8004d2a:	b003      	add	sp, #12
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d36:	e7ed      	b.n	8004d14 <__exponent+0x44>
 8004d38:	2330      	movs	r3, #48	@ 0x30
 8004d3a:	3130      	adds	r1, #48	@ 0x30
 8004d3c:	7083      	strb	r3, [r0, #2]
 8004d3e:	70c1      	strb	r1, [r0, #3]
 8004d40:	1d03      	adds	r3, r0, #4
 8004d42:	e7f1      	b.n	8004d28 <__exponent+0x58>

08004d44 <_printf_float>:
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	b091      	sub	sp, #68	@ 0x44
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004d50:	4616      	mov	r6, r2
 8004d52:	461f      	mov	r7, r3
 8004d54:	4605      	mov	r5, r0
 8004d56:	f000 fcf7 	bl	8005748 <_localeconv_r>
 8004d5a:	6803      	ldr	r3, [r0, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	9308      	str	r3, [sp, #32]
 8004d60:	f7fb fa62 	bl	8000228 <strlen>
 8004d64:	2300      	movs	r3, #0
 8004d66:	930e      	str	r3, [sp, #56]	@ 0x38
 8004d68:	f8d8 3000 	ldr.w	r3, [r8]
 8004d6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004d6e:	3307      	adds	r3, #7
 8004d70:	f023 0307 	bic.w	r3, r3, #7
 8004d74:	f103 0208 	add.w	r2, r3, #8
 8004d78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8004d80:	f8c8 2000 	str.w	r2, [r8]
 8004d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d8e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005010 <_printf_float+0x2cc>)
 8004da0:	f7fb fea0 	bl	8000ae4 <__aeabi_dcmpun>
 8004da4:	bb70      	cbnz	r0, 8004e04 <_printf_float+0xc0>
 8004da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dae:	4b98      	ldr	r3, [pc, #608]	@ (8005010 <_printf_float+0x2cc>)
 8004db0:	f7fb fe7a 	bl	8000aa8 <__aeabi_dcmple>
 8004db4:	bb30      	cbnz	r0, 8004e04 <_printf_float+0xc0>
 8004db6:	2200      	movs	r2, #0
 8004db8:	2300      	movs	r3, #0
 8004dba:	4640      	mov	r0, r8
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	f7fb fe69 	bl	8000a94 <__aeabi_dcmplt>
 8004dc2:	b110      	cbz	r0, 8004dca <_printf_float+0x86>
 8004dc4:	232d      	movs	r3, #45	@ 0x2d
 8004dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dca:	4a92      	ldr	r2, [pc, #584]	@ (8005014 <_printf_float+0x2d0>)
 8004dcc:	4b92      	ldr	r3, [pc, #584]	@ (8005018 <_printf_float+0x2d4>)
 8004dce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dd2:	bf94      	ite	ls
 8004dd4:	4690      	movls	r8, r2
 8004dd6:	4698      	movhi	r8, r3
 8004dd8:	2303      	movs	r3, #3
 8004dda:	f04f 0900 	mov.w	r9, #0
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	f02b 0304 	bic.w	r3, fp, #4
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	4633      	mov	r3, r6
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	9700      	str	r7, [sp, #0]
 8004dee:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004df0:	f000 f9d4 	bl	800519c <_printf_common>
 8004df4:	3001      	adds	r0, #1
 8004df6:	f040 8090 	bne.w	8004f1a <_printf_float+0x1d6>
 8004dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfe:	b011      	add	sp, #68	@ 0x44
 8004e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f7fb fe6a 	bl	8000ae4 <__aeabi_dcmpun>
 8004e10:	b148      	cbz	r0, 8004e26 <_printf_float+0xe2>
 8004e12:	464b      	mov	r3, r9
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bfb8      	it	lt
 8004e18:	232d      	movlt	r3, #45	@ 0x2d
 8004e1a:	4a80      	ldr	r2, [pc, #512]	@ (800501c <_printf_float+0x2d8>)
 8004e1c:	bfb8      	it	lt
 8004e1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e22:	4b7f      	ldr	r3, [pc, #508]	@ (8005020 <_printf_float+0x2dc>)
 8004e24:	e7d3      	b.n	8004dce <_printf_float+0x8a>
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	d13f      	bne.n	8004eb0 <_printf_float+0x16c>
 8004e30:	2306      	movs	r3, #6
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	9206      	str	r2, [sp, #24]
 8004e3e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004e40:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004e44:	aa0d      	add	r2, sp, #52	@ 0x34
 8004e46:	9203      	str	r2, [sp, #12]
 8004e48:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004e4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	4642      	mov	r2, r8
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	4628      	mov	r0, r5
 8004e58:	464b      	mov	r3, r9
 8004e5a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004e5c:	f7ff fed4 	bl	8004c08 <__cvt>
 8004e60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e62:	4680      	mov	r8, r0
 8004e64:	2947      	cmp	r1, #71	@ 0x47
 8004e66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004e68:	d128      	bne.n	8004ebc <_printf_float+0x178>
 8004e6a:	1cc8      	adds	r0, r1, #3
 8004e6c:	db02      	blt.n	8004e74 <_printf_float+0x130>
 8004e6e:	6863      	ldr	r3, [r4, #4]
 8004e70:	4299      	cmp	r1, r3
 8004e72:	dd40      	ble.n	8004ef6 <_printf_float+0x1b2>
 8004e74:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e78:	fa5f fa8a 	uxtb.w	sl, sl
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	3901      	subs	r1, #1
 8004e80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e84:	910d      	str	r1, [sp, #52]	@ 0x34
 8004e86:	f7ff ff23 	bl	8004cd0 <__exponent>
 8004e8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e8c:	4681      	mov	r9, r0
 8004e8e:	1813      	adds	r3, r2, r0
 8004e90:	2a01      	cmp	r2, #1
 8004e92:	6123      	str	r3, [r4, #16]
 8004e94:	dc02      	bgt.n	8004e9c <_printf_float+0x158>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	07d2      	lsls	r2, r2, #31
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_float+0x15c>
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d09e      	beq.n	8004de6 <_printf_float+0xa2>
 8004ea8:	232d      	movs	r3, #45	@ 0x2d
 8004eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eae:	e79a      	b.n	8004de6 <_printf_float+0xa2>
 8004eb0:	2947      	cmp	r1, #71	@ 0x47
 8004eb2:	d1bf      	bne.n	8004e34 <_printf_float+0xf0>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1bd      	bne.n	8004e34 <_printf_float+0xf0>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e7ba      	b.n	8004e32 <_printf_float+0xee>
 8004ebc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ec0:	d9dc      	bls.n	8004e7c <_printf_float+0x138>
 8004ec2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ec6:	d118      	bne.n	8004efa <_printf_float+0x1b6>
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	dd0b      	ble.n	8004ee6 <_printf_float+0x1a2>
 8004ece:	6121      	str	r1, [r4, #16]
 8004ed0:	b913      	cbnz	r3, 8004ed8 <_printf_float+0x194>
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	07d0      	lsls	r0, r2, #31
 8004ed6:	d502      	bpl.n	8004ede <_printf_float+0x19a>
 8004ed8:	3301      	adds	r3, #1
 8004eda:	440b      	add	r3, r1
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	f04f 0900 	mov.w	r9, #0
 8004ee2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ee4:	e7dc      	b.n	8004ea0 <_printf_float+0x15c>
 8004ee6:	b913      	cbnz	r3, 8004eee <_printf_float+0x1aa>
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	07d2      	lsls	r2, r2, #31
 8004eec:	d501      	bpl.n	8004ef2 <_printf_float+0x1ae>
 8004eee:	3302      	adds	r3, #2
 8004ef0:	e7f4      	b.n	8004edc <_printf_float+0x198>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e7f2      	b.n	8004edc <_printf_float+0x198>
 8004ef6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004efc:	4299      	cmp	r1, r3
 8004efe:	db05      	blt.n	8004f0c <_printf_float+0x1c8>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	6121      	str	r1, [r4, #16]
 8004f04:	07d8      	lsls	r0, r3, #31
 8004f06:	d5ea      	bpl.n	8004ede <_printf_float+0x19a>
 8004f08:	1c4b      	adds	r3, r1, #1
 8004f0a:	e7e7      	b.n	8004edc <_printf_float+0x198>
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	bfcc      	ite	gt
 8004f10:	2201      	movgt	r2, #1
 8004f12:	f1c1 0202 	rsble	r2, r1, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	e7e0      	b.n	8004edc <_printf_float+0x198>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	055a      	lsls	r2, r3, #21
 8004f1e:	d407      	bmi.n	8004f30 <_printf_float+0x1ec>
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	4642      	mov	r2, r8
 8004f24:	4631      	mov	r1, r6
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b8      	blx	r7
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d12b      	bne.n	8004f86 <_printf_float+0x242>
 8004f2e:	e764      	b.n	8004dfa <_printf_float+0xb6>
 8004f30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f34:	f240 80dc 	bls.w	80050f0 <_printf_float+0x3ac>
 8004f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f7fb fd9e 	bl	8000a80 <__aeabi_dcmpeq>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d033      	beq.n	8004fb0 <_printf_float+0x26c>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <_printf_float+0x2e0>)
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af51 	beq.w	8004dfa <_printf_float+0xb6>
 8004f58:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004f5c:	4543      	cmp	r3, r8
 8004f5e:	db02      	blt.n	8004f66 <_printf_float+0x222>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	07d8      	lsls	r0, r3, #31
 8004f64:	d50f      	bpl.n	8004f86 <_printf_float+0x242>
 8004f66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	f43f af42 	beq.w	8004dfa <_printf_float+0xb6>
 8004f76:	f04f 0900 	mov.w	r9, #0
 8004f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f7e:	f104 0a1a 	add.w	sl, r4, #26
 8004f82:	45c8      	cmp	r8, r9
 8004f84:	dc09      	bgt.n	8004f9a <_printf_float+0x256>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	079b      	lsls	r3, r3, #30
 8004f8a:	f100 8102 	bmi.w	8005192 <_printf_float+0x44e>
 8004f8e:	68e0      	ldr	r0, [r4, #12]
 8004f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f92:	4298      	cmp	r0, r3
 8004f94:	bfb8      	it	lt
 8004f96:	4618      	movlt	r0, r3
 8004f98:	e731      	b.n	8004dfe <_printf_float+0xba>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f43f af28 	beq.w	8004dfa <_printf_float+0xb6>
 8004faa:	f109 0901 	add.w	r9, r9, #1
 8004fae:	e7e8      	b.n	8004f82 <_printf_float+0x23e>
 8004fb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	dc38      	bgt.n	8005028 <_printf_float+0x2e4>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	4a19      	ldr	r2, [pc, #100]	@ (8005024 <_printf_float+0x2e0>)
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f af1a 	beq.w	8004dfa <_printf_float+0xb6>
 8004fc6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004fca:	ea59 0303 	orrs.w	r3, r9, r3
 8004fce:	d102      	bne.n	8004fd6 <_printf_float+0x292>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	07d9      	lsls	r1, r3, #31
 8004fd4:	d5d7      	bpl.n	8004f86 <_printf_float+0x242>
 8004fd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f af0a 	beq.w	8004dfa <_printf_float+0xb6>
 8004fe6:	f04f 0a00 	mov.w	sl, #0
 8004fea:	f104 0b1a 	add.w	fp, r4, #26
 8004fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ff0:	425b      	negs	r3, r3
 8004ff2:	4553      	cmp	r3, sl
 8004ff4:	dc01      	bgt.n	8004ffa <_printf_float+0x2b6>
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	e793      	b.n	8004f22 <_printf_float+0x1de>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	465a      	mov	r2, fp
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	f43f aef8 	beq.w	8004dfa <_printf_float+0xb6>
 800500a:	f10a 0a01 	add.w	sl, sl, #1
 800500e:	e7ee      	b.n	8004fee <_printf_float+0x2aa>
 8005010:	7fefffff 	.word	0x7fefffff
 8005014:	080079d4 	.word	0x080079d4
 8005018:	080079d8 	.word	0x080079d8
 800501c:	080079dc 	.word	0x080079dc
 8005020:	080079e0 	.word	0x080079e0
 8005024:	080079e4 	.word	0x080079e4
 8005028:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800502a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800502e:	4553      	cmp	r3, sl
 8005030:	bfa8      	it	ge
 8005032:	4653      	movge	r3, sl
 8005034:	2b00      	cmp	r3, #0
 8005036:	4699      	mov	r9, r3
 8005038:	dc36      	bgt.n	80050a8 <_printf_float+0x364>
 800503a:	f04f 0b00 	mov.w	fp, #0
 800503e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005042:	f104 021a 	add.w	r2, r4, #26
 8005046:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005048:	930a      	str	r3, [sp, #40]	@ 0x28
 800504a:	eba3 0309 	sub.w	r3, r3, r9
 800504e:	455b      	cmp	r3, fp
 8005050:	dc31      	bgt.n	80050b6 <_printf_float+0x372>
 8005052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005054:	459a      	cmp	sl, r3
 8005056:	dc3a      	bgt.n	80050ce <_printf_float+0x38a>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	07da      	lsls	r2, r3, #31
 800505c:	d437      	bmi.n	80050ce <_printf_float+0x38a>
 800505e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005060:	ebaa 0903 	sub.w	r9, sl, r3
 8005064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005066:	ebaa 0303 	sub.w	r3, sl, r3
 800506a:	4599      	cmp	r9, r3
 800506c:	bfa8      	it	ge
 800506e:	4699      	movge	r9, r3
 8005070:	f1b9 0f00 	cmp.w	r9, #0
 8005074:	dc33      	bgt.n	80050de <_printf_float+0x39a>
 8005076:	f04f 0800 	mov.w	r8, #0
 800507a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800507e:	f104 0b1a 	add.w	fp, r4, #26
 8005082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005084:	ebaa 0303 	sub.w	r3, sl, r3
 8005088:	eba3 0309 	sub.w	r3, r3, r9
 800508c:	4543      	cmp	r3, r8
 800508e:	f77f af7a 	ble.w	8004f86 <_printf_float+0x242>
 8005092:	2301      	movs	r3, #1
 8005094:	465a      	mov	r2, fp
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	f43f aeac 	beq.w	8004dfa <_printf_float+0xb6>
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	e7ec      	b.n	8005082 <_printf_float+0x33e>
 80050a8:	4642      	mov	r2, r8
 80050aa:	4631      	mov	r1, r6
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1c2      	bne.n	800503a <_printf_float+0x2f6>
 80050b4:	e6a1      	b.n	8004dfa <_printf_float+0xb6>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	f43f ae9a 	beq.w	8004dfa <_printf_float+0xb6>
 80050c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050c8:	f10b 0b01 	add.w	fp, fp, #1
 80050cc:	e7bb      	b.n	8005046 <_printf_float+0x302>
 80050ce:	4631      	mov	r1, r6
 80050d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	d1c0      	bne.n	800505e <_printf_float+0x31a>
 80050dc:	e68d      	b.n	8004dfa <_printf_float+0xb6>
 80050de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050e0:	464b      	mov	r3, r9
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	4442      	add	r2, r8
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	d1c3      	bne.n	8005076 <_printf_float+0x332>
 80050ee:	e684      	b.n	8004dfa <_printf_float+0xb6>
 80050f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80050f4:	f1ba 0f01 	cmp.w	sl, #1
 80050f8:	dc01      	bgt.n	80050fe <_printf_float+0x3ba>
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d536      	bpl.n	800516c <_printf_float+0x428>
 80050fe:	2301      	movs	r3, #1
 8005100:	4642      	mov	r2, r8
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f ae76 	beq.w	8004dfa <_printf_float+0xb6>
 800510e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae6e 	beq.w	8004dfa <_printf_float+0xb6>
 800511e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005122:	2200      	movs	r2, #0
 8005124:	2300      	movs	r3, #0
 8005126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800512a:	f7fb fca9 	bl	8000a80 <__aeabi_dcmpeq>
 800512e:	b9c0      	cbnz	r0, 8005162 <_printf_float+0x41e>
 8005130:	4653      	mov	r3, sl
 8005132:	f108 0201 	add.w	r2, r8, #1
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	d10c      	bne.n	800515a <_printf_float+0x416>
 8005140:	e65b      	b.n	8004dfa <_printf_float+0xb6>
 8005142:	2301      	movs	r3, #1
 8005144:	465a      	mov	r2, fp
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	f43f ae54 	beq.w	8004dfa <_printf_float+0xb6>
 8005152:	f108 0801 	add.w	r8, r8, #1
 8005156:	45d0      	cmp	r8, sl
 8005158:	dbf3      	blt.n	8005142 <_printf_float+0x3fe>
 800515a:	464b      	mov	r3, r9
 800515c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005160:	e6e0      	b.n	8004f24 <_printf_float+0x1e0>
 8005162:	f04f 0800 	mov.w	r8, #0
 8005166:	f104 0b1a 	add.w	fp, r4, #26
 800516a:	e7f4      	b.n	8005156 <_printf_float+0x412>
 800516c:	2301      	movs	r3, #1
 800516e:	4642      	mov	r2, r8
 8005170:	e7e1      	b.n	8005136 <_printf_float+0x3f2>
 8005172:	2301      	movs	r3, #1
 8005174:	464a      	mov	r2, r9
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f43f ae3c 	beq.w	8004dfa <_printf_float+0xb6>
 8005182:	f108 0801 	add.w	r8, r8, #1
 8005186:	68e3      	ldr	r3, [r4, #12]
 8005188:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800518a:	1a5b      	subs	r3, r3, r1
 800518c:	4543      	cmp	r3, r8
 800518e:	dcf0      	bgt.n	8005172 <_printf_float+0x42e>
 8005190:	e6fd      	b.n	8004f8e <_printf_float+0x24a>
 8005192:	f04f 0800 	mov.w	r8, #0
 8005196:	f104 0919 	add.w	r9, r4, #25
 800519a:	e7f4      	b.n	8005186 <_printf_float+0x442>

0800519c <_printf_common>:
 800519c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a0:	4616      	mov	r6, r2
 80051a2:	4698      	mov	r8, r3
 80051a4:	688a      	ldr	r2, [r1, #8]
 80051a6:	690b      	ldr	r3, [r1, #16]
 80051a8:	4607      	mov	r7, r0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfb8      	it	lt
 80051ae:	4613      	movlt	r3, r2
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051b6:	460c      	mov	r4, r1
 80051b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051bc:	b10a      	cbz	r2, 80051c2 <_printf_common+0x26>
 80051be:	3301      	adds	r3, #1
 80051c0:	6033      	str	r3, [r6, #0]
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	0699      	lsls	r1, r3, #26
 80051c6:	bf42      	ittt	mi
 80051c8:	6833      	ldrmi	r3, [r6, #0]
 80051ca:	3302      	addmi	r3, #2
 80051cc:	6033      	strmi	r3, [r6, #0]
 80051ce:	6825      	ldr	r5, [r4, #0]
 80051d0:	f015 0506 	ands.w	r5, r5, #6
 80051d4:	d106      	bne.n	80051e4 <_printf_common+0x48>
 80051d6:	f104 0a19 	add.w	sl, r4, #25
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	6832      	ldr	r2, [r6, #0]
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dc2b      	bgt.n	800523c <_printf_common+0xa0>
 80051e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	3b00      	subs	r3, #0
 80051ec:	bf18      	it	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	0692      	lsls	r2, r2, #26
 80051f2:	d430      	bmi.n	8005256 <_printf_common+0xba>
 80051f4:	4641      	mov	r1, r8
 80051f6:	4638      	mov	r0, r7
 80051f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051fc:	47c8      	blx	r9
 80051fe:	3001      	adds	r0, #1
 8005200:	d023      	beq.n	800524a <_printf_common+0xae>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	2b04      	cmp	r3, #4
 800520c:	bf14      	ite	ne
 800520e:	2500      	movne	r5, #0
 8005210:	6833      	ldreq	r3, [r6, #0]
 8005212:	f04f 0600 	mov.w	r6, #0
 8005216:	bf08      	it	eq
 8005218:	68e5      	ldreq	r5, [r4, #12]
 800521a:	f104 041a 	add.w	r4, r4, #26
 800521e:	bf08      	it	eq
 8005220:	1aed      	subeq	r5, r5, r3
 8005222:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005226:	bf08      	it	eq
 8005228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800522c:	4293      	cmp	r3, r2
 800522e:	bfc4      	itt	gt
 8005230:	1a9b      	subgt	r3, r3, r2
 8005232:	18ed      	addgt	r5, r5, r3
 8005234:	42b5      	cmp	r5, r6
 8005236:	d11a      	bne.n	800526e <_printf_common+0xd2>
 8005238:	2000      	movs	r0, #0
 800523a:	e008      	b.n	800524e <_printf_common+0xb2>
 800523c:	2301      	movs	r3, #1
 800523e:	4652      	mov	r2, sl
 8005240:	4641      	mov	r1, r8
 8005242:	4638      	mov	r0, r7
 8005244:	47c8      	blx	r9
 8005246:	3001      	adds	r0, #1
 8005248:	d103      	bne.n	8005252 <_printf_common+0xb6>
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	3501      	adds	r5, #1
 8005254:	e7c1      	b.n	80051da <_printf_common+0x3e>
 8005256:	2030      	movs	r0, #48	@ 0x30
 8005258:	18e1      	adds	r1, r4, r3
 800525a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005264:	4422      	add	r2, r4
 8005266:	3302      	adds	r3, #2
 8005268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800526c:	e7c2      	b.n	80051f4 <_printf_common+0x58>
 800526e:	2301      	movs	r3, #1
 8005270:	4622      	mov	r2, r4
 8005272:	4641      	mov	r1, r8
 8005274:	4638      	mov	r0, r7
 8005276:	47c8      	blx	r9
 8005278:	3001      	adds	r0, #1
 800527a:	d0e6      	beq.n	800524a <_printf_common+0xae>
 800527c:	3601      	adds	r6, #1
 800527e:	e7d9      	b.n	8005234 <_printf_common+0x98>

08005280 <_printf_i>:
 8005280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	7e0f      	ldrb	r7, [r1, #24]
 8005286:	4691      	mov	r9, r2
 8005288:	2f78      	cmp	r7, #120	@ 0x78
 800528a:	4680      	mov	r8, r0
 800528c:	460c      	mov	r4, r1
 800528e:	469a      	mov	sl, r3
 8005290:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005296:	d807      	bhi.n	80052a8 <_printf_i+0x28>
 8005298:	2f62      	cmp	r7, #98	@ 0x62
 800529a:	d80a      	bhi.n	80052b2 <_printf_i+0x32>
 800529c:	2f00      	cmp	r7, #0
 800529e:	f000 80d3 	beq.w	8005448 <_printf_i+0x1c8>
 80052a2:	2f58      	cmp	r7, #88	@ 0x58
 80052a4:	f000 80ba 	beq.w	800541c <_printf_i+0x19c>
 80052a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052b0:	e03a      	b.n	8005328 <_printf_i+0xa8>
 80052b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052b6:	2b15      	cmp	r3, #21
 80052b8:	d8f6      	bhi.n	80052a8 <_printf_i+0x28>
 80052ba:	a101      	add	r1, pc, #4	@ (adr r1, 80052c0 <_printf_i+0x40>)
 80052bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052c0:	08005319 	.word	0x08005319
 80052c4:	0800532d 	.word	0x0800532d
 80052c8:	080052a9 	.word	0x080052a9
 80052cc:	080052a9 	.word	0x080052a9
 80052d0:	080052a9 	.word	0x080052a9
 80052d4:	080052a9 	.word	0x080052a9
 80052d8:	0800532d 	.word	0x0800532d
 80052dc:	080052a9 	.word	0x080052a9
 80052e0:	080052a9 	.word	0x080052a9
 80052e4:	080052a9 	.word	0x080052a9
 80052e8:	080052a9 	.word	0x080052a9
 80052ec:	0800542f 	.word	0x0800542f
 80052f0:	08005357 	.word	0x08005357
 80052f4:	080053e9 	.word	0x080053e9
 80052f8:	080052a9 	.word	0x080052a9
 80052fc:	080052a9 	.word	0x080052a9
 8005300:	08005451 	.word	0x08005451
 8005304:	080052a9 	.word	0x080052a9
 8005308:	08005357 	.word	0x08005357
 800530c:	080052a9 	.word	0x080052a9
 8005310:	080052a9 	.word	0x080052a9
 8005314:	080053f1 	.word	0x080053f1
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6032      	str	r2, [r6, #0]
 8005320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005328:	2301      	movs	r3, #1
 800532a:	e09e      	b.n	800546a <_printf_i+0x1ea>
 800532c:	6833      	ldr	r3, [r6, #0]
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	6031      	str	r1, [r6, #0]
 8005334:	0606      	lsls	r6, r0, #24
 8005336:	d501      	bpl.n	800533c <_printf_i+0xbc>
 8005338:	681d      	ldr	r5, [r3, #0]
 800533a:	e003      	b.n	8005344 <_printf_i+0xc4>
 800533c:	0645      	lsls	r5, r0, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0xb8>
 8005340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005344:	2d00      	cmp	r5, #0
 8005346:	da03      	bge.n	8005350 <_printf_i+0xd0>
 8005348:	232d      	movs	r3, #45	@ 0x2d
 800534a:	426d      	negs	r5, r5
 800534c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005350:	230a      	movs	r3, #10
 8005352:	4859      	ldr	r0, [pc, #356]	@ (80054b8 <_printf_i+0x238>)
 8005354:	e011      	b.n	800537a <_printf_i+0xfa>
 8005356:	6821      	ldr	r1, [r4, #0]
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	0608      	lsls	r0, r1, #24
 800535c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005360:	d402      	bmi.n	8005368 <_printf_i+0xe8>
 8005362:	0649      	lsls	r1, r1, #25
 8005364:	bf48      	it	mi
 8005366:	b2ad      	uxthmi	r5, r5
 8005368:	2f6f      	cmp	r7, #111	@ 0x6f
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	bf14      	ite	ne
 800536e:	230a      	movne	r3, #10
 8005370:	2308      	moveq	r3, #8
 8005372:	4851      	ldr	r0, [pc, #324]	@ (80054b8 <_printf_i+0x238>)
 8005374:	2100      	movs	r1, #0
 8005376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800537a:	6866      	ldr	r6, [r4, #4]
 800537c:	2e00      	cmp	r6, #0
 800537e:	bfa8      	it	ge
 8005380:	6821      	ldrge	r1, [r4, #0]
 8005382:	60a6      	str	r6, [r4, #8]
 8005384:	bfa4      	itt	ge
 8005386:	f021 0104 	bicge.w	r1, r1, #4
 800538a:	6021      	strge	r1, [r4, #0]
 800538c:	b90d      	cbnz	r5, 8005392 <_printf_i+0x112>
 800538e:	2e00      	cmp	r6, #0
 8005390:	d04b      	beq.n	800542a <_printf_i+0x1aa>
 8005392:	4616      	mov	r6, r2
 8005394:	fbb5 f1f3 	udiv	r1, r5, r3
 8005398:	fb03 5711 	mls	r7, r3, r1, r5
 800539c:	5dc7      	ldrb	r7, [r0, r7]
 800539e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053a2:	462f      	mov	r7, r5
 80053a4:	42bb      	cmp	r3, r7
 80053a6:	460d      	mov	r5, r1
 80053a8:	d9f4      	bls.n	8005394 <_printf_i+0x114>
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d10b      	bne.n	80053c6 <_printf_i+0x146>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	07df      	lsls	r7, r3, #31
 80053b2:	d508      	bpl.n	80053c6 <_printf_i+0x146>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6861      	ldr	r1, [r4, #4]
 80053b8:	4299      	cmp	r1, r3
 80053ba:	bfde      	ittt	le
 80053bc:	2330      	movle	r3, #48	@ 0x30
 80053be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053c6:	1b92      	subs	r2, r2, r6
 80053c8:	6122      	str	r2, [r4, #16]
 80053ca:	464b      	mov	r3, r9
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f8cd a000 	str.w	sl, [sp]
 80053d4:	aa03      	add	r2, sp, #12
 80053d6:	f7ff fee1 	bl	800519c <_printf_common>
 80053da:	3001      	adds	r0, #1
 80053dc:	d14a      	bne.n	8005474 <_printf_i+0x1f4>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	b004      	add	sp, #16
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	f043 0320 	orr.w	r3, r3, #32
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	2778      	movs	r7, #120	@ 0x78
 80053f2:	4832      	ldr	r0, [pc, #200]	@ (80054bc <_printf_i+0x23c>)
 80053f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	6831      	ldr	r1, [r6, #0]
 80053fc:	061f      	lsls	r7, r3, #24
 80053fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005402:	d402      	bmi.n	800540a <_printf_i+0x18a>
 8005404:	065f      	lsls	r7, r3, #25
 8005406:	bf48      	it	mi
 8005408:	b2ad      	uxthmi	r5, r5
 800540a:	6031      	str	r1, [r6, #0]
 800540c:	07d9      	lsls	r1, r3, #31
 800540e:	bf44      	itt	mi
 8005410:	f043 0320 	orrmi.w	r3, r3, #32
 8005414:	6023      	strmi	r3, [r4, #0]
 8005416:	b11d      	cbz	r5, 8005420 <_printf_i+0x1a0>
 8005418:	2310      	movs	r3, #16
 800541a:	e7ab      	b.n	8005374 <_printf_i+0xf4>
 800541c:	4826      	ldr	r0, [pc, #152]	@ (80054b8 <_printf_i+0x238>)
 800541e:	e7e9      	b.n	80053f4 <_printf_i+0x174>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	f023 0320 	bic.w	r3, r3, #32
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	e7f6      	b.n	8005418 <_printf_i+0x198>
 800542a:	4616      	mov	r6, r2
 800542c:	e7bd      	b.n	80053aa <_printf_i+0x12a>
 800542e:	6833      	ldr	r3, [r6, #0]
 8005430:	6825      	ldr	r5, [r4, #0]
 8005432:	1d18      	adds	r0, r3, #4
 8005434:	6961      	ldr	r1, [r4, #20]
 8005436:	6030      	str	r0, [r6, #0]
 8005438:	062e      	lsls	r6, r5, #24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	d501      	bpl.n	8005442 <_printf_i+0x1c2>
 800543e:	6019      	str	r1, [r3, #0]
 8005440:	e002      	b.n	8005448 <_printf_i+0x1c8>
 8005442:	0668      	lsls	r0, r5, #25
 8005444:	d5fb      	bpl.n	800543e <_printf_i+0x1be>
 8005446:	8019      	strh	r1, [r3, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	4616      	mov	r6, r2
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	e7bc      	b.n	80053ca <_printf_i+0x14a>
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	2100      	movs	r1, #0
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	6032      	str	r2, [r6, #0]
 8005458:	681e      	ldr	r6, [r3, #0]
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	4630      	mov	r0, r6
 800545e:	f000 f9ea 	bl	8005836 <memchr>
 8005462:	b108      	cbz	r0, 8005468 <_printf_i+0x1e8>
 8005464:	1b80      	subs	r0, r0, r6
 8005466:	6060      	str	r0, [r4, #4]
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	2300      	movs	r3, #0
 800546e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005472:	e7aa      	b.n	80053ca <_printf_i+0x14a>
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	47d0      	blx	sl
 800547e:	3001      	adds	r0, #1
 8005480:	d0ad      	beq.n	80053de <_printf_i+0x15e>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	079b      	lsls	r3, r3, #30
 8005486:	d413      	bmi.n	80054b0 <_printf_i+0x230>
 8005488:	68e0      	ldr	r0, [r4, #12]
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	4298      	cmp	r0, r3
 800548e:	bfb8      	it	lt
 8005490:	4618      	movlt	r0, r3
 8005492:	e7a6      	b.n	80053e2 <_printf_i+0x162>
 8005494:	2301      	movs	r3, #1
 8005496:	4632      	mov	r2, r6
 8005498:	4649      	mov	r1, r9
 800549a:	4640      	mov	r0, r8
 800549c:	47d0      	blx	sl
 800549e:	3001      	adds	r0, #1
 80054a0:	d09d      	beq.n	80053de <_printf_i+0x15e>
 80054a2:	3501      	adds	r5, #1
 80054a4:	68e3      	ldr	r3, [r4, #12]
 80054a6:	9903      	ldr	r1, [sp, #12]
 80054a8:	1a5b      	subs	r3, r3, r1
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	dcf2      	bgt.n	8005494 <_printf_i+0x214>
 80054ae:	e7eb      	b.n	8005488 <_printf_i+0x208>
 80054b0:	2500      	movs	r5, #0
 80054b2:	f104 0619 	add.w	r6, r4, #25
 80054b6:	e7f5      	b.n	80054a4 <_printf_i+0x224>
 80054b8:	080079e6 	.word	0x080079e6
 80054bc:	080079f7 	.word	0x080079f7

080054c0 <std>:
 80054c0:	2300      	movs	r3, #0
 80054c2:	b510      	push	{r4, lr}
 80054c4:	4604      	mov	r4, r0
 80054c6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ce:	6083      	str	r3, [r0, #8]
 80054d0:	8181      	strh	r1, [r0, #12]
 80054d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054d4:	81c2      	strh	r2, [r0, #14]
 80054d6:	6183      	str	r3, [r0, #24]
 80054d8:	4619      	mov	r1, r3
 80054da:	2208      	movs	r2, #8
 80054dc:	305c      	adds	r0, #92	@ 0x5c
 80054de:	f000 f914 	bl	800570a <memset>
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <std+0x58>)
 80054e4:	6224      	str	r4, [r4, #32]
 80054e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80054e8:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <std+0x5c>)
 80054ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <std+0x60>)
 80054ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005524 <std+0x64>)
 80054f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80054f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005528 <std+0x68>)
 80054f6:	429c      	cmp	r4, r3
 80054f8:	d006      	beq.n	8005508 <std+0x48>
 80054fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054fe:	4294      	cmp	r4, r2
 8005500:	d002      	beq.n	8005508 <std+0x48>
 8005502:	33d0      	adds	r3, #208	@ 0xd0
 8005504:	429c      	cmp	r4, r3
 8005506:	d105      	bne.n	8005514 <std+0x54>
 8005508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800550c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005510:	f000 b98e 	b.w	8005830 <__retarget_lock_init_recursive>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	bf00      	nop
 8005518:	08005685 	.word	0x08005685
 800551c:	080056a7 	.word	0x080056a7
 8005520:	080056df 	.word	0x080056df
 8005524:	08005703 	.word	0x08005703
 8005528:	2000040c 	.word	0x2000040c

0800552c <stdio_exit_handler>:
 800552c:	4a02      	ldr	r2, [pc, #8]	@ (8005538 <stdio_exit_handler+0xc>)
 800552e:	4903      	ldr	r1, [pc, #12]	@ (800553c <stdio_exit_handler+0x10>)
 8005530:	4803      	ldr	r0, [pc, #12]	@ (8005540 <stdio_exit_handler+0x14>)
 8005532:	f000 b869 	b.w	8005608 <_fwalk_sglue>
 8005536:	bf00      	nop
 8005538:	2000000c 	.word	0x2000000c
 800553c:	080071a5 	.word	0x080071a5
 8005540:	2000001c 	.word	0x2000001c

08005544 <cleanup_stdio>:
 8005544:	6841      	ldr	r1, [r0, #4]
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <cleanup_stdio+0x34>)
 8005548:	b510      	push	{r4, lr}
 800554a:	4299      	cmp	r1, r3
 800554c:	4604      	mov	r4, r0
 800554e:	d001      	beq.n	8005554 <cleanup_stdio+0x10>
 8005550:	f001 fe28 	bl	80071a4 <_fflush_r>
 8005554:	68a1      	ldr	r1, [r4, #8]
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <cleanup_stdio+0x38>)
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <cleanup_stdio+0x1e>
 800555c:	4620      	mov	r0, r4
 800555e:	f001 fe21 	bl	80071a4 <_fflush_r>
 8005562:	68e1      	ldr	r1, [r4, #12]
 8005564:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <cleanup_stdio+0x3c>)
 8005566:	4299      	cmp	r1, r3
 8005568:	d004      	beq.n	8005574 <cleanup_stdio+0x30>
 800556a:	4620      	mov	r0, r4
 800556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005570:	f001 be18 	b.w	80071a4 <_fflush_r>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	bf00      	nop
 8005578:	2000040c 	.word	0x2000040c
 800557c:	20000474 	.word	0x20000474
 8005580:	200004dc 	.word	0x200004dc

08005584 <global_stdio_init.part.0>:
 8005584:	b510      	push	{r4, lr}
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <global_stdio_init.part.0+0x30>)
 8005588:	4c0b      	ldr	r4, [pc, #44]	@ (80055b8 <global_stdio_init.part.0+0x34>)
 800558a:	4a0c      	ldr	r2, [pc, #48]	@ (80055bc <global_stdio_init.part.0+0x38>)
 800558c:	4620      	mov	r0, r4
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	2104      	movs	r1, #4
 8005592:	2200      	movs	r2, #0
 8005594:	f7ff ff94 	bl	80054c0 <std>
 8005598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800559c:	2201      	movs	r2, #1
 800559e:	2109      	movs	r1, #9
 80055a0:	f7ff ff8e 	bl	80054c0 <std>
 80055a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055a8:	2202      	movs	r2, #2
 80055aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ae:	2112      	movs	r1, #18
 80055b0:	f7ff bf86 	b.w	80054c0 <std>
 80055b4:	20000544 	.word	0x20000544
 80055b8:	2000040c 	.word	0x2000040c
 80055bc:	0800552d 	.word	0x0800552d

080055c0 <__sfp_lock_acquire>:
 80055c0:	4801      	ldr	r0, [pc, #4]	@ (80055c8 <__sfp_lock_acquire+0x8>)
 80055c2:	f000 b936 	b.w	8005832 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	2000054d 	.word	0x2000054d

080055cc <__sfp_lock_release>:
 80055cc:	4801      	ldr	r0, [pc, #4]	@ (80055d4 <__sfp_lock_release+0x8>)
 80055ce:	f000 b931 	b.w	8005834 <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	2000054d 	.word	0x2000054d

080055d8 <__sinit>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	f7ff fff0 	bl	80055c0 <__sfp_lock_acquire>
 80055e0:	6a23      	ldr	r3, [r4, #32]
 80055e2:	b11b      	cbz	r3, 80055ec <__sinit+0x14>
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e8:	f7ff bff0 	b.w	80055cc <__sfp_lock_release>
 80055ec:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <__sinit+0x28>)
 80055ee:	6223      	str	r3, [r4, #32]
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <__sinit+0x2c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f5      	bne.n	80055e4 <__sinit+0xc>
 80055f8:	f7ff ffc4 	bl	8005584 <global_stdio_init.part.0>
 80055fc:	e7f2      	b.n	80055e4 <__sinit+0xc>
 80055fe:	bf00      	nop
 8005600:	08005545 	.word	0x08005545
 8005604:	20000544 	.word	0x20000544

08005608 <_fwalk_sglue>:
 8005608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800560c:	4607      	mov	r7, r0
 800560e:	4688      	mov	r8, r1
 8005610:	4614      	mov	r4, r2
 8005612:	2600      	movs	r6, #0
 8005614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005618:	f1b9 0901 	subs.w	r9, r9, #1
 800561c:	d505      	bpl.n	800562a <_fwalk_sglue+0x22>
 800561e:	6824      	ldr	r4, [r4, #0]
 8005620:	2c00      	cmp	r4, #0
 8005622:	d1f7      	bne.n	8005614 <_fwalk_sglue+0xc>
 8005624:	4630      	mov	r0, r6
 8005626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800562a:	89ab      	ldrh	r3, [r5, #12]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d907      	bls.n	8005640 <_fwalk_sglue+0x38>
 8005630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005634:	3301      	adds	r3, #1
 8005636:	d003      	beq.n	8005640 <_fwalk_sglue+0x38>
 8005638:	4629      	mov	r1, r5
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	4306      	orrs	r6, r0
 8005640:	3568      	adds	r5, #104	@ 0x68
 8005642:	e7e9      	b.n	8005618 <_fwalk_sglue+0x10>

08005644 <siprintf>:
 8005644:	b40e      	push	{r1, r2, r3}
 8005646:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800564a:	b500      	push	{lr}
 800564c:	b09c      	sub	sp, #112	@ 0x70
 800564e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005650:	9002      	str	r0, [sp, #8]
 8005652:	9006      	str	r0, [sp, #24]
 8005654:	9107      	str	r1, [sp, #28]
 8005656:	9104      	str	r1, [sp, #16]
 8005658:	4808      	ldr	r0, [pc, #32]	@ (800567c <siprintf+0x38>)
 800565a:	4909      	ldr	r1, [pc, #36]	@ (8005680 <siprintf+0x3c>)
 800565c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005660:	9105      	str	r1, [sp, #20]
 8005662:	6800      	ldr	r0, [r0, #0]
 8005664:	a902      	add	r1, sp, #8
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	f001 fc20 	bl	8006eac <_svfiprintf_r>
 800566c:	2200      	movs	r2, #0
 800566e:	9b02      	ldr	r3, [sp, #8]
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	b01c      	add	sp, #112	@ 0x70
 8005674:	f85d eb04 	ldr.w	lr, [sp], #4
 8005678:	b003      	add	sp, #12
 800567a:	4770      	bx	lr
 800567c:	20000018 	.word	0x20000018
 8005680:	ffff0208 	.word	0xffff0208

08005684 <__sread>:
 8005684:	b510      	push	{r4, lr}
 8005686:	460c      	mov	r4, r1
 8005688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568c:	f000 f882 	bl	8005794 <_read_r>
 8005690:	2800      	cmp	r0, #0
 8005692:	bfab      	itete	ge
 8005694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005696:	89a3      	ldrhlt	r3, [r4, #12]
 8005698:	181b      	addge	r3, r3, r0
 800569a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800569e:	bfac      	ite	ge
 80056a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056a2:	81a3      	strhlt	r3, [r4, #12]
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <__swrite>:
 80056a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056aa:	461f      	mov	r7, r3
 80056ac:	898b      	ldrh	r3, [r1, #12]
 80056ae:	4605      	mov	r5, r0
 80056b0:	05db      	lsls	r3, r3, #23
 80056b2:	460c      	mov	r4, r1
 80056b4:	4616      	mov	r6, r2
 80056b6:	d505      	bpl.n	80056c4 <__swrite+0x1e>
 80056b8:	2302      	movs	r3, #2
 80056ba:	2200      	movs	r2, #0
 80056bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c0:	f000 f856 	bl	8005770 <_lseek_r>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	4632      	mov	r2, r6
 80056c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	4628      	mov	r0, r5
 80056d0:	463b      	mov	r3, r7
 80056d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	f000 b86d 	b.w	80057b8 <_write_r>

080056de <__sseek>:
 80056de:	b510      	push	{r4, lr}
 80056e0:	460c      	mov	r4, r1
 80056e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e6:	f000 f843 	bl	8005770 <_lseek_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	bf15      	itete	ne
 80056f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056fa:	81a3      	strheq	r3, [r4, #12]
 80056fc:	bf18      	it	ne
 80056fe:	81a3      	strhne	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__sclose>:
 8005702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005706:	f000 b823 	b.w	8005750 <_close_r>

0800570a <memset>:
 800570a:	4603      	mov	r3, r0
 800570c:	4402      	add	r2, r0
 800570e:	4293      	cmp	r3, r2
 8005710:	d100      	bne.n	8005714 <memset+0xa>
 8005712:	4770      	bx	lr
 8005714:	f803 1b01 	strb.w	r1, [r3], #1
 8005718:	e7f9      	b.n	800570e <memset+0x4>

0800571a <strstr>:
 800571a:	780a      	ldrb	r2, [r1, #0]
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	b96a      	cbnz	r2, 800573c <strstr+0x22>
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	429a      	cmp	r2, r3
 8005724:	d109      	bne.n	800573a <strstr+0x20>
 8005726:	460c      	mov	r4, r1
 8005728:	4605      	mov	r5, r0
 800572a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f6      	beq.n	8005720 <strstr+0x6>
 8005732:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005736:	429e      	cmp	r6, r3
 8005738:	d0f7      	beq.n	800572a <strstr+0x10>
 800573a:	3001      	adds	r0, #1
 800573c:	7803      	ldrb	r3, [r0, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ef      	bne.n	8005722 <strstr+0x8>
 8005742:	4618      	mov	r0, r3
 8005744:	e7ec      	b.n	8005720 <strstr+0x6>
	...

08005748 <_localeconv_r>:
 8005748:	4800      	ldr	r0, [pc, #0]	@ (800574c <_localeconv_r+0x4>)
 800574a:	4770      	bx	lr
 800574c:	20000158 	.word	0x20000158

08005750 <_close_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	2300      	movs	r3, #0
 8005754:	4d05      	ldr	r5, [pc, #20]	@ (800576c <_close_r+0x1c>)
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	f7fc f819 	bl	8001792 <_close>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_close_r+0x1a>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_close_r+0x1a>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	20000548 	.word	0x20000548

08005770 <_lseek_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	2200      	movs	r2, #0
 800577a:	4d05      	ldr	r5, [pc, #20]	@ (8005790 <_lseek_r+0x20>)
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f7fc f82b 	bl	80017da <_lseek>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_lseek_r+0x1e>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_lseek_r+0x1e>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	20000548 	.word	0x20000548

08005794 <_read_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	4611      	mov	r1, r2
 800579c:	2200      	movs	r2, #0
 800579e:	4d05      	ldr	r5, [pc, #20]	@ (80057b4 <_read_r+0x20>)
 80057a0:	602a      	str	r2, [r5, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7fb ffbc 	bl	8001720 <_read>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_read_r+0x1e>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_read_r+0x1e>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000548 	.word	0x20000548

080057b8 <_write_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	2200      	movs	r2, #0
 80057c2:	4d05      	ldr	r5, [pc, #20]	@ (80057d8 <_write_r+0x20>)
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fb ffc7 	bl	800175a <_write>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_write_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_write_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	20000548 	.word	0x20000548

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	@ (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000018 	.word	0x20000018

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	2600      	movs	r6, #0
 80057ec:	4d0c      	ldr	r5, [pc, #48]	@ (8005820 <__libc_init_array+0x38>)
 80057ee:	4c0d      	ldr	r4, [pc, #52]	@ (8005824 <__libc_init_array+0x3c>)
 80057f0:	1b64      	subs	r4, r4, r5
 80057f2:	10a4      	asrs	r4, r4, #2
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	f002 f870 	bl	80078dc <_init>
 80057fc:	2600      	movs	r6, #0
 80057fe:	4d0a      	ldr	r5, [pc, #40]	@ (8005828 <__libc_init_array+0x40>)
 8005800:	4c0a      	ldr	r4, [pc, #40]	@ (800582c <__libc_init_array+0x44>)
 8005802:	1b64      	subs	r4, r4, r5
 8005804:	10a4      	asrs	r4, r4, #2
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08007d50 	.word	0x08007d50
 8005824:	08007d50 	.word	0x08007d50
 8005828:	08007d50 	.word	0x08007d50
 800582c:	08007d54 	.word	0x08007d54

08005830 <__retarget_lock_init_recursive>:
 8005830:	4770      	bx	lr

08005832 <__retarget_lock_acquire_recursive>:
 8005832:	4770      	bx	lr

08005834 <__retarget_lock_release_recursive>:
 8005834:	4770      	bx	lr

08005836 <memchr>:
 8005836:	4603      	mov	r3, r0
 8005838:	b510      	push	{r4, lr}
 800583a:	b2c9      	uxtb	r1, r1
 800583c:	4402      	add	r2, r0
 800583e:	4293      	cmp	r3, r2
 8005840:	4618      	mov	r0, r3
 8005842:	d101      	bne.n	8005848 <memchr+0x12>
 8005844:	2000      	movs	r0, #0
 8005846:	e003      	b.n	8005850 <memchr+0x1a>
 8005848:	7804      	ldrb	r4, [r0, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	428c      	cmp	r4, r1
 800584e:	d1f6      	bne.n	800583e <memchr+0x8>
 8005850:	bd10      	pop	{r4, pc}

08005852 <quorem>:
 8005852:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005856:	6903      	ldr	r3, [r0, #16]
 8005858:	690c      	ldr	r4, [r1, #16]
 800585a:	4607      	mov	r7, r0
 800585c:	42a3      	cmp	r3, r4
 800585e:	db7e      	blt.n	800595e <quorem+0x10c>
 8005860:	3c01      	subs	r4, #1
 8005862:	00a3      	lsls	r3, r4, #2
 8005864:	f100 0514 	add.w	r5, r0, #20
 8005868:	f101 0814 	add.w	r8, r1, #20
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800587c:	3301      	adds	r3, #1
 800587e:	429a      	cmp	r2, r3
 8005880:	fbb2 f6f3 	udiv	r6, r2, r3
 8005884:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005888:	d32e      	bcc.n	80058e8 <quorem+0x96>
 800588a:	f04f 0a00 	mov.w	sl, #0
 800588e:	46c4      	mov	ip, r8
 8005890:	46ae      	mov	lr, r5
 8005892:	46d3      	mov	fp, sl
 8005894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005898:	b298      	uxth	r0, r3
 800589a:	fb06 a000 	mla	r0, r6, r0, sl
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	0c02      	lsrs	r2, r0, #16
 80058a2:	fb06 2303 	mla	r3, r6, r3, r2
 80058a6:	f8de 2000 	ldr.w	r2, [lr]
 80058aa:	b280      	uxth	r0, r0
 80058ac:	b292      	uxth	r2, r2
 80058ae:	1a12      	subs	r2, r2, r0
 80058b0:	445a      	add	r2, fp
 80058b2:	f8de 0000 	ldr.w	r0, [lr]
 80058b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80058c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80058c4:	b292      	uxth	r2, r2
 80058c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058ca:	45e1      	cmp	r9, ip
 80058cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80058d0:	f84e 2b04 	str.w	r2, [lr], #4
 80058d4:	d2de      	bcs.n	8005894 <quorem+0x42>
 80058d6:	9b00      	ldr	r3, [sp, #0]
 80058d8:	58eb      	ldr	r3, [r5, r3]
 80058da:	b92b      	cbnz	r3, 80058e8 <quorem+0x96>
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	3b04      	subs	r3, #4
 80058e0:	429d      	cmp	r5, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	d32f      	bcc.n	8005946 <quorem+0xf4>
 80058e6:	613c      	str	r4, [r7, #16]
 80058e8:	4638      	mov	r0, r7
 80058ea:	f001 f97b 	bl	8006be4 <__mcmp>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	db25      	blt.n	800593e <quorem+0xec>
 80058f2:	4629      	mov	r1, r5
 80058f4:	2000      	movs	r0, #0
 80058f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80058fa:	f8d1 c000 	ldr.w	ip, [r1]
 80058fe:	fa1f fe82 	uxth.w	lr, r2
 8005902:	fa1f f38c 	uxth.w	r3, ip
 8005906:	eba3 030e 	sub.w	r3, r3, lr
 800590a:	4403      	add	r3, r0
 800590c:	0c12      	lsrs	r2, r2, #16
 800590e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005912:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800591c:	45c1      	cmp	r9, r8
 800591e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005922:	f841 3b04 	str.w	r3, [r1], #4
 8005926:	d2e6      	bcs.n	80058f6 <quorem+0xa4>
 8005928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800592c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005930:	b922      	cbnz	r2, 800593c <quorem+0xea>
 8005932:	3b04      	subs	r3, #4
 8005934:	429d      	cmp	r5, r3
 8005936:	461a      	mov	r2, r3
 8005938:	d30b      	bcc.n	8005952 <quorem+0x100>
 800593a:	613c      	str	r4, [r7, #16]
 800593c:	3601      	adds	r6, #1
 800593e:	4630      	mov	r0, r6
 8005940:	b003      	add	sp, #12
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	3b04      	subs	r3, #4
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1cb      	bne.n	80058e6 <quorem+0x94>
 800594e:	3c01      	subs	r4, #1
 8005950:	e7c6      	b.n	80058e0 <quorem+0x8e>
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	3b04      	subs	r3, #4
 8005956:	2a00      	cmp	r2, #0
 8005958:	d1ef      	bne.n	800593a <quorem+0xe8>
 800595a:	3c01      	subs	r4, #1
 800595c:	e7ea      	b.n	8005934 <quorem+0xe2>
 800595e:	2000      	movs	r0, #0
 8005960:	e7ee      	b.n	8005940 <quorem+0xee>
 8005962:	0000      	movs	r0, r0
 8005964:	0000      	movs	r0, r0
	...

08005968 <_dtoa_r>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	4614      	mov	r4, r2
 800596e:	461d      	mov	r5, r3
 8005970:	69c7      	ldr	r7, [r0, #28]
 8005972:	b097      	sub	sp, #92	@ 0x5c
 8005974:	4683      	mov	fp, r0
 8005976:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800597a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800597c:	b97f      	cbnz	r7, 800599e <_dtoa_r+0x36>
 800597e:	2010      	movs	r0, #16
 8005980:	f000 fe02 	bl	8006588 <malloc>
 8005984:	4602      	mov	r2, r0
 8005986:	f8cb 001c 	str.w	r0, [fp, #28]
 800598a:	b920      	cbnz	r0, 8005996 <_dtoa_r+0x2e>
 800598c:	21ef      	movs	r1, #239	@ 0xef
 800598e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c30 <_dtoa_r+0x2c8>)
 8005990:	48a8      	ldr	r0, [pc, #672]	@ (8005c34 <_dtoa_r+0x2cc>)
 8005992:	f001 fc67 	bl	8007264 <__assert_func>
 8005996:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800599a:	6007      	str	r7, [r0, #0]
 800599c:	60c7      	str	r7, [r0, #12]
 800599e:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	b159      	cbz	r1, 80059be <_dtoa_r+0x56>
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	2301      	movs	r3, #1
 80059aa:	4093      	lsls	r3, r2
 80059ac:	604a      	str	r2, [r1, #4]
 80059ae:	608b      	str	r3, [r1, #8]
 80059b0:	4658      	mov	r0, fp
 80059b2:	f000 fedf 	bl	8006774 <_Bfree>
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	1e2b      	subs	r3, r5, #0
 80059c0:	bfaf      	iteee	ge
 80059c2:	2300      	movge	r3, #0
 80059c4:	2201      	movlt	r2, #1
 80059c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80059ca:	9303      	strlt	r3, [sp, #12]
 80059cc:	bfa8      	it	ge
 80059ce:	6033      	strge	r3, [r6, #0]
 80059d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059d4:	4b98      	ldr	r3, [pc, #608]	@ (8005c38 <_dtoa_r+0x2d0>)
 80059d6:	bfb8      	it	lt
 80059d8:	6032      	strlt	r2, [r6, #0]
 80059da:	ea33 0308 	bics.w	r3, r3, r8
 80059de:	d112      	bne.n	8005a06 <_dtoa_r+0x9e>
 80059e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059ec:	4323      	orrs	r3, r4
 80059ee:	f000 8550 	beq.w	8006492 <_dtoa_r+0xb2a>
 80059f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059f4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005c3c <_dtoa_r+0x2d4>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8552 	beq.w	80064a2 <_dtoa_r+0xb3a>
 80059fe:	f10a 0303 	add.w	r3, sl, #3
 8005a02:	f000 bd4c 	b.w	800649e <_dtoa_r+0xb36>
 8005a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	f7fb f833 	bl	8000a80 <__aeabi_dcmpeq>
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	b158      	cbz	r0, 8005a36 <_dtoa_r+0xce>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a26:	b113      	cbz	r3, 8005a2e <_dtoa_r+0xc6>
 8005a28:	4b85      	ldr	r3, [pc, #532]	@ (8005c40 <_dtoa_r+0x2d8>)
 8005a2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005c44 <_dtoa_r+0x2dc>
 8005a32:	f000 bd36 	b.w	80064a2 <_dtoa_r+0xb3a>
 8005a36:	ab14      	add	r3, sp, #80	@ 0x50
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	ab15      	add	r3, sp, #84	@ 0x54
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4658      	mov	r0, fp
 8005a40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005a44:	f001 f97e 	bl	8006d44 <__d2b>
 8005a48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d077      	beq.n	8005b42 <_dtoa_r+0x1da>
 8005a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a68:	9712      	str	r7, [sp, #72]	@ 0x48
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4b76      	ldr	r3, [pc, #472]	@ (8005c48 <_dtoa_r+0x2e0>)
 8005a70:	f7fa fbe6 	bl	8000240 <__aeabi_dsub>
 8005a74:	a368      	add	r3, pc, #416	@ (adr r3, 8005c18 <_dtoa_r+0x2b0>)
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	f7fa fd99 	bl	80005b0 <__aeabi_dmul>
 8005a7e:	a368      	add	r3, pc, #416	@ (adr r3, 8005c20 <_dtoa_r+0x2b8>)
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fbde 	bl	8000244 <__adddf3>
 8005a88:	4604      	mov	r4, r0
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	f7fa fd25 	bl	80004dc <__aeabi_i2d>
 8005a92:	a365      	add	r3, pc, #404	@ (adr r3, 8005c28 <_dtoa_r+0x2c0>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fd8a 	bl	80005b0 <__aeabi_dmul>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa fbce 	bl	8000244 <__adddf3>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	f7fb f830 	bl	8000b10 <__aeabi_d2iz>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa ffeb 	bl	8000a94 <__aeabi_dcmplt>
 8005abe:	b140      	cbz	r0, 8005ad2 <_dtoa_r+0x16a>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7fa fd0b 	bl	80004dc <__aeabi_i2d>
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f7fa ffd9 	bl	8000a80 <__aeabi_dcmpeq>
 8005ace:	b900      	cbnz	r0, 8005ad2 <_dtoa_r+0x16a>
 8005ad0:	3f01      	subs	r7, #1
 8005ad2:	2f16      	cmp	r7, #22
 8005ad4:	d853      	bhi.n	8005b7e <_dtoa_r+0x216>
 8005ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ada:	4b5c      	ldr	r3, [pc, #368]	@ (8005c4c <_dtoa_r+0x2e4>)
 8005adc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa ffd6 	bl	8000a94 <__aeabi_dcmplt>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d04a      	beq.n	8005b82 <_dtoa_r+0x21a>
 8005aec:	2300      	movs	r3, #0
 8005aee:	3f01      	subs	r7, #1
 8005af0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005af2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005af4:	1b9b      	subs	r3, r3, r6
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	bf46      	itte	mi
 8005afa:	f1c3 0801 	rsbmi	r8, r3, #1
 8005afe:	2300      	movmi	r3, #0
 8005b00:	f04f 0800 	movpl.w	r8, #0
 8005b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b06:	bf48      	it	mi
 8005b08:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005b0a:	2f00      	cmp	r7, #0
 8005b0c:	db3b      	blt.n	8005b86 <_dtoa_r+0x21e>
 8005b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b10:	970e      	str	r7, [sp, #56]	@ 0x38
 8005b12:	443b      	add	r3, r7
 8005b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b16:	2300      	movs	r3, #0
 8005b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d866      	bhi.n	8005bee <_dtoa_r+0x286>
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	bfc4      	itt	gt
 8005b24:	3b04      	subgt	r3, #4
 8005b26:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005b28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b2a:	bfc8      	it	gt
 8005b2c:	2400      	movgt	r4, #0
 8005b2e:	f1a3 0302 	sub.w	r3, r3, #2
 8005b32:	bfd8      	it	le
 8005b34:	2401      	movle	r4, #1
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d864      	bhi.n	8005c04 <_dtoa_r+0x29c>
 8005b3a:	e8df f003 	tbb	[pc, r3]
 8005b3e:	382b      	.short	0x382b
 8005b40:	5636      	.short	0x5636
 8005b42:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005b46:	441e      	add	r6, r3
 8005b48:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	bfc1      	itttt	gt
 8005b50:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b54:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b58:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b60:	bfd6      	itet	le
 8005b62:	f1c3 0320 	rsble	r3, r3, #32
 8005b66:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b6a:	fa04 f003 	lslle.w	r0, r4, r3
 8005b6e:	f7fa fca5 	bl	80004bc <__aeabi_ui2d>
 8005b72:	2201      	movs	r2, #1
 8005b74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b78:	3e01      	subs	r6, #1
 8005b7a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005b7c:	e775      	b.n	8005a6a <_dtoa_r+0x102>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7b6      	b.n	8005af0 <_dtoa_r+0x188>
 8005b82:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005b84:	e7b5      	b.n	8005af2 <_dtoa_r+0x18a>
 8005b86:	427b      	negs	r3, r7
 8005b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	eba8 0807 	sub.w	r8, r8, r7
 8005b90:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b92:	e7c2      	b.n	8005b1a <_dtoa_r+0x1b2>
 8005b94:	2300      	movs	r3, #0
 8005b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dc35      	bgt.n	8005c0a <_dtoa_r+0x2a2>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ba6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005ba8:	e00b      	b.n	8005bc2 <_dtoa_r+0x25a>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7f3      	b.n	8005b96 <_dtoa_r+0x22e>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	9308      	str	r3, [sp, #32]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	bfb8      	it	lt
 8005bc0:	2301      	movlt	r3, #1
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005bca:	f102 0514 	add.w	r5, r2, #20
 8005bce:	429d      	cmp	r5, r3
 8005bd0:	d91f      	bls.n	8005c12 <_dtoa_r+0x2aa>
 8005bd2:	6041      	str	r1, [r0, #4]
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	f000 fd8d 	bl	80066f4 <_Balloc>
 8005bda:	4682      	mov	sl, r0
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d139      	bne.n	8005c54 <_dtoa_r+0x2ec>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005be6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <_dtoa_r+0x2e8>)
 8005be8:	e6d2      	b.n	8005990 <_dtoa_r+0x28>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e7e0      	b.n	8005bb0 <_dtoa_r+0x248>
 8005bee:	2401      	movs	r4, #1
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bf4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c00:	2312      	movs	r3, #18
 8005c02:	e7d0      	b.n	8005ba6 <_dtoa_r+0x23e>
 8005c04:	2301      	movs	r3, #1
 8005c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c08:	e7f5      	b.n	8005bf6 <_dtoa_r+0x28e>
 8005c0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c10:	e7d7      	b.n	8005bc2 <_dtoa_r+0x25a>
 8005c12:	3101      	adds	r1, #1
 8005c14:	0052      	lsls	r2, r2, #1
 8005c16:	e7d8      	b.n	8005bca <_dtoa_r+0x262>
 8005c18:	636f4361 	.word	0x636f4361
 8005c1c:	3fd287a7 	.word	0x3fd287a7
 8005c20:	8b60c8b3 	.word	0x8b60c8b3
 8005c24:	3fc68a28 	.word	0x3fc68a28
 8005c28:	509f79fb 	.word	0x509f79fb
 8005c2c:	3fd34413 	.word	0x3fd34413
 8005c30:	08007a15 	.word	0x08007a15
 8005c34:	08007a2c 	.word	0x08007a2c
 8005c38:	7ff00000 	.word	0x7ff00000
 8005c3c:	08007a11 	.word	0x08007a11
 8005c40:	080079e5 	.word	0x080079e5
 8005c44:	080079e4 	.word	0x080079e4
 8005c48:	3ff80000 	.word	0x3ff80000
 8005c4c:	08007b28 	.word	0x08007b28
 8005c50:	08007a84 	.word	0x08007a84
 8005c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c58:	6018      	str	r0, [r3, #0]
 8005c5a:	9b07      	ldr	r3, [sp, #28]
 8005c5c:	2b0e      	cmp	r3, #14
 8005c5e:	f200 80a4 	bhi.w	8005daa <_dtoa_r+0x442>
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	f000 80a1 	beq.w	8005daa <_dtoa_r+0x442>
 8005c68:	2f00      	cmp	r7, #0
 8005c6a:	dd33      	ble.n	8005cd4 <_dtoa_r+0x36c>
 8005c6c:	4b86      	ldr	r3, [pc, #536]	@ (8005e88 <_dtoa_r+0x520>)
 8005c6e:	f007 020f 	and.w	r2, r7, #15
 8005c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c76:	05f8      	lsls	r0, r7, #23
 8005c78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c84:	d516      	bpl.n	8005cb4 <_dtoa_r+0x34c>
 8005c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c8a:	4b80      	ldr	r3, [pc, #512]	@ (8005e8c <_dtoa_r+0x524>)
 8005c8c:	2603      	movs	r6, #3
 8005c8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c92:	f7fa fdb7 	bl	8000804 <__aeabi_ddiv>
 8005c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9a:	f004 040f 	and.w	r4, r4, #15
 8005c9e:	4d7b      	ldr	r5, [pc, #492]	@ (8005e8c <_dtoa_r+0x524>)
 8005ca0:	b954      	cbnz	r4, 8005cb8 <_dtoa_r+0x350>
 8005ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005caa:	f7fa fdab 	bl	8000804 <__aeabi_ddiv>
 8005cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb2:	e028      	b.n	8005d06 <_dtoa_r+0x39e>
 8005cb4:	2602      	movs	r6, #2
 8005cb6:	e7f2      	b.n	8005c9e <_dtoa_r+0x336>
 8005cb8:	07e1      	lsls	r1, r4, #31
 8005cba:	d508      	bpl.n	8005cce <_dtoa_r+0x366>
 8005cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cc4:	f7fa fc74 	bl	80005b0 <__aeabi_dmul>
 8005cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ccc:	3601      	adds	r6, #1
 8005cce:	1064      	asrs	r4, r4, #1
 8005cd0:	3508      	adds	r5, #8
 8005cd2:	e7e5      	b.n	8005ca0 <_dtoa_r+0x338>
 8005cd4:	f000 80d2 	beq.w	8005e7c <_dtoa_r+0x514>
 8005cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cdc:	427c      	negs	r4, r7
 8005cde:	4b6a      	ldr	r3, [pc, #424]	@ (8005e88 <_dtoa_r+0x520>)
 8005ce0:	f004 020f 	and.w	r2, r4, #15
 8005ce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fc60 	bl	80005b0 <__aeabi_dmul>
 8005cf0:	2602      	movs	r6, #2
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf8:	4d64      	ldr	r5, [pc, #400]	@ (8005e8c <_dtoa_r+0x524>)
 8005cfa:	1124      	asrs	r4, r4, #4
 8005cfc:	2c00      	cmp	r4, #0
 8005cfe:	f040 80b2 	bne.w	8005e66 <_dtoa_r+0x4fe>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1d3      	bne.n	8005cae <_dtoa_r+0x346>
 8005d06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80b7 	beq.w	8005e80 <_dtoa_r+0x518>
 8005d12:	2200      	movs	r2, #0
 8005d14:	4620      	mov	r0, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	4b5d      	ldr	r3, [pc, #372]	@ (8005e90 <_dtoa_r+0x528>)
 8005d1a:	f7fa febb 	bl	8000a94 <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f000 80ae 	beq.w	8005e80 <_dtoa_r+0x518>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80aa 	beq.w	8005e80 <_dtoa_r+0x518>
 8005d2c:	9b08      	ldr	r3, [sp, #32]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	dd37      	ble.n	8005da2 <_dtoa_r+0x43a>
 8005d32:	1e7b      	subs	r3, r7, #1
 8005d34:	4620      	mov	r0, r4
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4b55      	ldr	r3, [pc, #340]	@ (8005e94 <_dtoa_r+0x52c>)
 8005d3e:	f7fa fc37 	bl	80005b0 <__aeabi_dmul>
 8005d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d46:	9c08      	ldr	r4, [sp, #32]
 8005d48:	3601      	adds	r6, #1
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7fa fbc6 	bl	80004dc <__aeabi_i2d>
 8005d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d54:	f7fa fc2c 	bl	80005b0 <__aeabi_dmul>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e98 <_dtoa_r+0x530>)
 8005d5c:	f7fa fa72 	bl	8000244 <__adddf3>
 8005d60:	4605      	mov	r5, r0
 8005d62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	f040 809a 	bne.w	8005ea0 <_dtoa_r+0x538>
 8005d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d70:	2200      	movs	r2, #0
 8005d72:	4b4a      	ldr	r3, [pc, #296]	@ (8005e9c <_dtoa_r+0x534>)
 8005d74:	f7fa fa64 	bl	8000240 <__aeabi_dsub>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d80:	462a      	mov	r2, r5
 8005d82:	4633      	mov	r3, r6
 8005d84:	f7fa fea4 	bl	8000ad0 <__aeabi_dcmpgt>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f040 828e 	bne.w	80062aa <_dtoa_r+0x942>
 8005d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d92:	462a      	mov	r2, r5
 8005d94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d98:	f7fa fe7c 	bl	8000a94 <__aeabi_dcmplt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f040 8127 	bne.w	8005ff0 <_dtoa_r+0x688>
 8005da2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005da6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005daa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f2c0 8163 	blt.w	8006078 <_dtoa_r+0x710>
 8005db2:	2f0e      	cmp	r7, #14
 8005db4:	f300 8160 	bgt.w	8006078 <_dtoa_r+0x710>
 8005db8:	4b33      	ldr	r3, [pc, #204]	@ (8005e88 <_dtoa_r+0x520>)
 8005dba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da03      	bge.n	8005dd4 <_dtoa_r+0x46c>
 8005dcc:	9b07      	ldr	r3, [sp, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f340 8100 	ble.w	8005fd4 <_dtoa_r+0x66c>
 8005dd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005dd8:	4656      	mov	r6, sl
 8005dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f7fa fd0f 	bl	8000804 <__aeabi_ddiv>
 8005de6:	f7fa fe93 	bl	8000b10 <__aeabi_d2iz>
 8005dea:	4680      	mov	r8, r0
 8005dec:	f7fa fb76 	bl	80004dc <__aeabi_i2d>
 8005df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df4:	f7fa fbdc 	bl	80005b0 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fa1e 	bl	8000240 <__aeabi_dsub>
 8005e04:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005e08:	9d07      	ldr	r5, [sp, #28]
 8005e0a:	f806 4b01 	strb.w	r4, [r6], #1
 8005e0e:	eba6 040a 	sub.w	r4, r6, sl
 8005e12:	42a5      	cmp	r5, r4
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	f040 8116 	bne.w	8006048 <_dtoa_r+0x6e0>
 8005e1c:	f7fa fa12 	bl	8000244 <__adddf3>
 8005e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e24:	4604      	mov	r4, r0
 8005e26:	460d      	mov	r5, r1
 8005e28:	f7fa fe52 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f040 80f8 	bne.w	8006022 <_dtoa_r+0x6ba>
 8005e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e36:	4620      	mov	r0, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7fa fe21 	bl	8000a80 <__aeabi_dcmpeq>
 8005e3e:	b118      	cbz	r0, 8005e48 <_dtoa_r+0x4e0>
 8005e40:	f018 0f01 	tst.w	r8, #1
 8005e44:	f040 80ed 	bne.w	8006022 <_dtoa_r+0x6ba>
 8005e48:	4649      	mov	r1, r9
 8005e4a:	4658      	mov	r0, fp
 8005e4c:	f000 fc92 	bl	8006774 <_Bfree>
 8005e50:	2300      	movs	r3, #0
 8005e52:	7033      	strb	r3, [r6, #0]
 8005e54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005e56:	3701      	adds	r7, #1
 8005e58:	601f      	str	r7, [r3, #0]
 8005e5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8320 	beq.w	80064a2 <_dtoa_r+0xb3a>
 8005e62:	601e      	str	r6, [r3, #0]
 8005e64:	e31d      	b.n	80064a2 <_dtoa_r+0xb3a>
 8005e66:	07e2      	lsls	r2, r4, #31
 8005e68:	d505      	bpl.n	8005e76 <_dtoa_r+0x50e>
 8005e6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e6e:	f7fa fb9f 	bl	80005b0 <__aeabi_dmul>
 8005e72:	2301      	movs	r3, #1
 8005e74:	3601      	adds	r6, #1
 8005e76:	1064      	asrs	r4, r4, #1
 8005e78:	3508      	adds	r5, #8
 8005e7a:	e73f      	b.n	8005cfc <_dtoa_r+0x394>
 8005e7c:	2602      	movs	r6, #2
 8005e7e:	e742      	b.n	8005d06 <_dtoa_r+0x39e>
 8005e80:	9c07      	ldr	r4, [sp, #28]
 8005e82:	9704      	str	r7, [sp, #16]
 8005e84:	e761      	b.n	8005d4a <_dtoa_r+0x3e2>
 8005e86:	bf00      	nop
 8005e88:	08007b28 	.word	0x08007b28
 8005e8c:	08007b00 	.word	0x08007b00
 8005e90:	3ff00000 	.word	0x3ff00000
 8005e94:	40240000 	.word	0x40240000
 8005e98:	401c0000 	.word	0x401c0000
 8005e9c:	40140000 	.word	0x40140000
 8005ea0:	4b70      	ldr	r3, [pc, #448]	@ (8006064 <_dtoa_r+0x6fc>)
 8005ea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ea4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005eac:	4454      	add	r4, sl
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	d045      	beq.n	8005f3e <_dtoa_r+0x5d6>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	496c      	ldr	r1, [pc, #432]	@ (8006068 <_dtoa_r+0x700>)
 8005eb6:	f7fa fca5 	bl	8000804 <__aeabi_ddiv>
 8005eba:	4633      	mov	r3, r6
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	f7fa f9bf 	bl	8000240 <__aeabi_dsub>
 8005ec2:	4656      	mov	r6, sl
 8005ec4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ecc:	f7fa fe20 	bl	8000b10 <__aeabi_d2iz>
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	f7fa fb03 	bl	80004dc <__aeabi_i2d>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ede:	f7fa f9af 	bl	8000240 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	3530      	adds	r5, #48	@ 0x30
 8005ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005eec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ef0:	f806 5b01 	strb.w	r5, [r6], #1
 8005ef4:	f7fa fdce 	bl	8000a94 <__aeabi_dcmplt>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d163      	bne.n	8005fc4 <_dtoa_r+0x65c>
 8005efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f00:	2000      	movs	r0, #0
 8005f02:	495a      	ldr	r1, [pc, #360]	@ (800606c <_dtoa_r+0x704>)
 8005f04:	f7fa f99c 	bl	8000240 <__aeabi_dsub>
 8005f08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f0c:	f7fa fdc2 	bl	8000a94 <__aeabi_dcmplt>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f040 8087 	bne.w	8006024 <_dtoa_r+0x6bc>
 8005f16:	42a6      	cmp	r6, r4
 8005f18:	f43f af43 	beq.w	8005da2 <_dtoa_r+0x43a>
 8005f1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f20:	2200      	movs	r2, #0
 8005f22:	4b53      	ldr	r3, [pc, #332]	@ (8006070 <_dtoa_r+0x708>)
 8005f24:	f7fa fb44 	bl	80005b0 <__aeabi_dmul>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f32:	4b4f      	ldr	r3, [pc, #316]	@ (8006070 <_dtoa_r+0x708>)
 8005f34:	f7fa fb3c 	bl	80005b0 <__aeabi_dmul>
 8005f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f3c:	e7c4      	b.n	8005ec8 <_dtoa_r+0x560>
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	f7fa fb35 	bl	80005b0 <__aeabi_dmul>
 8005f46:	4656      	mov	r6, sl
 8005f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f4c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f52:	f7fa fddd 	bl	8000b10 <__aeabi_d2iz>
 8005f56:	4605      	mov	r5, r0
 8005f58:	f7fa fac0 	bl	80004dc <__aeabi_i2d>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f64:	f7fa f96c 	bl	8000240 <__aeabi_dsub>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	3530      	adds	r5, #48	@ 0x30
 8005f6e:	f806 5b01 	strb.w	r5, [r6], #1
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	d124      	bne.n	8005fc8 <_dtoa_r+0x660>
 8005f7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f82:	4b39      	ldr	r3, [pc, #228]	@ (8006068 <_dtoa_r+0x700>)
 8005f84:	f7fa f95e 	bl	8000244 <__adddf3>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f90:	f7fa fd9e 	bl	8000ad0 <__aeabi_dcmpgt>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d145      	bne.n	8006024 <_dtoa_r+0x6bc>
 8005f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	4932      	ldr	r1, [pc, #200]	@ (8006068 <_dtoa_r+0x700>)
 8005fa0:	f7fa f94e 	bl	8000240 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fac:	f7fa fd72 	bl	8000a94 <__aeabi_dcmplt>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	f43f aef6 	beq.w	8005da2 <_dtoa_r+0x43a>
 8005fb6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005fb8:	1e73      	subs	r3, r6, #1
 8005fba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005fc0:	2b30      	cmp	r3, #48	@ 0x30
 8005fc2:	d0f8      	beq.n	8005fb6 <_dtoa_r+0x64e>
 8005fc4:	9f04      	ldr	r7, [sp, #16]
 8005fc6:	e73f      	b.n	8005e48 <_dtoa_r+0x4e0>
 8005fc8:	4b29      	ldr	r3, [pc, #164]	@ (8006070 <_dtoa_r+0x708>)
 8005fca:	f7fa faf1 	bl	80005b0 <__aeabi_dmul>
 8005fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd2:	e7bc      	b.n	8005f4e <_dtoa_r+0x5e6>
 8005fd4:	d10c      	bne.n	8005ff0 <_dtoa_r+0x688>
 8005fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <_dtoa_r+0x70c>)
 8005fde:	f7fa fae7 	bl	80005b0 <__aeabi_dmul>
 8005fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fe6:	f7fa fd69 	bl	8000abc <__aeabi_dcmpge>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f000 815b 	beq.w	80062a6 <_dtoa_r+0x93e>
 8005ff0:	2400      	movs	r4, #0
 8005ff2:	4625      	mov	r5, r4
 8005ff4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ff6:	4656      	mov	r6, sl
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	2700      	movs	r7, #0
 8005ffe:	4621      	mov	r1, r4
 8006000:	4658      	mov	r0, fp
 8006002:	f000 fbb7 	bl	8006774 <_Bfree>
 8006006:	2d00      	cmp	r5, #0
 8006008:	d0dc      	beq.n	8005fc4 <_dtoa_r+0x65c>
 800600a:	b12f      	cbz	r7, 8006018 <_dtoa_r+0x6b0>
 800600c:	42af      	cmp	r7, r5
 800600e:	d003      	beq.n	8006018 <_dtoa_r+0x6b0>
 8006010:	4639      	mov	r1, r7
 8006012:	4658      	mov	r0, fp
 8006014:	f000 fbae 	bl	8006774 <_Bfree>
 8006018:	4629      	mov	r1, r5
 800601a:	4658      	mov	r0, fp
 800601c:	f000 fbaa 	bl	8006774 <_Bfree>
 8006020:	e7d0      	b.n	8005fc4 <_dtoa_r+0x65c>
 8006022:	9704      	str	r7, [sp, #16]
 8006024:	4633      	mov	r3, r6
 8006026:	461e      	mov	r6, r3
 8006028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800602c:	2a39      	cmp	r2, #57	@ 0x39
 800602e:	d107      	bne.n	8006040 <_dtoa_r+0x6d8>
 8006030:	459a      	cmp	sl, r3
 8006032:	d1f8      	bne.n	8006026 <_dtoa_r+0x6be>
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	3201      	adds	r2, #1
 8006038:	9204      	str	r2, [sp, #16]
 800603a:	2230      	movs	r2, #48	@ 0x30
 800603c:	f88a 2000 	strb.w	r2, [sl]
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	3201      	adds	r2, #1
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e7bd      	b.n	8005fc4 <_dtoa_r+0x65c>
 8006048:	2200      	movs	r2, #0
 800604a:	4b09      	ldr	r3, [pc, #36]	@ (8006070 <_dtoa_r+0x708>)
 800604c:	f7fa fab0 	bl	80005b0 <__aeabi_dmul>
 8006050:	2200      	movs	r2, #0
 8006052:	2300      	movs	r3, #0
 8006054:	4604      	mov	r4, r0
 8006056:	460d      	mov	r5, r1
 8006058:	f7fa fd12 	bl	8000a80 <__aeabi_dcmpeq>
 800605c:	2800      	cmp	r0, #0
 800605e:	f43f aebc 	beq.w	8005dda <_dtoa_r+0x472>
 8006062:	e6f1      	b.n	8005e48 <_dtoa_r+0x4e0>
 8006064:	08007b28 	.word	0x08007b28
 8006068:	3fe00000 	.word	0x3fe00000
 800606c:	3ff00000 	.word	0x3ff00000
 8006070:	40240000 	.word	0x40240000
 8006074:	40140000 	.word	0x40140000
 8006078:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800607a:	2a00      	cmp	r2, #0
 800607c:	f000 80db 	beq.w	8006236 <_dtoa_r+0x8ce>
 8006080:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006082:	2a01      	cmp	r2, #1
 8006084:	f300 80bf 	bgt.w	8006206 <_dtoa_r+0x89e>
 8006088:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800608a:	2a00      	cmp	r2, #0
 800608c:	f000 80b7 	beq.w	80061fe <_dtoa_r+0x896>
 8006090:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006094:	4646      	mov	r6, r8
 8006096:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800609a:	2101      	movs	r1, #1
 800609c:	441a      	add	r2, r3
 800609e:	4658      	mov	r0, fp
 80060a0:	4498      	add	r8, r3
 80060a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80060a4:	f000 fc1a 	bl	80068dc <__i2b>
 80060a8:	4605      	mov	r5, r0
 80060aa:	b15e      	cbz	r6, 80060c4 <_dtoa_r+0x75c>
 80060ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd08      	ble.n	80060c4 <_dtoa_r+0x75c>
 80060b2:	42b3      	cmp	r3, r6
 80060b4:	bfa8      	it	ge
 80060b6:	4633      	movge	r3, r6
 80060b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060ba:	eba8 0803 	sub.w	r8, r8, r3
 80060be:	1af6      	subs	r6, r6, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060c6:	b1f3      	cbz	r3, 8006106 <_dtoa_r+0x79e>
 80060c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80b7 	beq.w	800623e <_dtoa_r+0x8d6>
 80060d0:	b18c      	cbz	r4, 80060f6 <_dtoa_r+0x78e>
 80060d2:	4629      	mov	r1, r5
 80060d4:	4622      	mov	r2, r4
 80060d6:	4658      	mov	r0, fp
 80060d8:	f000 fcbe 	bl	8006a58 <__pow5mult>
 80060dc:	464a      	mov	r2, r9
 80060de:	4601      	mov	r1, r0
 80060e0:	4605      	mov	r5, r0
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 fc10 	bl	8006908 <__multiply>
 80060e8:	4649      	mov	r1, r9
 80060ea:	9004      	str	r0, [sp, #16]
 80060ec:	4658      	mov	r0, fp
 80060ee:	f000 fb41 	bl	8006774 <_Bfree>
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	4699      	mov	r9, r3
 80060f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f8:	1b1a      	subs	r2, r3, r4
 80060fa:	d004      	beq.n	8006106 <_dtoa_r+0x79e>
 80060fc:	4649      	mov	r1, r9
 80060fe:	4658      	mov	r0, fp
 8006100:	f000 fcaa 	bl	8006a58 <__pow5mult>
 8006104:	4681      	mov	r9, r0
 8006106:	2101      	movs	r1, #1
 8006108:	4658      	mov	r0, fp
 800610a:	f000 fbe7 	bl	80068dc <__i2b>
 800610e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006110:	4604      	mov	r4, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 81c9 	beq.w	80064aa <_dtoa_r+0xb42>
 8006118:	461a      	mov	r2, r3
 800611a:	4601      	mov	r1, r0
 800611c:	4658      	mov	r0, fp
 800611e:	f000 fc9b 	bl	8006a58 <__pow5mult>
 8006122:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006124:	4604      	mov	r4, r0
 8006126:	2b01      	cmp	r3, #1
 8006128:	f300 808f 	bgt.w	800624a <_dtoa_r+0x8e2>
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 8087 	bne.w	8006242 <_dtoa_r+0x8da>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 8083 	bne.w	8006246 <_dtoa_r+0x8de>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006146:	0d1b      	lsrs	r3, r3, #20
 8006148:	051b      	lsls	r3, r3, #20
 800614a:	b12b      	cbz	r3, 8006158 <_dtoa_r+0x7f0>
 800614c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614e:	f108 0801 	add.w	r8, r8, #1
 8006152:	3301      	adds	r3, #1
 8006154:	9309      	str	r3, [sp, #36]	@ 0x24
 8006156:	2301      	movs	r3, #1
 8006158:	930a      	str	r3, [sp, #40]	@ 0x28
 800615a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 81aa 	beq.w	80064b6 <_dtoa_r+0xb4e>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006168:	6918      	ldr	r0, [r3, #16]
 800616a:	f000 fb6b 	bl	8006844 <__hi0bits>
 800616e:	f1c0 0020 	rsb	r0, r0, #32
 8006172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006174:	4418      	add	r0, r3
 8006176:	f010 001f 	ands.w	r0, r0, #31
 800617a:	d071      	beq.n	8006260 <_dtoa_r+0x8f8>
 800617c:	f1c0 0320 	rsb	r3, r0, #32
 8006180:	2b04      	cmp	r3, #4
 8006182:	dd65      	ble.n	8006250 <_dtoa_r+0x8e8>
 8006184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006186:	f1c0 001c 	rsb	r0, r0, #28
 800618a:	4403      	add	r3, r0
 800618c:	4480      	add	r8, r0
 800618e:	4406      	add	r6, r0
 8006190:	9309      	str	r3, [sp, #36]	@ 0x24
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	dd05      	ble.n	80061a4 <_dtoa_r+0x83c>
 8006198:	4649      	mov	r1, r9
 800619a:	4642      	mov	r2, r8
 800619c:	4658      	mov	r0, fp
 800619e:	f000 fcb5 	bl	8006b0c <__lshift>
 80061a2:	4681      	mov	r9, r0
 80061a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	dd05      	ble.n	80061b6 <_dtoa_r+0x84e>
 80061aa:	4621      	mov	r1, r4
 80061ac:	461a      	mov	r2, r3
 80061ae:	4658      	mov	r0, fp
 80061b0:	f000 fcac 	bl	8006b0c <__lshift>
 80061b4:	4604      	mov	r4, r0
 80061b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d053      	beq.n	8006264 <_dtoa_r+0x8fc>
 80061bc:	4621      	mov	r1, r4
 80061be:	4648      	mov	r0, r9
 80061c0:	f000 fd10 	bl	8006be4 <__mcmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	da4d      	bge.n	8006264 <_dtoa_r+0x8fc>
 80061c8:	1e7b      	subs	r3, r7, #1
 80061ca:	4649      	mov	r1, r9
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	220a      	movs	r2, #10
 80061d0:	2300      	movs	r3, #0
 80061d2:	4658      	mov	r0, fp
 80061d4:	f000 faf0 	bl	80067b8 <__multadd>
 80061d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061da:	4681      	mov	r9, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 816c 	beq.w	80064ba <_dtoa_r+0xb52>
 80061e2:	2300      	movs	r3, #0
 80061e4:	4629      	mov	r1, r5
 80061e6:	220a      	movs	r2, #10
 80061e8:	4658      	mov	r0, fp
 80061ea:	f000 fae5 	bl	80067b8 <__multadd>
 80061ee:	9b08      	ldr	r3, [sp, #32]
 80061f0:	4605      	mov	r5, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	dc61      	bgt.n	80062ba <_dtoa_r+0x952>
 80061f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	dc3b      	bgt.n	8006274 <_dtoa_r+0x90c>
 80061fc:	e05d      	b.n	80062ba <_dtoa_r+0x952>
 80061fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006200:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006204:	e746      	b.n	8006094 <_dtoa_r+0x72c>
 8006206:	9b07      	ldr	r3, [sp, #28]
 8006208:	1e5c      	subs	r4, r3, #1
 800620a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800620c:	42a3      	cmp	r3, r4
 800620e:	bfbf      	itttt	lt
 8006210:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006212:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006214:	1ae3      	sublt	r3, r4, r3
 8006216:	18d2      	addlt	r2, r2, r3
 8006218:	bfa8      	it	ge
 800621a:	1b1c      	subge	r4, r3, r4
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	bfbe      	ittt	lt
 8006220:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006222:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006224:	2400      	movlt	r4, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	bfb5      	itete	lt
 800622a:	eba8 0603 	sublt.w	r6, r8, r3
 800622e:	4646      	movge	r6, r8
 8006230:	2300      	movlt	r3, #0
 8006232:	9b07      	ldrge	r3, [sp, #28]
 8006234:	e730      	b.n	8006098 <_dtoa_r+0x730>
 8006236:	4646      	mov	r6, r8
 8006238:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800623a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800623c:	e735      	b.n	80060aa <_dtoa_r+0x742>
 800623e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006240:	e75c      	b.n	80060fc <_dtoa_r+0x794>
 8006242:	2300      	movs	r3, #0
 8006244:	e788      	b.n	8006158 <_dtoa_r+0x7f0>
 8006246:	9b02      	ldr	r3, [sp, #8]
 8006248:	e786      	b.n	8006158 <_dtoa_r+0x7f0>
 800624a:	2300      	movs	r3, #0
 800624c:	930a      	str	r3, [sp, #40]	@ 0x28
 800624e:	e788      	b.n	8006162 <_dtoa_r+0x7fa>
 8006250:	d09f      	beq.n	8006192 <_dtoa_r+0x82a>
 8006252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006254:	331c      	adds	r3, #28
 8006256:	441a      	add	r2, r3
 8006258:	4498      	add	r8, r3
 800625a:	441e      	add	r6, r3
 800625c:	9209      	str	r2, [sp, #36]	@ 0x24
 800625e:	e798      	b.n	8006192 <_dtoa_r+0x82a>
 8006260:	4603      	mov	r3, r0
 8006262:	e7f6      	b.n	8006252 <_dtoa_r+0x8ea>
 8006264:	9b07      	ldr	r3, [sp, #28]
 8006266:	9704      	str	r7, [sp, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	dc20      	bgt.n	80062ae <_dtoa_r+0x946>
 800626c:	9308      	str	r3, [sp, #32]
 800626e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006270:	2b02      	cmp	r3, #2
 8006272:	dd1e      	ble.n	80062b2 <_dtoa_r+0x94a>
 8006274:	9b08      	ldr	r3, [sp, #32]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f47f aebc 	bne.w	8005ff4 <_dtoa_r+0x68c>
 800627c:	4621      	mov	r1, r4
 800627e:	2205      	movs	r2, #5
 8006280:	4658      	mov	r0, fp
 8006282:	f000 fa99 	bl	80067b8 <__multadd>
 8006286:	4601      	mov	r1, r0
 8006288:	4604      	mov	r4, r0
 800628a:	4648      	mov	r0, r9
 800628c:	f000 fcaa 	bl	8006be4 <__mcmp>
 8006290:	2800      	cmp	r0, #0
 8006292:	f77f aeaf 	ble.w	8005ff4 <_dtoa_r+0x68c>
 8006296:	2331      	movs	r3, #49	@ 0x31
 8006298:	4656      	mov	r6, sl
 800629a:	f806 3b01 	strb.w	r3, [r6], #1
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	3301      	adds	r3, #1
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	e6aa      	b.n	8005ffc <_dtoa_r+0x694>
 80062a6:	9c07      	ldr	r4, [sp, #28]
 80062a8:	9704      	str	r7, [sp, #16]
 80062aa:	4625      	mov	r5, r4
 80062ac:	e7f3      	b.n	8006296 <_dtoa_r+0x92e>
 80062ae:	9b07      	ldr	r3, [sp, #28]
 80062b0:	9308      	str	r3, [sp, #32]
 80062b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8104 	beq.w	80064c2 <_dtoa_r+0xb5a>
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	dd05      	ble.n	80062ca <_dtoa_r+0x962>
 80062be:	4629      	mov	r1, r5
 80062c0:	4632      	mov	r2, r6
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 fc22 	bl	8006b0c <__lshift>
 80062c8:	4605      	mov	r5, r0
 80062ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05a      	beq.n	8006386 <_dtoa_r+0xa1e>
 80062d0:	4658      	mov	r0, fp
 80062d2:	6869      	ldr	r1, [r5, #4]
 80062d4:	f000 fa0e 	bl	80066f4 <_Balloc>
 80062d8:	4606      	mov	r6, r0
 80062da:	b928      	cbnz	r0, 80062e8 <_dtoa_r+0x980>
 80062dc:	4602      	mov	r2, r0
 80062de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80062e2:	4b83      	ldr	r3, [pc, #524]	@ (80064f0 <_dtoa_r+0xb88>)
 80062e4:	f7ff bb54 	b.w	8005990 <_dtoa_r+0x28>
 80062e8:	692a      	ldr	r2, [r5, #16]
 80062ea:	f105 010c 	add.w	r1, r5, #12
 80062ee:	3202      	adds	r2, #2
 80062f0:	0092      	lsls	r2, r2, #2
 80062f2:	300c      	adds	r0, #12
 80062f4:	f000 ffa8 	bl	8007248 <memcpy>
 80062f8:	2201      	movs	r2, #1
 80062fa:	4631      	mov	r1, r6
 80062fc:	4658      	mov	r0, fp
 80062fe:	f000 fc05 	bl	8006b0c <__lshift>
 8006302:	462f      	mov	r7, r5
 8006304:	4605      	mov	r5, r0
 8006306:	f10a 0301 	add.w	r3, sl, #1
 800630a:	9307      	str	r3, [sp, #28]
 800630c:	9b08      	ldr	r3, [sp, #32]
 800630e:	4453      	add	r3, sl
 8006310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006312:	9b02      	ldr	r3, [sp, #8]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	930a      	str	r3, [sp, #40]	@ 0x28
 800631a:	9b07      	ldr	r3, [sp, #28]
 800631c:	4621      	mov	r1, r4
 800631e:	3b01      	subs	r3, #1
 8006320:	4648      	mov	r0, r9
 8006322:	9302      	str	r3, [sp, #8]
 8006324:	f7ff fa95 	bl	8005852 <quorem>
 8006328:	4639      	mov	r1, r7
 800632a:	9008      	str	r0, [sp, #32]
 800632c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006330:	4648      	mov	r0, r9
 8006332:	f000 fc57 	bl	8006be4 <__mcmp>
 8006336:	462a      	mov	r2, r5
 8006338:	9009      	str	r0, [sp, #36]	@ 0x24
 800633a:	4621      	mov	r1, r4
 800633c:	4658      	mov	r0, fp
 800633e:	f000 fc6d 	bl	8006c1c <__mdiff>
 8006342:	68c2      	ldr	r2, [r0, #12]
 8006344:	4606      	mov	r6, r0
 8006346:	bb02      	cbnz	r2, 800638a <_dtoa_r+0xa22>
 8006348:	4601      	mov	r1, r0
 800634a:	4648      	mov	r0, r9
 800634c:	f000 fc4a 	bl	8006be4 <__mcmp>
 8006350:	4602      	mov	r2, r0
 8006352:	4631      	mov	r1, r6
 8006354:	4658      	mov	r0, fp
 8006356:	920c      	str	r2, [sp, #48]	@ 0x30
 8006358:	f000 fa0c 	bl	8006774 <_Bfree>
 800635c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800635e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006360:	9e07      	ldr	r6, [sp, #28]
 8006362:	ea43 0102 	orr.w	r1, r3, r2
 8006366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006368:	4319      	orrs	r1, r3
 800636a:	d110      	bne.n	800638e <_dtoa_r+0xa26>
 800636c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006370:	d029      	beq.n	80063c6 <_dtoa_r+0xa5e>
 8006372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd02      	ble.n	800637e <_dtoa_r+0xa16>
 8006378:	9b08      	ldr	r3, [sp, #32]
 800637a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	f883 8000 	strb.w	r8, [r3]
 8006384:	e63b      	b.n	8005ffe <_dtoa_r+0x696>
 8006386:	4628      	mov	r0, r5
 8006388:	e7bb      	b.n	8006302 <_dtoa_r+0x99a>
 800638a:	2201      	movs	r2, #1
 800638c:	e7e1      	b.n	8006352 <_dtoa_r+0x9ea>
 800638e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	db04      	blt.n	800639e <_dtoa_r+0xa36>
 8006394:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006396:	430b      	orrs	r3, r1
 8006398:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800639a:	430b      	orrs	r3, r1
 800639c:	d120      	bne.n	80063e0 <_dtoa_r+0xa78>
 800639e:	2a00      	cmp	r2, #0
 80063a0:	dded      	ble.n	800637e <_dtoa_r+0xa16>
 80063a2:	4649      	mov	r1, r9
 80063a4:	2201      	movs	r2, #1
 80063a6:	4658      	mov	r0, fp
 80063a8:	f000 fbb0 	bl	8006b0c <__lshift>
 80063ac:	4621      	mov	r1, r4
 80063ae:	4681      	mov	r9, r0
 80063b0:	f000 fc18 	bl	8006be4 <__mcmp>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	dc03      	bgt.n	80063c0 <_dtoa_r+0xa58>
 80063b8:	d1e1      	bne.n	800637e <_dtoa_r+0xa16>
 80063ba:	f018 0f01 	tst.w	r8, #1
 80063be:	d0de      	beq.n	800637e <_dtoa_r+0xa16>
 80063c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063c4:	d1d8      	bne.n	8006378 <_dtoa_r+0xa10>
 80063c6:	2339      	movs	r3, #57	@ 0x39
 80063c8:	9a02      	ldr	r2, [sp, #8]
 80063ca:	7013      	strb	r3, [r2, #0]
 80063cc:	4633      	mov	r3, r6
 80063ce:	461e      	mov	r6, r3
 80063d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	2a39      	cmp	r2, #57	@ 0x39
 80063d8:	d052      	beq.n	8006480 <_dtoa_r+0xb18>
 80063da:	3201      	adds	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e60e      	b.n	8005ffe <_dtoa_r+0x696>
 80063e0:	2a00      	cmp	r2, #0
 80063e2:	dd07      	ble.n	80063f4 <_dtoa_r+0xa8c>
 80063e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063e8:	d0ed      	beq.n	80063c6 <_dtoa_r+0xa5e>
 80063ea:	9a02      	ldr	r2, [sp, #8]
 80063ec:	f108 0301 	add.w	r3, r8, #1
 80063f0:	7013      	strb	r3, [r2, #0]
 80063f2:	e604      	b.n	8005ffe <_dtoa_r+0x696>
 80063f4:	9b07      	ldr	r3, [sp, #28]
 80063f6:	9a07      	ldr	r2, [sp, #28]
 80063f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80063fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063fe:	4293      	cmp	r3, r2
 8006400:	d028      	beq.n	8006454 <_dtoa_r+0xaec>
 8006402:	4649      	mov	r1, r9
 8006404:	2300      	movs	r3, #0
 8006406:	220a      	movs	r2, #10
 8006408:	4658      	mov	r0, fp
 800640a:	f000 f9d5 	bl	80067b8 <__multadd>
 800640e:	42af      	cmp	r7, r5
 8006410:	4681      	mov	r9, r0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	f04f 020a 	mov.w	r2, #10
 800641a:	4639      	mov	r1, r7
 800641c:	4658      	mov	r0, fp
 800641e:	d107      	bne.n	8006430 <_dtoa_r+0xac8>
 8006420:	f000 f9ca 	bl	80067b8 <__multadd>
 8006424:	4607      	mov	r7, r0
 8006426:	4605      	mov	r5, r0
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	3301      	adds	r3, #1
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	e774      	b.n	800631a <_dtoa_r+0x9b2>
 8006430:	f000 f9c2 	bl	80067b8 <__multadd>
 8006434:	4629      	mov	r1, r5
 8006436:	4607      	mov	r7, r0
 8006438:	2300      	movs	r3, #0
 800643a:	220a      	movs	r2, #10
 800643c:	4658      	mov	r0, fp
 800643e:	f000 f9bb 	bl	80067b8 <__multadd>
 8006442:	4605      	mov	r5, r0
 8006444:	e7f0      	b.n	8006428 <_dtoa_r+0xac0>
 8006446:	9b08      	ldr	r3, [sp, #32]
 8006448:	2700      	movs	r7, #0
 800644a:	2b00      	cmp	r3, #0
 800644c:	bfcc      	ite	gt
 800644e:	461e      	movgt	r6, r3
 8006450:	2601      	movle	r6, #1
 8006452:	4456      	add	r6, sl
 8006454:	4649      	mov	r1, r9
 8006456:	2201      	movs	r2, #1
 8006458:	4658      	mov	r0, fp
 800645a:	f000 fb57 	bl	8006b0c <__lshift>
 800645e:	4621      	mov	r1, r4
 8006460:	4681      	mov	r9, r0
 8006462:	f000 fbbf 	bl	8006be4 <__mcmp>
 8006466:	2800      	cmp	r0, #0
 8006468:	dcb0      	bgt.n	80063cc <_dtoa_r+0xa64>
 800646a:	d102      	bne.n	8006472 <_dtoa_r+0xb0a>
 800646c:	f018 0f01 	tst.w	r8, #1
 8006470:	d1ac      	bne.n	80063cc <_dtoa_r+0xa64>
 8006472:	4633      	mov	r3, r6
 8006474:	461e      	mov	r6, r3
 8006476:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800647a:	2a30      	cmp	r2, #48	@ 0x30
 800647c:	d0fa      	beq.n	8006474 <_dtoa_r+0xb0c>
 800647e:	e5be      	b.n	8005ffe <_dtoa_r+0x696>
 8006480:	459a      	cmp	sl, r3
 8006482:	d1a4      	bne.n	80063ce <_dtoa_r+0xa66>
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	3301      	adds	r3, #1
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	2331      	movs	r3, #49	@ 0x31
 800648c:	f88a 3000 	strb.w	r3, [sl]
 8006490:	e5b5      	b.n	8005ffe <_dtoa_r+0x696>
 8006492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006494:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80064f4 <_dtoa_r+0xb8c>
 8006498:	b11b      	cbz	r3, 80064a2 <_dtoa_r+0xb3a>
 800649a:	f10a 0308 	add.w	r3, sl, #8
 800649e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	4650      	mov	r0, sl
 80064a4:	b017      	add	sp, #92	@ 0x5c
 80064a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	f77f ae3d 	ble.w	800612c <_dtoa_r+0x7c4>
 80064b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064b6:	2001      	movs	r0, #1
 80064b8:	e65b      	b.n	8006172 <_dtoa_r+0x80a>
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f77f aed6 	ble.w	800626e <_dtoa_r+0x906>
 80064c2:	4656      	mov	r6, sl
 80064c4:	4621      	mov	r1, r4
 80064c6:	4648      	mov	r0, r9
 80064c8:	f7ff f9c3 	bl	8005852 <quorem>
 80064cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064d0:	9b08      	ldr	r3, [sp, #32]
 80064d2:	f806 8b01 	strb.w	r8, [r6], #1
 80064d6:	eba6 020a 	sub.w	r2, r6, sl
 80064da:	4293      	cmp	r3, r2
 80064dc:	ddb3      	ble.n	8006446 <_dtoa_r+0xade>
 80064de:	4649      	mov	r1, r9
 80064e0:	2300      	movs	r3, #0
 80064e2:	220a      	movs	r2, #10
 80064e4:	4658      	mov	r0, fp
 80064e6:	f000 f967 	bl	80067b8 <__multadd>
 80064ea:	4681      	mov	r9, r0
 80064ec:	e7ea      	b.n	80064c4 <_dtoa_r+0xb5c>
 80064ee:	bf00      	nop
 80064f0:	08007a84 	.word	0x08007a84
 80064f4:	08007a08 	.word	0x08007a08

080064f8 <_free_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4605      	mov	r5, r0
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d040      	beq.n	8006582 <_free_r+0x8a>
 8006500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006504:	1f0c      	subs	r4, r1, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfb8      	it	lt
 800650a:	18e4      	addlt	r4, r4, r3
 800650c:	f000 f8e6 	bl	80066dc <__malloc_lock>
 8006510:	4a1c      	ldr	r2, [pc, #112]	@ (8006584 <_free_r+0x8c>)
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	b933      	cbnz	r3, 8006524 <_free_r+0x2c>
 8006516:	6063      	str	r3, [r4, #4]
 8006518:	6014      	str	r4, [r2, #0]
 800651a:	4628      	mov	r0, r5
 800651c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006520:	f000 b8e2 	b.w	80066e8 <__malloc_unlock>
 8006524:	42a3      	cmp	r3, r4
 8006526:	d908      	bls.n	800653a <_free_r+0x42>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	1821      	adds	r1, r4, r0
 800652c:	428b      	cmp	r3, r1
 800652e:	bf01      	itttt	eq
 8006530:	6819      	ldreq	r1, [r3, #0]
 8006532:	685b      	ldreq	r3, [r3, #4]
 8006534:	1809      	addeq	r1, r1, r0
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	e7ed      	b.n	8006516 <_free_r+0x1e>
 800653a:	461a      	mov	r2, r3
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b10b      	cbz	r3, 8006544 <_free_r+0x4c>
 8006540:	42a3      	cmp	r3, r4
 8006542:	d9fa      	bls.n	800653a <_free_r+0x42>
 8006544:	6811      	ldr	r1, [r2, #0]
 8006546:	1850      	adds	r0, r2, r1
 8006548:	42a0      	cmp	r0, r4
 800654a:	d10b      	bne.n	8006564 <_free_r+0x6c>
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	4401      	add	r1, r0
 8006550:	1850      	adds	r0, r2, r1
 8006552:	4283      	cmp	r3, r0
 8006554:	6011      	str	r1, [r2, #0]
 8006556:	d1e0      	bne.n	800651a <_free_r+0x22>
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4408      	add	r0, r1
 800655e:	6010      	str	r0, [r2, #0]
 8006560:	6053      	str	r3, [r2, #4]
 8006562:	e7da      	b.n	800651a <_free_r+0x22>
 8006564:	d902      	bls.n	800656c <_free_r+0x74>
 8006566:	230c      	movs	r3, #12
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	e7d6      	b.n	800651a <_free_r+0x22>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	1821      	adds	r1, r4, r0
 8006570:	428b      	cmp	r3, r1
 8006572:	bf01      	itttt	eq
 8006574:	6819      	ldreq	r1, [r3, #0]
 8006576:	685b      	ldreq	r3, [r3, #4]
 8006578:	1809      	addeq	r1, r1, r0
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	6054      	str	r4, [r2, #4]
 8006580:	e7cb      	b.n	800651a <_free_r+0x22>
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000554 	.word	0x20000554

08006588 <malloc>:
 8006588:	4b02      	ldr	r3, [pc, #8]	@ (8006594 <malloc+0xc>)
 800658a:	4601      	mov	r1, r0
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f000 b825 	b.w	80065dc <_malloc_r>
 8006592:	bf00      	nop
 8006594:	20000018 	.word	0x20000018

08006598 <sbrk_aligned>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4e0f      	ldr	r6, [pc, #60]	@ (80065d8 <sbrk_aligned+0x40>)
 800659c:	460c      	mov	r4, r1
 800659e:	6831      	ldr	r1, [r6, #0]
 80065a0:	4605      	mov	r5, r0
 80065a2:	b911      	cbnz	r1, 80065aa <sbrk_aligned+0x12>
 80065a4:	f000 fe40 	bl	8007228 <_sbrk_r>
 80065a8:	6030      	str	r0, [r6, #0]
 80065aa:	4621      	mov	r1, r4
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 fe3b 	bl	8007228 <_sbrk_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d103      	bne.n	80065be <sbrk_aligned+0x26>
 80065b6:	f04f 34ff 	mov.w	r4, #4294967295
 80065ba:	4620      	mov	r0, r4
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	1cc4      	adds	r4, r0, #3
 80065c0:	f024 0403 	bic.w	r4, r4, #3
 80065c4:	42a0      	cmp	r0, r4
 80065c6:	d0f8      	beq.n	80065ba <sbrk_aligned+0x22>
 80065c8:	1a21      	subs	r1, r4, r0
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 fe2c 	bl	8007228 <_sbrk_r>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d1f2      	bne.n	80065ba <sbrk_aligned+0x22>
 80065d4:	e7ef      	b.n	80065b6 <sbrk_aligned+0x1e>
 80065d6:	bf00      	nop
 80065d8:	20000550 	.word	0x20000550

080065dc <_malloc_r>:
 80065dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	1ccd      	adds	r5, r1, #3
 80065e2:	f025 0503 	bic.w	r5, r5, #3
 80065e6:	3508      	adds	r5, #8
 80065e8:	2d0c      	cmp	r5, #12
 80065ea:	bf38      	it	cc
 80065ec:	250c      	movcc	r5, #12
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	4606      	mov	r6, r0
 80065f2:	db01      	blt.n	80065f8 <_malloc_r+0x1c>
 80065f4:	42a9      	cmp	r1, r5
 80065f6:	d904      	bls.n	8006602 <_malloc_r+0x26>
 80065f8:	230c      	movs	r3, #12
 80065fa:	6033      	str	r3, [r6, #0]
 80065fc:	2000      	movs	r0, #0
 80065fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066d8 <_malloc_r+0xfc>
 8006606:	f000 f869 	bl	80066dc <__malloc_lock>
 800660a:	f8d8 3000 	ldr.w	r3, [r8]
 800660e:	461c      	mov	r4, r3
 8006610:	bb44      	cbnz	r4, 8006664 <_malloc_r+0x88>
 8006612:	4629      	mov	r1, r5
 8006614:	4630      	mov	r0, r6
 8006616:	f7ff ffbf 	bl	8006598 <sbrk_aligned>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	4604      	mov	r4, r0
 800661e:	d158      	bne.n	80066d2 <_malloc_r+0xf6>
 8006620:	f8d8 4000 	ldr.w	r4, [r8]
 8006624:	4627      	mov	r7, r4
 8006626:	2f00      	cmp	r7, #0
 8006628:	d143      	bne.n	80066b2 <_malloc_r+0xd6>
 800662a:	2c00      	cmp	r4, #0
 800662c:	d04b      	beq.n	80066c6 <_malloc_r+0xea>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	4639      	mov	r1, r7
 8006632:	4630      	mov	r0, r6
 8006634:	eb04 0903 	add.w	r9, r4, r3
 8006638:	f000 fdf6 	bl	8007228 <_sbrk_r>
 800663c:	4581      	cmp	r9, r0
 800663e:	d142      	bne.n	80066c6 <_malloc_r+0xea>
 8006640:	6821      	ldr	r1, [r4, #0]
 8006642:	4630      	mov	r0, r6
 8006644:	1a6d      	subs	r5, r5, r1
 8006646:	4629      	mov	r1, r5
 8006648:	f7ff ffa6 	bl	8006598 <sbrk_aligned>
 800664c:	3001      	adds	r0, #1
 800664e:	d03a      	beq.n	80066c6 <_malloc_r+0xea>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	442b      	add	r3, r5
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	f8d8 3000 	ldr.w	r3, [r8]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	bb62      	cbnz	r2, 80066b8 <_malloc_r+0xdc>
 800665e:	f8c8 7000 	str.w	r7, [r8]
 8006662:	e00f      	b.n	8006684 <_malloc_r+0xa8>
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	1b52      	subs	r2, r2, r5
 8006668:	d420      	bmi.n	80066ac <_malloc_r+0xd0>
 800666a:	2a0b      	cmp	r2, #11
 800666c:	d917      	bls.n	800669e <_malloc_r+0xc2>
 800666e:	1961      	adds	r1, r4, r5
 8006670:	42a3      	cmp	r3, r4
 8006672:	6025      	str	r5, [r4, #0]
 8006674:	bf18      	it	ne
 8006676:	6059      	strne	r1, [r3, #4]
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	bf08      	it	eq
 800667c:	f8c8 1000 	streq.w	r1, [r8]
 8006680:	5162      	str	r2, [r4, r5]
 8006682:	604b      	str	r3, [r1, #4]
 8006684:	4630      	mov	r0, r6
 8006686:	f000 f82f 	bl	80066e8 <__malloc_unlock>
 800668a:	f104 000b 	add.w	r0, r4, #11
 800668e:	1d23      	adds	r3, r4, #4
 8006690:	f020 0007 	bic.w	r0, r0, #7
 8006694:	1ac2      	subs	r2, r0, r3
 8006696:	bf1c      	itt	ne
 8006698:	1a1b      	subne	r3, r3, r0
 800669a:	50a3      	strne	r3, [r4, r2]
 800669c:	e7af      	b.n	80065fe <_malloc_r+0x22>
 800669e:	6862      	ldr	r2, [r4, #4]
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	bf0c      	ite	eq
 80066a4:	f8c8 2000 	streq.w	r2, [r8]
 80066a8:	605a      	strne	r2, [r3, #4]
 80066aa:	e7eb      	b.n	8006684 <_malloc_r+0xa8>
 80066ac:	4623      	mov	r3, r4
 80066ae:	6864      	ldr	r4, [r4, #4]
 80066b0:	e7ae      	b.n	8006610 <_malloc_r+0x34>
 80066b2:	463c      	mov	r4, r7
 80066b4:	687f      	ldr	r7, [r7, #4]
 80066b6:	e7b6      	b.n	8006626 <_malloc_r+0x4a>
 80066b8:	461a      	mov	r2, r3
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	42a3      	cmp	r3, r4
 80066be:	d1fb      	bne.n	80066b8 <_malloc_r+0xdc>
 80066c0:	2300      	movs	r3, #0
 80066c2:	6053      	str	r3, [r2, #4]
 80066c4:	e7de      	b.n	8006684 <_malloc_r+0xa8>
 80066c6:	230c      	movs	r3, #12
 80066c8:	4630      	mov	r0, r6
 80066ca:	6033      	str	r3, [r6, #0]
 80066cc:	f000 f80c 	bl	80066e8 <__malloc_unlock>
 80066d0:	e794      	b.n	80065fc <_malloc_r+0x20>
 80066d2:	6005      	str	r5, [r0, #0]
 80066d4:	e7d6      	b.n	8006684 <_malloc_r+0xa8>
 80066d6:	bf00      	nop
 80066d8:	20000554 	.word	0x20000554

080066dc <__malloc_lock>:
 80066dc:	4801      	ldr	r0, [pc, #4]	@ (80066e4 <__malloc_lock+0x8>)
 80066de:	f7ff b8a8 	b.w	8005832 <__retarget_lock_acquire_recursive>
 80066e2:	bf00      	nop
 80066e4:	2000054c 	.word	0x2000054c

080066e8 <__malloc_unlock>:
 80066e8:	4801      	ldr	r0, [pc, #4]	@ (80066f0 <__malloc_unlock+0x8>)
 80066ea:	f7ff b8a3 	b.w	8005834 <__retarget_lock_release_recursive>
 80066ee:	bf00      	nop
 80066f0:	2000054c 	.word	0x2000054c

080066f4 <_Balloc>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	69c6      	ldr	r6, [r0, #28]
 80066f8:	4604      	mov	r4, r0
 80066fa:	460d      	mov	r5, r1
 80066fc:	b976      	cbnz	r6, 800671c <_Balloc+0x28>
 80066fe:	2010      	movs	r0, #16
 8006700:	f7ff ff42 	bl	8006588 <malloc>
 8006704:	4602      	mov	r2, r0
 8006706:	61e0      	str	r0, [r4, #28]
 8006708:	b920      	cbnz	r0, 8006714 <_Balloc+0x20>
 800670a:	216b      	movs	r1, #107	@ 0x6b
 800670c:	4b17      	ldr	r3, [pc, #92]	@ (800676c <_Balloc+0x78>)
 800670e:	4818      	ldr	r0, [pc, #96]	@ (8006770 <_Balloc+0x7c>)
 8006710:	f000 fda8 	bl	8007264 <__assert_func>
 8006714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006718:	6006      	str	r6, [r0, #0]
 800671a:	60c6      	str	r6, [r0, #12]
 800671c:	69e6      	ldr	r6, [r4, #28]
 800671e:	68f3      	ldr	r3, [r6, #12]
 8006720:	b183      	cbz	r3, 8006744 <_Balloc+0x50>
 8006722:	69e3      	ldr	r3, [r4, #28]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800672a:	b9b8      	cbnz	r0, 800675c <_Balloc+0x68>
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f605 	lsl.w	r6, r1, r5
 8006732:	1d72      	adds	r2, r6, #5
 8006734:	4620      	mov	r0, r4
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	f000 fdb2 	bl	80072a0 <_calloc_r>
 800673c:	b160      	cbz	r0, 8006758 <_Balloc+0x64>
 800673e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006742:	e00e      	b.n	8006762 <_Balloc+0x6e>
 8006744:	2221      	movs	r2, #33	@ 0x21
 8006746:	2104      	movs	r1, #4
 8006748:	4620      	mov	r0, r4
 800674a:	f000 fda9 	bl	80072a0 <_calloc_r>
 800674e:	69e3      	ldr	r3, [r4, #28]
 8006750:	60f0      	str	r0, [r6, #12]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e4      	bne.n	8006722 <_Balloc+0x2e>
 8006758:	2000      	movs	r0, #0
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	6802      	ldr	r2, [r0, #0]
 800675e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006762:	2300      	movs	r3, #0
 8006764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006768:	e7f7      	b.n	800675a <_Balloc+0x66>
 800676a:	bf00      	nop
 800676c:	08007a15 	.word	0x08007a15
 8006770:	08007a95 	.word	0x08007a95

08006774 <_Bfree>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	69c6      	ldr	r6, [r0, #28]
 8006778:	4605      	mov	r5, r0
 800677a:	460c      	mov	r4, r1
 800677c:	b976      	cbnz	r6, 800679c <_Bfree+0x28>
 800677e:	2010      	movs	r0, #16
 8006780:	f7ff ff02 	bl	8006588 <malloc>
 8006784:	4602      	mov	r2, r0
 8006786:	61e8      	str	r0, [r5, #28]
 8006788:	b920      	cbnz	r0, 8006794 <_Bfree+0x20>
 800678a:	218f      	movs	r1, #143	@ 0x8f
 800678c:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <_Bfree+0x3c>)
 800678e:	4809      	ldr	r0, [pc, #36]	@ (80067b4 <_Bfree+0x40>)
 8006790:	f000 fd68 	bl	8007264 <__assert_func>
 8006794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006798:	6006      	str	r6, [r0, #0]
 800679a:	60c6      	str	r6, [r0, #12]
 800679c:	b13c      	cbz	r4, 80067ae <_Bfree+0x3a>
 800679e:	69eb      	ldr	r3, [r5, #28]
 80067a0:	6862      	ldr	r2, [r4, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a8:	6021      	str	r1, [r4, #0]
 80067aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	08007a15 	.word	0x08007a15
 80067b4:	08007a95 	.word	0x08007a95

080067b8 <__multadd>:
 80067b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	4607      	mov	r7, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	461e      	mov	r6, r3
 80067c2:	2000      	movs	r0, #0
 80067c4:	690d      	ldr	r5, [r1, #16]
 80067c6:	f101 0c14 	add.w	ip, r1, #20
 80067ca:	f8dc 3000 	ldr.w	r3, [ip]
 80067ce:	3001      	adds	r0, #1
 80067d0:	b299      	uxth	r1, r3
 80067d2:	fb02 6101 	mla	r1, r2, r1, r6
 80067d6:	0c1e      	lsrs	r6, r3, #16
 80067d8:	0c0b      	lsrs	r3, r1, #16
 80067da:	fb02 3306 	mla	r3, r2, r6, r3
 80067de:	b289      	uxth	r1, r1
 80067e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067e4:	4285      	cmp	r5, r0
 80067e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067ea:	f84c 1b04 	str.w	r1, [ip], #4
 80067ee:	dcec      	bgt.n	80067ca <__multadd+0x12>
 80067f0:	b30e      	cbz	r6, 8006836 <__multadd+0x7e>
 80067f2:	68a3      	ldr	r3, [r4, #8]
 80067f4:	42ab      	cmp	r3, r5
 80067f6:	dc19      	bgt.n	800682c <__multadd+0x74>
 80067f8:	6861      	ldr	r1, [r4, #4]
 80067fa:	4638      	mov	r0, r7
 80067fc:	3101      	adds	r1, #1
 80067fe:	f7ff ff79 	bl	80066f4 <_Balloc>
 8006802:	4680      	mov	r8, r0
 8006804:	b928      	cbnz	r0, 8006812 <__multadd+0x5a>
 8006806:	4602      	mov	r2, r0
 8006808:	21ba      	movs	r1, #186	@ 0xba
 800680a:	4b0c      	ldr	r3, [pc, #48]	@ (800683c <__multadd+0x84>)
 800680c:	480c      	ldr	r0, [pc, #48]	@ (8006840 <__multadd+0x88>)
 800680e:	f000 fd29 	bl	8007264 <__assert_func>
 8006812:	6922      	ldr	r2, [r4, #16]
 8006814:	f104 010c 	add.w	r1, r4, #12
 8006818:	3202      	adds	r2, #2
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	300c      	adds	r0, #12
 800681e:	f000 fd13 	bl	8007248 <memcpy>
 8006822:	4621      	mov	r1, r4
 8006824:	4638      	mov	r0, r7
 8006826:	f7ff ffa5 	bl	8006774 <_Bfree>
 800682a:	4644      	mov	r4, r8
 800682c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006830:	3501      	adds	r5, #1
 8006832:	615e      	str	r6, [r3, #20]
 8006834:	6125      	str	r5, [r4, #16]
 8006836:	4620      	mov	r0, r4
 8006838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800683c:	08007a84 	.word	0x08007a84
 8006840:	08007a95 	.word	0x08007a95

08006844 <__hi0bits>:
 8006844:	4603      	mov	r3, r0
 8006846:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800684a:	bf3a      	itte	cc
 800684c:	0403      	lslcc	r3, r0, #16
 800684e:	2010      	movcc	r0, #16
 8006850:	2000      	movcs	r0, #0
 8006852:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006856:	bf3c      	itt	cc
 8006858:	021b      	lslcc	r3, r3, #8
 800685a:	3008      	addcc	r0, #8
 800685c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006860:	bf3c      	itt	cc
 8006862:	011b      	lslcc	r3, r3, #4
 8006864:	3004      	addcc	r0, #4
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686a:	bf3c      	itt	cc
 800686c:	009b      	lslcc	r3, r3, #2
 800686e:	3002      	addcc	r0, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	db05      	blt.n	8006880 <__hi0bits+0x3c>
 8006874:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006878:	f100 0001 	add.w	r0, r0, #1
 800687c:	bf08      	it	eq
 800687e:	2020      	moveq	r0, #32
 8006880:	4770      	bx	lr

08006882 <__lo0bits>:
 8006882:	6803      	ldr	r3, [r0, #0]
 8006884:	4602      	mov	r2, r0
 8006886:	f013 0007 	ands.w	r0, r3, #7
 800688a:	d00b      	beq.n	80068a4 <__lo0bits+0x22>
 800688c:	07d9      	lsls	r1, r3, #31
 800688e:	d421      	bmi.n	80068d4 <__lo0bits+0x52>
 8006890:	0798      	lsls	r0, r3, #30
 8006892:	bf49      	itett	mi
 8006894:	085b      	lsrmi	r3, r3, #1
 8006896:	089b      	lsrpl	r3, r3, #2
 8006898:	2001      	movmi	r0, #1
 800689a:	6013      	strmi	r3, [r2, #0]
 800689c:	bf5c      	itt	pl
 800689e:	2002      	movpl	r0, #2
 80068a0:	6013      	strpl	r3, [r2, #0]
 80068a2:	4770      	bx	lr
 80068a4:	b299      	uxth	r1, r3
 80068a6:	b909      	cbnz	r1, 80068ac <__lo0bits+0x2a>
 80068a8:	2010      	movs	r0, #16
 80068aa:	0c1b      	lsrs	r3, r3, #16
 80068ac:	b2d9      	uxtb	r1, r3
 80068ae:	b909      	cbnz	r1, 80068b4 <__lo0bits+0x32>
 80068b0:	3008      	adds	r0, #8
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	0719      	lsls	r1, r3, #28
 80068b6:	bf04      	itt	eq
 80068b8:	091b      	lsreq	r3, r3, #4
 80068ba:	3004      	addeq	r0, #4
 80068bc:	0799      	lsls	r1, r3, #30
 80068be:	bf04      	itt	eq
 80068c0:	089b      	lsreq	r3, r3, #2
 80068c2:	3002      	addeq	r0, #2
 80068c4:	07d9      	lsls	r1, r3, #31
 80068c6:	d403      	bmi.n	80068d0 <__lo0bits+0x4e>
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	f100 0001 	add.w	r0, r0, #1
 80068ce:	d003      	beq.n	80068d8 <__lo0bits+0x56>
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4770      	bx	lr
 80068d4:	2000      	movs	r0, #0
 80068d6:	4770      	bx	lr
 80068d8:	2020      	movs	r0, #32
 80068da:	4770      	bx	lr

080068dc <__i2b>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	460c      	mov	r4, r1
 80068e0:	2101      	movs	r1, #1
 80068e2:	f7ff ff07 	bl	80066f4 <_Balloc>
 80068e6:	4602      	mov	r2, r0
 80068e8:	b928      	cbnz	r0, 80068f6 <__i2b+0x1a>
 80068ea:	f240 1145 	movw	r1, #325	@ 0x145
 80068ee:	4b04      	ldr	r3, [pc, #16]	@ (8006900 <__i2b+0x24>)
 80068f0:	4804      	ldr	r0, [pc, #16]	@ (8006904 <__i2b+0x28>)
 80068f2:	f000 fcb7 	bl	8007264 <__assert_func>
 80068f6:	2301      	movs	r3, #1
 80068f8:	6144      	str	r4, [r0, #20]
 80068fa:	6103      	str	r3, [r0, #16]
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	bf00      	nop
 8006900:	08007a84 	.word	0x08007a84
 8006904:	08007a95 	.word	0x08007a95

08006908 <__multiply>:
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	4614      	mov	r4, r2
 800690e:	690a      	ldr	r2, [r1, #16]
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	460f      	mov	r7, r1
 8006914:	429a      	cmp	r2, r3
 8006916:	bfa2      	ittt	ge
 8006918:	4623      	movge	r3, r4
 800691a:	460c      	movge	r4, r1
 800691c:	461f      	movge	r7, r3
 800691e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006922:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006926:	68a3      	ldr	r3, [r4, #8]
 8006928:	6861      	ldr	r1, [r4, #4]
 800692a:	eb0a 0609 	add.w	r6, sl, r9
 800692e:	42b3      	cmp	r3, r6
 8006930:	b085      	sub	sp, #20
 8006932:	bfb8      	it	lt
 8006934:	3101      	addlt	r1, #1
 8006936:	f7ff fedd 	bl	80066f4 <_Balloc>
 800693a:	b930      	cbnz	r0, 800694a <__multiply+0x42>
 800693c:	4602      	mov	r2, r0
 800693e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006942:	4b43      	ldr	r3, [pc, #268]	@ (8006a50 <__multiply+0x148>)
 8006944:	4843      	ldr	r0, [pc, #268]	@ (8006a54 <__multiply+0x14c>)
 8006946:	f000 fc8d 	bl	8007264 <__assert_func>
 800694a:	f100 0514 	add.w	r5, r0, #20
 800694e:	462b      	mov	r3, r5
 8006950:	2200      	movs	r2, #0
 8006952:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006956:	4543      	cmp	r3, r8
 8006958:	d321      	bcc.n	800699e <__multiply+0x96>
 800695a:	f107 0114 	add.w	r1, r7, #20
 800695e:	f104 0214 	add.w	r2, r4, #20
 8006962:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006966:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800696a:	9302      	str	r3, [sp, #8]
 800696c:	1b13      	subs	r3, r2, r4
 800696e:	3b15      	subs	r3, #21
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	3304      	adds	r3, #4
 8006976:	f104 0715 	add.w	r7, r4, #21
 800697a:	42ba      	cmp	r2, r7
 800697c:	bf38      	it	cc
 800697e:	2304      	movcc	r3, #4
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	9103      	str	r1, [sp, #12]
 8006986:	428b      	cmp	r3, r1
 8006988:	d80c      	bhi.n	80069a4 <__multiply+0x9c>
 800698a:	2e00      	cmp	r6, #0
 800698c:	dd03      	ble.n	8006996 <__multiply+0x8e>
 800698e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006992:	2b00      	cmp	r3, #0
 8006994:	d05a      	beq.n	8006a4c <__multiply+0x144>
 8006996:	6106      	str	r6, [r0, #16]
 8006998:	b005      	add	sp, #20
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	f843 2b04 	str.w	r2, [r3], #4
 80069a2:	e7d8      	b.n	8006956 <__multiply+0x4e>
 80069a4:	f8b1 a000 	ldrh.w	sl, [r1]
 80069a8:	f1ba 0f00 	cmp.w	sl, #0
 80069ac:	d023      	beq.n	80069f6 <__multiply+0xee>
 80069ae:	46a9      	mov	r9, r5
 80069b0:	f04f 0c00 	mov.w	ip, #0
 80069b4:	f104 0e14 	add.w	lr, r4, #20
 80069b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80069bc:	f8d9 3000 	ldr.w	r3, [r9]
 80069c0:	fa1f fb87 	uxth.w	fp, r7
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	fb0a 330b 	mla	r3, sl, fp, r3
 80069ca:	4463      	add	r3, ip
 80069cc:	f8d9 c000 	ldr.w	ip, [r9]
 80069d0:	0c3f      	lsrs	r7, r7, #16
 80069d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80069d6:	fb0a c707 	mla	r7, sl, r7, ip
 80069da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80069de:	b29b      	uxth	r3, r3
 80069e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069e4:	4572      	cmp	r2, lr
 80069e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80069ea:	f849 3b04 	str.w	r3, [r9], #4
 80069ee:	d8e3      	bhi.n	80069b8 <__multiply+0xb0>
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	f845 c003 	str.w	ip, [r5, r3]
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3104      	adds	r1, #4
 80069fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80069fe:	f1b9 0f00 	cmp.w	r9, #0
 8006a02:	d021      	beq.n	8006a48 <__multiply+0x140>
 8006a04:	46ae      	mov	lr, r5
 8006a06:	f04f 0a00 	mov.w	sl, #0
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	f104 0c14 	add.w	ip, r4, #20
 8006a10:	f8bc b000 	ldrh.w	fp, [ip]
 8006a14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	fb09 770b 	mla	r7, r9, fp, r7
 8006a1e:	4457      	add	r7, sl
 8006a20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a24:	f84e 3b04 	str.w	r3, [lr], #4
 8006a28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a30:	f8be 3000 	ldrh.w	r3, [lr]
 8006a34:	4562      	cmp	r2, ip
 8006a36:	fb09 330a 	mla	r3, r9, sl, r3
 8006a3a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a42:	d8e5      	bhi.n	8006a10 <__multiply+0x108>
 8006a44:	9f01      	ldr	r7, [sp, #4]
 8006a46:	51eb      	str	r3, [r5, r7]
 8006a48:	3504      	adds	r5, #4
 8006a4a:	e79a      	b.n	8006982 <__multiply+0x7a>
 8006a4c:	3e01      	subs	r6, #1
 8006a4e:	e79c      	b.n	800698a <__multiply+0x82>
 8006a50:	08007a84 	.word	0x08007a84
 8006a54:	08007a95 	.word	0x08007a95

08006a58 <__pow5mult>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	4615      	mov	r5, r2
 8006a5e:	f012 0203 	ands.w	r2, r2, #3
 8006a62:	4607      	mov	r7, r0
 8006a64:	460e      	mov	r6, r1
 8006a66:	d007      	beq.n	8006a78 <__pow5mult+0x20>
 8006a68:	4c25      	ldr	r4, [pc, #148]	@ (8006b00 <__pow5mult+0xa8>)
 8006a6a:	3a01      	subs	r2, #1
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a72:	f7ff fea1 	bl	80067b8 <__multadd>
 8006a76:	4606      	mov	r6, r0
 8006a78:	10ad      	asrs	r5, r5, #2
 8006a7a:	d03d      	beq.n	8006af8 <__pow5mult+0xa0>
 8006a7c:	69fc      	ldr	r4, [r7, #28]
 8006a7e:	b97c      	cbnz	r4, 8006aa0 <__pow5mult+0x48>
 8006a80:	2010      	movs	r0, #16
 8006a82:	f7ff fd81 	bl	8006588 <malloc>
 8006a86:	4602      	mov	r2, r0
 8006a88:	61f8      	str	r0, [r7, #28]
 8006a8a:	b928      	cbnz	r0, 8006a98 <__pow5mult+0x40>
 8006a8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a90:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <__pow5mult+0xac>)
 8006a92:	481d      	ldr	r0, [pc, #116]	@ (8006b08 <__pow5mult+0xb0>)
 8006a94:	f000 fbe6 	bl	8007264 <__assert_func>
 8006a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a9c:	6004      	str	r4, [r0, #0]
 8006a9e:	60c4      	str	r4, [r0, #12]
 8006aa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006aa8:	b94c      	cbnz	r4, 8006abe <__pow5mult+0x66>
 8006aaa:	f240 2171 	movw	r1, #625	@ 0x271
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f7ff ff14 	bl	80068dc <__i2b>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006abc:	6003      	str	r3, [r0, #0]
 8006abe:	f04f 0900 	mov.w	r9, #0
 8006ac2:	07eb      	lsls	r3, r5, #31
 8006ac4:	d50a      	bpl.n	8006adc <__pow5mult+0x84>
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4638      	mov	r0, r7
 8006acc:	f7ff ff1c 	bl	8006908 <__multiply>
 8006ad0:	4680      	mov	r8, r0
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f7ff fe4d 	bl	8006774 <_Bfree>
 8006ada:	4646      	mov	r6, r8
 8006adc:	106d      	asrs	r5, r5, #1
 8006ade:	d00b      	beq.n	8006af8 <__pow5mult+0xa0>
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	b938      	cbnz	r0, 8006af4 <__pow5mult+0x9c>
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ff0d 	bl	8006908 <__multiply>
 8006aee:	6020      	str	r0, [r4, #0]
 8006af0:	f8c0 9000 	str.w	r9, [r0]
 8006af4:	4604      	mov	r4, r0
 8006af6:	e7e4      	b.n	8006ac2 <__pow5mult+0x6a>
 8006af8:	4630      	mov	r0, r6
 8006afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afe:	bf00      	nop
 8006b00:	08007af0 	.word	0x08007af0
 8006b04:	08007a15 	.word	0x08007a15
 8006b08:	08007a95 	.word	0x08007a95

08006b0c <__lshift>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	460c      	mov	r4, r1
 8006b12:	4607      	mov	r7, r0
 8006b14:	4691      	mov	r9, r2
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	6849      	ldr	r1, [r1, #4]
 8006b1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b1e:	68a3      	ldr	r3, [r4, #8]
 8006b20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b24:	f108 0601 	add.w	r6, r8, #1
 8006b28:	42b3      	cmp	r3, r6
 8006b2a:	db0b      	blt.n	8006b44 <__lshift+0x38>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	f7ff fde1 	bl	80066f4 <_Balloc>
 8006b32:	4605      	mov	r5, r0
 8006b34:	b948      	cbnz	r0, 8006b4a <__lshift+0x3e>
 8006b36:	4602      	mov	r2, r0
 8006b38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b3c:	4b27      	ldr	r3, [pc, #156]	@ (8006bdc <__lshift+0xd0>)
 8006b3e:	4828      	ldr	r0, [pc, #160]	@ (8006be0 <__lshift+0xd4>)
 8006b40:	f000 fb90 	bl	8007264 <__assert_func>
 8006b44:	3101      	adds	r1, #1
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	e7ee      	b.n	8006b28 <__lshift+0x1c>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f100 0114 	add.w	r1, r0, #20
 8006b50:	f100 0210 	add.w	r2, r0, #16
 8006b54:	4618      	mov	r0, r3
 8006b56:	4553      	cmp	r3, sl
 8006b58:	db33      	blt.n	8006bc2 <__lshift+0xb6>
 8006b5a:	6920      	ldr	r0, [r4, #16]
 8006b5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b60:	f104 0314 	add.w	r3, r4, #20
 8006b64:	f019 091f 	ands.w	r9, r9, #31
 8006b68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b70:	d02b      	beq.n	8006bca <__lshift+0xbe>
 8006b72:	468a      	mov	sl, r1
 8006b74:	2200      	movs	r2, #0
 8006b76:	f1c9 0e20 	rsb	lr, r9, #32
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	fa00 f009 	lsl.w	r0, r0, r9
 8006b80:	4310      	orrs	r0, r2
 8006b82:	f84a 0b04 	str.w	r0, [sl], #4
 8006b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b8a:	459c      	cmp	ip, r3
 8006b8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b90:	d8f3      	bhi.n	8006b7a <__lshift+0x6e>
 8006b92:	ebac 0304 	sub.w	r3, ip, r4
 8006b96:	3b15      	subs	r3, #21
 8006b98:	f023 0303 	bic.w	r3, r3, #3
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	f104 0015 	add.w	r0, r4, #21
 8006ba2:	4584      	cmp	ip, r0
 8006ba4:	bf38      	it	cc
 8006ba6:	2304      	movcc	r3, #4
 8006ba8:	50ca      	str	r2, [r1, r3]
 8006baa:	b10a      	cbz	r2, 8006bb0 <__lshift+0xa4>
 8006bac:	f108 0602 	add.w	r6, r8, #2
 8006bb0:	3e01      	subs	r6, #1
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	612e      	str	r6, [r5, #16]
 8006bb8:	f7ff fddc 	bl	8006774 <_Bfree>
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	e7c5      	b.n	8006b56 <__lshift+0x4a>
 8006bca:	3904      	subs	r1, #4
 8006bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd0:	459c      	cmp	ip, r3
 8006bd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bd6:	d8f9      	bhi.n	8006bcc <__lshift+0xc0>
 8006bd8:	e7ea      	b.n	8006bb0 <__lshift+0xa4>
 8006bda:	bf00      	nop
 8006bdc:	08007a84 	.word	0x08007a84
 8006be0:	08007a95 	.word	0x08007a95

08006be4 <__mcmp>:
 8006be4:	4603      	mov	r3, r0
 8006be6:	690a      	ldr	r2, [r1, #16]
 8006be8:	6900      	ldr	r0, [r0, #16]
 8006bea:	b530      	push	{r4, r5, lr}
 8006bec:	1a80      	subs	r0, r0, r2
 8006bee:	d10e      	bne.n	8006c0e <__mcmp+0x2a>
 8006bf0:	3314      	adds	r3, #20
 8006bf2:	3114      	adds	r1, #20
 8006bf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006bfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c04:	4295      	cmp	r5, r2
 8006c06:	d003      	beq.n	8006c10 <__mcmp+0x2c>
 8006c08:	d205      	bcs.n	8006c16 <__mcmp+0x32>
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	bd30      	pop	{r4, r5, pc}
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d3f3      	bcc.n	8006bfc <__mcmp+0x18>
 8006c14:	e7fb      	b.n	8006c0e <__mcmp+0x2a>
 8006c16:	2001      	movs	r0, #1
 8006c18:	e7f9      	b.n	8006c0e <__mcmp+0x2a>
	...

08006c1c <__mdiff>:
 8006c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	4689      	mov	r9, r1
 8006c22:	4606      	mov	r6, r0
 8006c24:	4611      	mov	r1, r2
 8006c26:	4648      	mov	r0, r9
 8006c28:	4614      	mov	r4, r2
 8006c2a:	f7ff ffdb 	bl	8006be4 <__mcmp>
 8006c2e:	1e05      	subs	r5, r0, #0
 8006c30:	d112      	bne.n	8006c58 <__mdiff+0x3c>
 8006c32:	4629      	mov	r1, r5
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff fd5d 	bl	80066f4 <_Balloc>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	b928      	cbnz	r0, 8006c4a <__mdiff+0x2e>
 8006c3e:	f240 2137 	movw	r1, #567	@ 0x237
 8006c42:	4b3e      	ldr	r3, [pc, #248]	@ (8006d3c <__mdiff+0x120>)
 8006c44:	483e      	ldr	r0, [pc, #248]	@ (8006d40 <__mdiff+0x124>)
 8006c46:	f000 fb0d 	bl	8007264 <__assert_func>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c50:	4610      	mov	r0, r2
 8006c52:	b003      	add	sp, #12
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	bfbc      	itt	lt
 8006c5a:	464b      	movlt	r3, r9
 8006c5c:	46a1      	movlt	r9, r4
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c64:	bfba      	itte	lt
 8006c66:	461c      	movlt	r4, r3
 8006c68:	2501      	movlt	r5, #1
 8006c6a:	2500      	movge	r5, #0
 8006c6c:	f7ff fd42 	bl	80066f4 <_Balloc>
 8006c70:	4602      	mov	r2, r0
 8006c72:	b918      	cbnz	r0, 8006c7c <__mdiff+0x60>
 8006c74:	f240 2145 	movw	r1, #581	@ 0x245
 8006c78:	4b30      	ldr	r3, [pc, #192]	@ (8006d3c <__mdiff+0x120>)
 8006c7a:	e7e3      	b.n	8006c44 <__mdiff+0x28>
 8006c7c:	f100 0b14 	add.w	fp, r0, #20
 8006c80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c84:	f109 0310 	add.w	r3, r9, #16
 8006c88:	60c5      	str	r5, [r0, #12]
 8006c8a:	f04f 0c00 	mov.w	ip, #0
 8006c8e:	f109 0514 	add.w	r5, r9, #20
 8006c92:	46d9      	mov	r9, fp
 8006c94:	6926      	ldr	r6, [r4, #16]
 8006c96:	f104 0e14 	add.w	lr, r4, #20
 8006c9a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c9e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006caa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006cae:	b281      	uxth	r1, r0
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	fa1f f38a 	uxth.w	r3, sl
 8006cb6:	1a5b      	subs	r3, r3, r1
 8006cb8:	0c00      	lsrs	r0, r0, #16
 8006cba:	4463      	add	r3, ip
 8006cbc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006cc0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cca:	4576      	cmp	r6, lr
 8006ccc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cd0:	f849 3b04 	str.w	r3, [r9], #4
 8006cd4:	d8e6      	bhi.n	8006ca4 <__mdiff+0x88>
 8006cd6:	1b33      	subs	r3, r6, r4
 8006cd8:	3b15      	subs	r3, #21
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	3415      	adds	r4, #21
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	42a6      	cmp	r6, r4
 8006ce4:	bf38      	it	cc
 8006ce6:	2304      	movcc	r3, #4
 8006ce8:	441d      	add	r5, r3
 8006cea:	445b      	add	r3, fp
 8006cec:	461e      	mov	r6, r3
 8006cee:	462c      	mov	r4, r5
 8006cf0:	4544      	cmp	r4, r8
 8006cf2:	d30e      	bcc.n	8006d12 <__mdiff+0xf6>
 8006cf4:	f108 0103 	add.w	r1, r8, #3
 8006cf8:	1b49      	subs	r1, r1, r5
 8006cfa:	f021 0103 	bic.w	r1, r1, #3
 8006cfe:	3d03      	subs	r5, #3
 8006d00:	45a8      	cmp	r8, r5
 8006d02:	bf38      	it	cc
 8006d04:	2100      	movcc	r1, #0
 8006d06:	440b      	add	r3, r1
 8006d08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d0c:	b199      	cbz	r1, 8006d36 <__mdiff+0x11a>
 8006d0e:	6117      	str	r7, [r2, #16]
 8006d10:	e79e      	b.n	8006c50 <__mdiff+0x34>
 8006d12:	46e6      	mov	lr, ip
 8006d14:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d18:	fa1f fc81 	uxth.w	ip, r1
 8006d1c:	44f4      	add	ip, lr
 8006d1e:	0c08      	lsrs	r0, r1, #16
 8006d20:	4471      	add	r1, lr
 8006d22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d26:	b289      	uxth	r1, r1
 8006d28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d30:	f846 1b04 	str.w	r1, [r6], #4
 8006d34:	e7dc      	b.n	8006cf0 <__mdiff+0xd4>
 8006d36:	3f01      	subs	r7, #1
 8006d38:	e7e6      	b.n	8006d08 <__mdiff+0xec>
 8006d3a:	bf00      	nop
 8006d3c:	08007a84 	.word	0x08007a84
 8006d40:	08007a95 	.word	0x08007a95

08006d44 <__d2b>:
 8006d44:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4690      	mov	r8, r2
 8006d4c:	4699      	mov	r9, r3
 8006d4e:	9e08      	ldr	r6, [sp, #32]
 8006d50:	f7ff fcd0 	bl	80066f4 <_Balloc>
 8006d54:	4604      	mov	r4, r0
 8006d56:	b930      	cbnz	r0, 8006d66 <__d2b+0x22>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d5e:	4b23      	ldr	r3, [pc, #140]	@ (8006dec <__d2b+0xa8>)
 8006d60:	4823      	ldr	r0, [pc, #140]	@ (8006df0 <__d2b+0xac>)
 8006d62:	f000 fa7f 	bl	8007264 <__assert_func>
 8006d66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d6e:	b10d      	cbz	r5, 8006d74 <__d2b+0x30>
 8006d70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	f1b8 0300 	subs.w	r3, r8, #0
 8006d7a:	d024      	beq.n	8006dc6 <__d2b+0x82>
 8006d7c:	4668      	mov	r0, sp
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	f7ff fd7f 	bl	8006882 <__lo0bits>
 8006d84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d88:	b1d8      	cbz	r0, 8006dc2 <__d2b+0x7e>
 8006d8a:	f1c0 0320 	rsb	r3, r0, #32
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	430b      	orrs	r3, r1
 8006d94:	40c2      	lsrs	r2, r0
 8006d96:	6163      	str	r3, [r4, #20]
 8006d98:	9201      	str	r2, [sp, #4]
 8006d9a:	9b01      	ldr	r3, [sp, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bf0c      	ite	eq
 8006da0:	2201      	moveq	r2, #1
 8006da2:	2202      	movne	r2, #2
 8006da4:	61a3      	str	r3, [r4, #24]
 8006da6:	6122      	str	r2, [r4, #16]
 8006da8:	b1ad      	cbz	r5, 8006dd6 <__d2b+0x92>
 8006daa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006dae:	4405      	add	r5, r0
 8006db0:	6035      	str	r5, [r6, #0]
 8006db2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db8:	6018      	str	r0, [r3, #0]
 8006dba:	4620      	mov	r0, r4
 8006dbc:	b002      	add	sp, #8
 8006dbe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006dc2:	6161      	str	r1, [r4, #20]
 8006dc4:	e7e9      	b.n	8006d9a <__d2b+0x56>
 8006dc6:	a801      	add	r0, sp, #4
 8006dc8:	f7ff fd5b 	bl	8006882 <__lo0bits>
 8006dcc:	9b01      	ldr	r3, [sp, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	6163      	str	r3, [r4, #20]
 8006dd2:	3020      	adds	r0, #32
 8006dd4:	e7e7      	b.n	8006da6 <__d2b+0x62>
 8006dd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006dda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	6918      	ldr	r0, [r3, #16]
 8006de2:	f7ff fd2f 	bl	8006844 <__hi0bits>
 8006de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006dea:	e7e4      	b.n	8006db6 <__d2b+0x72>
 8006dec:	08007a84 	.word	0x08007a84
 8006df0:	08007a95 	.word	0x08007a95

08006df4 <__ssputs_r>:
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	461f      	mov	r7, r3
 8006dfa:	688e      	ldr	r6, [r1, #8]
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	42be      	cmp	r6, r7
 8006e00:	460c      	mov	r4, r1
 8006e02:	4690      	mov	r8, r2
 8006e04:	680b      	ldr	r3, [r1, #0]
 8006e06:	d82d      	bhi.n	8006e64 <__ssputs_r+0x70>
 8006e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e10:	d026      	beq.n	8006e60 <__ssputs_r+0x6c>
 8006e12:	6965      	ldr	r5, [r4, #20]
 8006e14:	6909      	ldr	r1, [r1, #16]
 8006e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e1a:	eba3 0901 	sub.w	r9, r3, r1
 8006e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e22:	1c7b      	adds	r3, r7, #1
 8006e24:	444b      	add	r3, r9
 8006e26:	106d      	asrs	r5, r5, #1
 8006e28:	429d      	cmp	r5, r3
 8006e2a:	bf38      	it	cc
 8006e2c:	461d      	movcc	r5, r3
 8006e2e:	0553      	lsls	r3, r2, #21
 8006e30:	d527      	bpl.n	8006e82 <__ssputs_r+0x8e>
 8006e32:	4629      	mov	r1, r5
 8006e34:	f7ff fbd2 	bl	80065dc <_malloc_r>
 8006e38:	4606      	mov	r6, r0
 8006e3a:	b360      	cbz	r0, 8006e96 <__ssputs_r+0xa2>
 8006e3c:	464a      	mov	r2, r9
 8006e3e:	6921      	ldr	r1, [r4, #16]
 8006e40:	f000 fa02 	bl	8007248 <memcpy>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	6126      	str	r6, [r4, #16]
 8006e52:	444e      	add	r6, r9
 8006e54:	6026      	str	r6, [r4, #0]
 8006e56:	463e      	mov	r6, r7
 8006e58:	6165      	str	r5, [r4, #20]
 8006e5a:	eba5 0509 	sub.w	r5, r5, r9
 8006e5e:	60a5      	str	r5, [r4, #8]
 8006e60:	42be      	cmp	r6, r7
 8006e62:	d900      	bls.n	8006e66 <__ssputs_r+0x72>
 8006e64:	463e      	mov	r6, r7
 8006e66:	4632      	mov	r2, r6
 8006e68:	4641      	mov	r1, r8
 8006e6a:	6820      	ldr	r0, [r4, #0]
 8006e6c:	f000 f9c2 	bl	80071f4 <memmove>
 8006e70:	2000      	movs	r0, #0
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	1b9b      	subs	r3, r3, r6
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	4433      	add	r3, r6
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	462a      	mov	r2, r5
 8006e84:	f000 fa32 	bl	80072ec <_realloc_r>
 8006e88:	4606      	mov	r6, r0
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d1e0      	bne.n	8006e50 <__ssputs_r+0x5c>
 8006e8e:	4650      	mov	r0, sl
 8006e90:	6921      	ldr	r1, [r4, #16]
 8006e92:	f7ff fb31 	bl	80064f8 <_free_r>
 8006e96:	230c      	movs	r3, #12
 8006e98:	f8ca 3000 	str.w	r3, [sl]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	e7e9      	b.n	8006e7e <__ssputs_r+0x8a>
	...

08006eac <_svfiprintf_r>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	4698      	mov	r8, r3
 8006eb2:	898b      	ldrh	r3, [r1, #12]
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	061b      	lsls	r3, r3, #24
 8006eb8:	460d      	mov	r5, r1
 8006eba:	4614      	mov	r4, r2
 8006ebc:	b09d      	sub	sp, #116	@ 0x74
 8006ebe:	d510      	bpl.n	8006ee2 <_svfiprintf_r+0x36>
 8006ec0:	690b      	ldr	r3, [r1, #16]
 8006ec2:	b973      	cbnz	r3, 8006ee2 <_svfiprintf_r+0x36>
 8006ec4:	2140      	movs	r1, #64	@ 0x40
 8006ec6:	f7ff fb89 	bl	80065dc <_malloc_r>
 8006eca:	6028      	str	r0, [r5, #0]
 8006ecc:	6128      	str	r0, [r5, #16]
 8006ece:	b930      	cbnz	r0, 8006ede <_svfiprintf_r+0x32>
 8006ed0:	230c      	movs	r3, #12
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	b01d      	add	sp, #116	@ 0x74
 8006eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ede:	2340      	movs	r3, #64	@ 0x40
 8006ee0:	616b      	str	r3, [r5, #20]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee6:	2320      	movs	r3, #32
 8006ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eec:	2330      	movs	r3, #48	@ 0x30
 8006eee:	f04f 0901 	mov.w	r9, #1
 8006ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007090 <_svfiprintf_r+0x1e4>
 8006efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006efe:	4623      	mov	r3, r4
 8006f00:	469a      	mov	sl, r3
 8006f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f06:	b10a      	cbz	r2, 8006f0c <_svfiprintf_r+0x60>
 8006f08:	2a25      	cmp	r2, #37	@ 0x25
 8006f0a:	d1f9      	bne.n	8006f00 <_svfiprintf_r+0x54>
 8006f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f10:	d00b      	beq.n	8006f2a <_svfiprintf_r+0x7e>
 8006f12:	465b      	mov	r3, fp
 8006f14:	4622      	mov	r2, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ff6b 	bl	8006df4 <__ssputs_r>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f000 80a7 	beq.w	8007072 <_svfiprintf_r+0x1c6>
 8006f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f26:	445a      	add	r2, fp
 8006f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 809f 	beq.w	8007072 <_svfiprintf_r+0x1c6>
 8006f34:	2300      	movs	r3, #0
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f3e:	f10a 0a01 	add.w	sl, sl, #1
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	9307      	str	r3, [sp, #28]
 8006f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f4c:	4654      	mov	r4, sl
 8006f4e:	2205      	movs	r2, #5
 8006f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f54:	484e      	ldr	r0, [pc, #312]	@ (8007090 <_svfiprintf_r+0x1e4>)
 8006f56:	f7fe fc6e 	bl	8005836 <memchr>
 8006f5a:	9a04      	ldr	r2, [sp, #16]
 8006f5c:	b9d8      	cbnz	r0, 8006f96 <_svfiprintf_r+0xea>
 8006f5e:	06d0      	lsls	r0, r2, #27
 8006f60:	bf44      	itt	mi
 8006f62:	2320      	movmi	r3, #32
 8006f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f68:	0711      	lsls	r1, r2, #28
 8006f6a:	bf44      	itt	mi
 8006f6c:	232b      	movmi	r3, #43	@ 0x2b
 8006f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f72:	f89a 3000 	ldrb.w	r3, [sl]
 8006f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f78:	d015      	beq.n	8006fa6 <_svfiprintf_r+0xfa>
 8006f7a:	4654      	mov	r4, sl
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f04f 0c0a 	mov.w	ip, #10
 8006f82:	9a07      	ldr	r2, [sp, #28]
 8006f84:	4621      	mov	r1, r4
 8006f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f8a:	3b30      	subs	r3, #48	@ 0x30
 8006f8c:	2b09      	cmp	r3, #9
 8006f8e:	d94b      	bls.n	8007028 <_svfiprintf_r+0x17c>
 8006f90:	b1b0      	cbz	r0, 8006fc0 <_svfiprintf_r+0x114>
 8006f92:	9207      	str	r2, [sp, #28]
 8006f94:	e014      	b.n	8006fc0 <_svfiprintf_r+0x114>
 8006f96:	eba0 0308 	sub.w	r3, r0, r8
 8006f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	46a2      	mov	sl, r4
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	e7d2      	b.n	8006f4c <_svfiprintf_r+0xa0>
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	9103      	str	r1, [sp, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfbb      	ittet	lt
 8006fb2:	425b      	neglt	r3, r3
 8006fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006fb8:	9307      	strge	r3, [sp, #28]
 8006fba:	9307      	strlt	r3, [sp, #28]
 8006fbc:	bfb8      	it	lt
 8006fbe:	9204      	strlt	r2, [sp, #16]
 8006fc0:	7823      	ldrb	r3, [r4, #0]
 8006fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fc4:	d10a      	bne.n	8006fdc <_svfiprintf_r+0x130>
 8006fc6:	7863      	ldrb	r3, [r4, #1]
 8006fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fca:	d132      	bne.n	8007032 <_svfiprintf_r+0x186>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	3402      	adds	r4, #2
 8006fd0:	1d1a      	adds	r2, r3, #4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	9203      	str	r2, [sp, #12]
 8006fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fda:	9305      	str	r3, [sp, #20]
 8006fdc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007094 <_svfiprintf_r+0x1e8>
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	7821      	ldrb	r1, [r4, #0]
 8006fe6:	f7fe fc26 	bl	8005836 <memchr>
 8006fea:	b138      	cbz	r0, 8006ffc <_svfiprintf_r+0x150>
 8006fec:	2240      	movs	r2, #64	@ 0x40
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	eba0 000a 	sub.w	r0, r0, sl
 8006ff4:	4082      	lsls	r2, r0
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	3401      	adds	r4, #1
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007000:	2206      	movs	r2, #6
 8007002:	4825      	ldr	r0, [pc, #148]	@ (8007098 <_svfiprintf_r+0x1ec>)
 8007004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007008:	f7fe fc15 	bl	8005836 <memchr>
 800700c:	2800      	cmp	r0, #0
 800700e:	d036      	beq.n	800707e <_svfiprintf_r+0x1d2>
 8007010:	4b22      	ldr	r3, [pc, #136]	@ (800709c <_svfiprintf_r+0x1f0>)
 8007012:	bb1b      	cbnz	r3, 800705c <_svfiprintf_r+0x1b0>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	3307      	adds	r3, #7
 8007018:	f023 0307 	bic.w	r3, r3, #7
 800701c:	3308      	adds	r3, #8
 800701e:	9303      	str	r3, [sp, #12]
 8007020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007022:	4433      	add	r3, r6
 8007024:	9309      	str	r3, [sp, #36]	@ 0x24
 8007026:	e76a      	b.n	8006efe <_svfiprintf_r+0x52>
 8007028:	460c      	mov	r4, r1
 800702a:	2001      	movs	r0, #1
 800702c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007030:	e7a8      	b.n	8006f84 <_svfiprintf_r+0xd8>
 8007032:	2300      	movs	r3, #0
 8007034:	f04f 0c0a 	mov.w	ip, #10
 8007038:	4619      	mov	r1, r3
 800703a:	3401      	adds	r4, #1
 800703c:	9305      	str	r3, [sp, #20]
 800703e:	4620      	mov	r0, r4
 8007040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007044:	3a30      	subs	r2, #48	@ 0x30
 8007046:	2a09      	cmp	r2, #9
 8007048:	d903      	bls.n	8007052 <_svfiprintf_r+0x1a6>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0c6      	beq.n	8006fdc <_svfiprintf_r+0x130>
 800704e:	9105      	str	r1, [sp, #20]
 8007050:	e7c4      	b.n	8006fdc <_svfiprintf_r+0x130>
 8007052:	4604      	mov	r4, r0
 8007054:	2301      	movs	r3, #1
 8007056:	fb0c 2101 	mla	r1, ip, r1, r2
 800705a:	e7f0      	b.n	800703e <_svfiprintf_r+0x192>
 800705c:	ab03      	add	r3, sp, #12
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	462a      	mov	r2, r5
 8007062:	4638      	mov	r0, r7
 8007064:	4b0e      	ldr	r3, [pc, #56]	@ (80070a0 <_svfiprintf_r+0x1f4>)
 8007066:	a904      	add	r1, sp, #16
 8007068:	f7fd fe6c 	bl	8004d44 <_printf_float>
 800706c:	1c42      	adds	r2, r0, #1
 800706e:	4606      	mov	r6, r0
 8007070:	d1d6      	bne.n	8007020 <_svfiprintf_r+0x174>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	065b      	lsls	r3, r3, #25
 8007076:	f53f af2d 	bmi.w	8006ed4 <_svfiprintf_r+0x28>
 800707a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800707c:	e72c      	b.n	8006ed8 <_svfiprintf_r+0x2c>
 800707e:	ab03      	add	r3, sp, #12
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	462a      	mov	r2, r5
 8007084:	4638      	mov	r0, r7
 8007086:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <_svfiprintf_r+0x1f4>)
 8007088:	a904      	add	r1, sp, #16
 800708a:	f7fe f8f9 	bl	8005280 <_printf_i>
 800708e:	e7ed      	b.n	800706c <_svfiprintf_r+0x1c0>
 8007090:	08007bf0 	.word	0x08007bf0
 8007094:	08007bf6 	.word	0x08007bf6
 8007098:	08007bfa 	.word	0x08007bfa
 800709c:	08004d45 	.word	0x08004d45
 80070a0:	08006df5 	.word	0x08006df5

080070a4 <__sflush_r>:
 80070a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	0716      	lsls	r6, r2, #28
 80070ac:	4605      	mov	r5, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	d454      	bmi.n	800715c <__sflush_r+0xb8>
 80070b2:	684b      	ldr	r3, [r1, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dc02      	bgt.n	80070be <__sflush_r+0x1a>
 80070b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dd48      	ble.n	8007150 <__sflush_r+0xac>
 80070be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070c0:	2e00      	cmp	r6, #0
 80070c2:	d045      	beq.n	8007150 <__sflush_r+0xac>
 80070c4:	2300      	movs	r3, #0
 80070c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070ca:	682f      	ldr	r7, [r5, #0]
 80070cc:	6a21      	ldr	r1, [r4, #32]
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	d030      	beq.n	8007134 <__sflush_r+0x90>
 80070d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	0759      	lsls	r1, r3, #29
 80070d8:	d505      	bpl.n	80070e6 <__sflush_r+0x42>
 80070da:	6863      	ldr	r3, [r4, #4]
 80070dc:	1ad2      	subs	r2, r2, r3
 80070de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070e0:	b10b      	cbz	r3, 80070e6 <__sflush_r+0x42>
 80070e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070e4:	1ad2      	subs	r2, r2, r3
 80070e6:	2300      	movs	r3, #0
 80070e8:	4628      	mov	r0, r5
 80070ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070ec:	6a21      	ldr	r1, [r4, #32]
 80070ee:	47b0      	blx	r6
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	d106      	bne.n	8007104 <__sflush_r+0x60>
 80070f6:	6829      	ldr	r1, [r5, #0]
 80070f8:	291d      	cmp	r1, #29
 80070fa:	d82b      	bhi.n	8007154 <__sflush_r+0xb0>
 80070fc:	4a28      	ldr	r2, [pc, #160]	@ (80071a0 <__sflush_r+0xfc>)
 80070fe:	410a      	asrs	r2, r1
 8007100:	07d6      	lsls	r6, r2, #31
 8007102:	d427      	bmi.n	8007154 <__sflush_r+0xb0>
 8007104:	2200      	movs	r2, #0
 8007106:	6062      	str	r2, [r4, #4]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	04d9      	lsls	r1, r3, #19
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	d504      	bpl.n	800711a <__sflush_r+0x76>
 8007110:	1c42      	adds	r2, r0, #1
 8007112:	d101      	bne.n	8007118 <__sflush_r+0x74>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b903      	cbnz	r3, 800711a <__sflush_r+0x76>
 8007118:	6560      	str	r0, [r4, #84]	@ 0x54
 800711a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800711c:	602f      	str	r7, [r5, #0]
 800711e:	b1b9      	cbz	r1, 8007150 <__sflush_r+0xac>
 8007120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007124:	4299      	cmp	r1, r3
 8007126:	d002      	beq.n	800712e <__sflush_r+0x8a>
 8007128:	4628      	mov	r0, r5
 800712a:	f7ff f9e5 	bl	80064f8 <_free_r>
 800712e:	2300      	movs	r3, #0
 8007130:	6363      	str	r3, [r4, #52]	@ 0x34
 8007132:	e00d      	b.n	8007150 <__sflush_r+0xac>
 8007134:	2301      	movs	r3, #1
 8007136:	4628      	mov	r0, r5
 8007138:	47b0      	blx	r6
 800713a:	4602      	mov	r2, r0
 800713c:	1c50      	adds	r0, r2, #1
 800713e:	d1c9      	bne.n	80070d4 <__sflush_r+0x30>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0c6      	beq.n	80070d4 <__sflush_r+0x30>
 8007146:	2b1d      	cmp	r3, #29
 8007148:	d001      	beq.n	800714e <__sflush_r+0xaa>
 800714a:	2b16      	cmp	r3, #22
 800714c:	d11d      	bne.n	800718a <__sflush_r+0xe6>
 800714e:	602f      	str	r7, [r5, #0]
 8007150:	2000      	movs	r0, #0
 8007152:	e021      	b.n	8007198 <__sflush_r+0xf4>
 8007154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007158:	b21b      	sxth	r3, r3
 800715a:	e01a      	b.n	8007192 <__sflush_r+0xee>
 800715c:	690f      	ldr	r7, [r1, #16]
 800715e:	2f00      	cmp	r7, #0
 8007160:	d0f6      	beq.n	8007150 <__sflush_r+0xac>
 8007162:	0793      	lsls	r3, r2, #30
 8007164:	bf18      	it	ne
 8007166:	2300      	movne	r3, #0
 8007168:	680e      	ldr	r6, [r1, #0]
 800716a:	bf08      	it	eq
 800716c:	694b      	ldreq	r3, [r1, #20]
 800716e:	1bf6      	subs	r6, r6, r7
 8007170:	600f      	str	r7, [r1, #0]
 8007172:	608b      	str	r3, [r1, #8]
 8007174:	2e00      	cmp	r6, #0
 8007176:	ddeb      	ble.n	8007150 <__sflush_r+0xac>
 8007178:	4633      	mov	r3, r6
 800717a:	463a      	mov	r2, r7
 800717c:	4628      	mov	r0, r5
 800717e:	6a21      	ldr	r1, [r4, #32]
 8007180:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007184:	47e0      	blx	ip
 8007186:	2800      	cmp	r0, #0
 8007188:	dc07      	bgt.n	800719a <__sflush_r+0xf6>
 800718a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719a:	4407      	add	r7, r0
 800719c:	1a36      	subs	r6, r6, r0
 800719e:	e7e9      	b.n	8007174 <__sflush_r+0xd0>
 80071a0:	dfbffffe 	.word	0xdfbffffe

080071a4 <_fflush_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	4605      	mov	r5, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	b913      	cbnz	r3, 80071b4 <_fflush_r+0x10>
 80071ae:	2500      	movs	r5, #0
 80071b0:	4628      	mov	r0, r5
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	b118      	cbz	r0, 80071be <_fflush_r+0x1a>
 80071b6:	6a03      	ldr	r3, [r0, #32]
 80071b8:	b90b      	cbnz	r3, 80071be <_fflush_r+0x1a>
 80071ba:	f7fe fa0d 	bl	80055d8 <__sinit>
 80071be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f3      	beq.n	80071ae <_fflush_r+0xa>
 80071c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071c8:	07d0      	lsls	r0, r2, #31
 80071ca:	d404      	bmi.n	80071d6 <_fflush_r+0x32>
 80071cc:	0599      	lsls	r1, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_fflush_r+0x32>
 80071d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071d2:	f7fe fb2e 	bl	8005832 <__retarget_lock_acquire_recursive>
 80071d6:	4628      	mov	r0, r5
 80071d8:	4621      	mov	r1, r4
 80071da:	f7ff ff63 	bl	80070a4 <__sflush_r>
 80071de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e0:	4605      	mov	r5, r0
 80071e2:	07da      	lsls	r2, r3, #31
 80071e4:	d4e4      	bmi.n	80071b0 <_fflush_r+0xc>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	059b      	lsls	r3, r3, #22
 80071ea:	d4e1      	bmi.n	80071b0 <_fflush_r+0xc>
 80071ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ee:	f7fe fb21 	bl	8005834 <__retarget_lock_release_recursive>
 80071f2:	e7dd      	b.n	80071b0 <_fflush_r+0xc>

080071f4 <memmove>:
 80071f4:	4288      	cmp	r0, r1
 80071f6:	b510      	push	{r4, lr}
 80071f8:	eb01 0402 	add.w	r4, r1, r2
 80071fc:	d902      	bls.n	8007204 <memmove+0x10>
 80071fe:	4284      	cmp	r4, r0
 8007200:	4623      	mov	r3, r4
 8007202:	d807      	bhi.n	8007214 <memmove+0x20>
 8007204:	1e43      	subs	r3, r0, #1
 8007206:	42a1      	cmp	r1, r4
 8007208:	d008      	beq.n	800721c <memmove+0x28>
 800720a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007212:	e7f8      	b.n	8007206 <memmove+0x12>
 8007214:	4601      	mov	r1, r0
 8007216:	4402      	add	r2, r0
 8007218:	428a      	cmp	r2, r1
 800721a:	d100      	bne.n	800721e <memmove+0x2a>
 800721c:	bd10      	pop	{r4, pc}
 800721e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007226:	e7f7      	b.n	8007218 <memmove+0x24>

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	2300      	movs	r3, #0
 800722c:	4d05      	ldr	r5, [pc, #20]	@ (8007244 <_sbrk_r+0x1c>)
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fa fade 	bl	80017f4 <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20000548 	.word	0x20000548

08007248 <memcpy>:
 8007248:	440a      	add	r2, r1
 800724a:	4291      	cmp	r1, r2
 800724c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007250:	d100      	bne.n	8007254 <memcpy+0xc>
 8007252:	4770      	bx	lr
 8007254:	b510      	push	{r4, lr}
 8007256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725a:	4291      	cmp	r1, r2
 800725c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007260:	d1f9      	bne.n	8007256 <memcpy+0xe>
 8007262:	bd10      	pop	{r4, pc}

08007264 <__assert_func>:
 8007264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007266:	4614      	mov	r4, r2
 8007268:	461a      	mov	r2, r3
 800726a:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <__assert_func+0x2c>)
 800726c:	4605      	mov	r5, r0
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68d8      	ldr	r0, [r3, #12]
 8007272:	b954      	cbnz	r4, 800728a <__assert_func+0x26>
 8007274:	4b07      	ldr	r3, [pc, #28]	@ (8007294 <__assert_func+0x30>)
 8007276:	461c      	mov	r4, r3
 8007278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800727c:	9100      	str	r1, [sp, #0]
 800727e:	462b      	mov	r3, r5
 8007280:	4905      	ldr	r1, [pc, #20]	@ (8007298 <__assert_func+0x34>)
 8007282:	f000 f86f 	bl	8007364 <fiprintf>
 8007286:	f000 f87f 	bl	8007388 <abort>
 800728a:	4b04      	ldr	r3, [pc, #16]	@ (800729c <__assert_func+0x38>)
 800728c:	e7f4      	b.n	8007278 <__assert_func+0x14>
 800728e:	bf00      	nop
 8007290:	20000018 	.word	0x20000018
 8007294:	08007c46 	.word	0x08007c46
 8007298:	08007c18 	.word	0x08007c18
 800729c:	08007c0b 	.word	0x08007c0b

080072a0 <_calloc_r>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	fba1 5402 	umull	r5, r4, r1, r2
 80072a6:	b93c      	cbnz	r4, 80072b8 <_calloc_r+0x18>
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7ff f997 	bl	80065dc <_malloc_r>
 80072ae:	4606      	mov	r6, r0
 80072b0:	b928      	cbnz	r0, 80072be <_calloc_r+0x1e>
 80072b2:	2600      	movs	r6, #0
 80072b4:	4630      	mov	r0, r6
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	220c      	movs	r2, #12
 80072ba:	6002      	str	r2, [r0, #0]
 80072bc:	e7f9      	b.n	80072b2 <_calloc_r+0x12>
 80072be:	462a      	mov	r2, r5
 80072c0:	4621      	mov	r1, r4
 80072c2:	f7fe fa22 	bl	800570a <memset>
 80072c6:	e7f5      	b.n	80072b4 <_calloc_r+0x14>

080072c8 <__ascii_mbtowc>:
 80072c8:	b082      	sub	sp, #8
 80072ca:	b901      	cbnz	r1, 80072ce <__ascii_mbtowc+0x6>
 80072cc:	a901      	add	r1, sp, #4
 80072ce:	b142      	cbz	r2, 80072e2 <__ascii_mbtowc+0x1a>
 80072d0:	b14b      	cbz	r3, 80072e6 <__ascii_mbtowc+0x1e>
 80072d2:	7813      	ldrb	r3, [r2, #0]
 80072d4:	600b      	str	r3, [r1, #0]
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	1e10      	subs	r0, r2, #0
 80072da:	bf18      	it	ne
 80072dc:	2001      	movne	r0, #1
 80072de:	b002      	add	sp, #8
 80072e0:	4770      	bx	lr
 80072e2:	4610      	mov	r0, r2
 80072e4:	e7fb      	b.n	80072de <__ascii_mbtowc+0x16>
 80072e6:	f06f 0001 	mvn.w	r0, #1
 80072ea:	e7f8      	b.n	80072de <__ascii_mbtowc+0x16>

080072ec <_realloc_r>:
 80072ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f0:	4680      	mov	r8, r0
 80072f2:	4615      	mov	r5, r2
 80072f4:	460c      	mov	r4, r1
 80072f6:	b921      	cbnz	r1, 8007302 <_realloc_r+0x16>
 80072f8:	4611      	mov	r1, r2
 80072fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072fe:	f7ff b96d 	b.w	80065dc <_malloc_r>
 8007302:	b92a      	cbnz	r2, 8007310 <_realloc_r+0x24>
 8007304:	f7ff f8f8 	bl	80064f8 <_free_r>
 8007308:	2400      	movs	r4, #0
 800730a:	4620      	mov	r0, r4
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	f000 f841 	bl	8007396 <_malloc_usable_size_r>
 8007314:	4285      	cmp	r5, r0
 8007316:	4606      	mov	r6, r0
 8007318:	d802      	bhi.n	8007320 <_realloc_r+0x34>
 800731a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800731e:	d8f4      	bhi.n	800730a <_realloc_r+0x1e>
 8007320:	4629      	mov	r1, r5
 8007322:	4640      	mov	r0, r8
 8007324:	f7ff f95a 	bl	80065dc <_malloc_r>
 8007328:	4607      	mov	r7, r0
 800732a:	2800      	cmp	r0, #0
 800732c:	d0ec      	beq.n	8007308 <_realloc_r+0x1c>
 800732e:	42b5      	cmp	r5, r6
 8007330:	462a      	mov	r2, r5
 8007332:	4621      	mov	r1, r4
 8007334:	bf28      	it	cs
 8007336:	4632      	movcs	r2, r6
 8007338:	f7ff ff86 	bl	8007248 <memcpy>
 800733c:	4621      	mov	r1, r4
 800733e:	4640      	mov	r0, r8
 8007340:	f7ff f8da 	bl	80064f8 <_free_r>
 8007344:	463c      	mov	r4, r7
 8007346:	e7e0      	b.n	800730a <_realloc_r+0x1e>

08007348 <__ascii_wctomb>:
 8007348:	4603      	mov	r3, r0
 800734a:	4608      	mov	r0, r1
 800734c:	b141      	cbz	r1, 8007360 <__ascii_wctomb+0x18>
 800734e:	2aff      	cmp	r2, #255	@ 0xff
 8007350:	d904      	bls.n	800735c <__ascii_wctomb+0x14>
 8007352:	228a      	movs	r2, #138	@ 0x8a
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	4770      	bx	lr
 800735c:	2001      	movs	r0, #1
 800735e:	700a      	strb	r2, [r1, #0]
 8007360:	4770      	bx	lr
	...

08007364 <fiprintf>:
 8007364:	b40e      	push	{r1, r2, r3}
 8007366:	b503      	push	{r0, r1, lr}
 8007368:	4601      	mov	r1, r0
 800736a:	ab03      	add	r3, sp, #12
 800736c:	4805      	ldr	r0, [pc, #20]	@ (8007384 <fiprintf+0x20>)
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f000 f83d 	bl	80073f4 <_vfiprintf_r>
 800737a:	b002      	add	sp, #8
 800737c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007380:	b003      	add	sp, #12
 8007382:	4770      	bx	lr
 8007384:	20000018 	.word	0x20000018

08007388 <abort>:
 8007388:	2006      	movs	r0, #6
 800738a:	b508      	push	{r3, lr}
 800738c:	f000 fa06 	bl	800779c <raise>
 8007390:	2001      	movs	r0, #1
 8007392:	f7fa f9ba 	bl	800170a <_exit>

08007396 <_malloc_usable_size_r>:
 8007396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739a:	1f18      	subs	r0, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfbc      	itt	lt
 80073a0:	580b      	ldrlt	r3, [r1, r0]
 80073a2:	18c0      	addlt	r0, r0, r3
 80073a4:	4770      	bx	lr

080073a6 <__sfputc_r>:
 80073a6:	6893      	ldr	r3, [r2, #8]
 80073a8:	b410      	push	{r4}
 80073aa:	3b01      	subs	r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	6093      	str	r3, [r2, #8]
 80073b0:	da07      	bge.n	80073c2 <__sfputc_r+0x1c>
 80073b2:	6994      	ldr	r4, [r2, #24]
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	db01      	blt.n	80073bc <__sfputc_r+0x16>
 80073b8:	290a      	cmp	r1, #10
 80073ba:	d102      	bne.n	80073c2 <__sfputc_r+0x1c>
 80073bc:	bc10      	pop	{r4}
 80073be:	f000 b931 	b.w	8007624 <__swbuf_r>
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	1c58      	adds	r0, r3, #1
 80073c6:	6010      	str	r0, [r2, #0]
 80073c8:	7019      	strb	r1, [r3, #0]
 80073ca:	4608      	mov	r0, r1
 80073cc:	bc10      	pop	{r4}
 80073ce:	4770      	bx	lr

080073d0 <__sfputs_r>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	4614      	mov	r4, r2
 80073d8:	18d5      	adds	r5, r2, r3
 80073da:	42ac      	cmp	r4, r5
 80073dc:	d101      	bne.n	80073e2 <__sfputs_r+0x12>
 80073de:	2000      	movs	r0, #0
 80073e0:	e007      	b.n	80073f2 <__sfputs_r+0x22>
 80073e2:	463a      	mov	r2, r7
 80073e4:	4630      	mov	r0, r6
 80073e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ea:	f7ff ffdc 	bl	80073a6 <__sfputc_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d1f3      	bne.n	80073da <__sfputs_r+0xa>
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073f4 <_vfiprintf_r>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	4614      	mov	r4, r2
 80073fc:	4698      	mov	r8, r3
 80073fe:	4606      	mov	r6, r0
 8007400:	b09d      	sub	sp, #116	@ 0x74
 8007402:	b118      	cbz	r0, 800740c <_vfiprintf_r+0x18>
 8007404:	6a03      	ldr	r3, [r0, #32]
 8007406:	b90b      	cbnz	r3, 800740c <_vfiprintf_r+0x18>
 8007408:	f7fe f8e6 	bl	80055d8 <__sinit>
 800740c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	d405      	bmi.n	800741e <_vfiprintf_r+0x2a>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	059a      	lsls	r2, r3, #22
 8007416:	d402      	bmi.n	800741e <_vfiprintf_r+0x2a>
 8007418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800741a:	f7fe fa0a 	bl	8005832 <__retarget_lock_acquire_recursive>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	071b      	lsls	r3, r3, #28
 8007422:	d501      	bpl.n	8007428 <_vfiprintf_r+0x34>
 8007424:	692b      	ldr	r3, [r5, #16]
 8007426:	b99b      	cbnz	r3, 8007450 <_vfiprintf_r+0x5c>
 8007428:	4629      	mov	r1, r5
 800742a:	4630      	mov	r0, r6
 800742c:	f000 f938 	bl	80076a0 <__swsetup_r>
 8007430:	b170      	cbz	r0, 8007450 <_vfiprintf_r+0x5c>
 8007432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007434:	07dc      	lsls	r4, r3, #31
 8007436:	d504      	bpl.n	8007442 <_vfiprintf_r+0x4e>
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	b01d      	add	sp, #116	@ 0x74
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	0598      	lsls	r0, r3, #22
 8007446:	d4f7      	bmi.n	8007438 <_vfiprintf_r+0x44>
 8007448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800744a:	f7fe f9f3 	bl	8005834 <__retarget_lock_release_recursive>
 800744e:	e7f3      	b.n	8007438 <_vfiprintf_r+0x44>
 8007450:	2300      	movs	r3, #0
 8007452:	9309      	str	r3, [sp, #36]	@ 0x24
 8007454:	2320      	movs	r3, #32
 8007456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800745a:	2330      	movs	r3, #48	@ 0x30
 800745c:	f04f 0901 	mov.w	r9, #1
 8007460:	f8cd 800c 	str.w	r8, [sp, #12]
 8007464:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007610 <_vfiprintf_r+0x21c>
 8007468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800746c:	4623      	mov	r3, r4
 800746e:	469a      	mov	sl, r3
 8007470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007474:	b10a      	cbz	r2, 800747a <_vfiprintf_r+0x86>
 8007476:	2a25      	cmp	r2, #37	@ 0x25
 8007478:	d1f9      	bne.n	800746e <_vfiprintf_r+0x7a>
 800747a:	ebba 0b04 	subs.w	fp, sl, r4
 800747e:	d00b      	beq.n	8007498 <_vfiprintf_r+0xa4>
 8007480:	465b      	mov	r3, fp
 8007482:	4622      	mov	r2, r4
 8007484:	4629      	mov	r1, r5
 8007486:	4630      	mov	r0, r6
 8007488:	f7ff ffa2 	bl	80073d0 <__sfputs_r>
 800748c:	3001      	adds	r0, #1
 800748e:	f000 80a7 	beq.w	80075e0 <_vfiprintf_r+0x1ec>
 8007492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007494:	445a      	add	r2, fp
 8007496:	9209      	str	r2, [sp, #36]	@ 0x24
 8007498:	f89a 3000 	ldrb.w	r3, [sl]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 809f 	beq.w	80075e0 <_vfiprintf_r+0x1ec>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f04f 32ff 	mov.w	r2, #4294967295
 80074a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ac:	f10a 0a01 	add.w	sl, sl, #1
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9307      	str	r3, [sp, #28]
 80074b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80074ba:	4654      	mov	r4, sl
 80074bc:	2205      	movs	r2, #5
 80074be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c2:	4853      	ldr	r0, [pc, #332]	@ (8007610 <_vfiprintf_r+0x21c>)
 80074c4:	f7fe f9b7 	bl	8005836 <memchr>
 80074c8:	9a04      	ldr	r2, [sp, #16]
 80074ca:	b9d8      	cbnz	r0, 8007504 <_vfiprintf_r+0x110>
 80074cc:	06d1      	lsls	r1, r2, #27
 80074ce:	bf44      	itt	mi
 80074d0:	2320      	movmi	r3, #32
 80074d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d6:	0713      	lsls	r3, r2, #28
 80074d8:	bf44      	itt	mi
 80074da:	232b      	movmi	r3, #43	@ 0x2b
 80074dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e0:	f89a 3000 	ldrb.w	r3, [sl]
 80074e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e6:	d015      	beq.n	8007514 <_vfiprintf_r+0x120>
 80074e8:	4654      	mov	r4, sl
 80074ea:	2000      	movs	r0, #0
 80074ec:	f04f 0c0a 	mov.w	ip, #10
 80074f0:	9a07      	ldr	r2, [sp, #28]
 80074f2:	4621      	mov	r1, r4
 80074f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f8:	3b30      	subs	r3, #48	@ 0x30
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d94b      	bls.n	8007596 <_vfiprintf_r+0x1a2>
 80074fe:	b1b0      	cbz	r0, 800752e <_vfiprintf_r+0x13a>
 8007500:	9207      	str	r2, [sp, #28]
 8007502:	e014      	b.n	800752e <_vfiprintf_r+0x13a>
 8007504:	eba0 0308 	sub.w	r3, r0, r8
 8007508:	fa09 f303 	lsl.w	r3, r9, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	46a2      	mov	sl, r4
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	e7d2      	b.n	80074ba <_vfiprintf_r+0xc6>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	1d19      	adds	r1, r3, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	9103      	str	r1, [sp, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	bfbb      	ittet	lt
 8007520:	425b      	neglt	r3, r3
 8007522:	f042 0202 	orrlt.w	r2, r2, #2
 8007526:	9307      	strge	r3, [sp, #28]
 8007528:	9307      	strlt	r3, [sp, #28]
 800752a:	bfb8      	it	lt
 800752c:	9204      	strlt	r2, [sp, #16]
 800752e:	7823      	ldrb	r3, [r4, #0]
 8007530:	2b2e      	cmp	r3, #46	@ 0x2e
 8007532:	d10a      	bne.n	800754a <_vfiprintf_r+0x156>
 8007534:	7863      	ldrb	r3, [r4, #1]
 8007536:	2b2a      	cmp	r3, #42	@ 0x2a
 8007538:	d132      	bne.n	80075a0 <_vfiprintf_r+0x1ac>
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	3402      	adds	r4, #2
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007548:	9305      	str	r3, [sp, #20]
 800754a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007614 <_vfiprintf_r+0x220>
 800754e:	2203      	movs	r2, #3
 8007550:	4650      	mov	r0, sl
 8007552:	7821      	ldrb	r1, [r4, #0]
 8007554:	f7fe f96f 	bl	8005836 <memchr>
 8007558:	b138      	cbz	r0, 800756a <_vfiprintf_r+0x176>
 800755a:	2240      	movs	r2, #64	@ 0x40
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	eba0 000a 	sub.w	r0, r0, sl
 8007562:	4082      	lsls	r2, r0
 8007564:	4313      	orrs	r3, r2
 8007566:	3401      	adds	r4, #1
 8007568:	9304      	str	r3, [sp, #16]
 800756a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756e:	2206      	movs	r2, #6
 8007570:	4829      	ldr	r0, [pc, #164]	@ (8007618 <_vfiprintf_r+0x224>)
 8007572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007576:	f7fe f95e 	bl	8005836 <memchr>
 800757a:	2800      	cmp	r0, #0
 800757c:	d03f      	beq.n	80075fe <_vfiprintf_r+0x20a>
 800757e:	4b27      	ldr	r3, [pc, #156]	@ (800761c <_vfiprintf_r+0x228>)
 8007580:	bb1b      	cbnz	r3, 80075ca <_vfiprintf_r+0x1d6>
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	3307      	adds	r3, #7
 8007586:	f023 0307 	bic.w	r3, r3, #7
 800758a:	3308      	adds	r3, #8
 800758c:	9303      	str	r3, [sp, #12]
 800758e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007590:	443b      	add	r3, r7
 8007592:	9309      	str	r3, [sp, #36]	@ 0x24
 8007594:	e76a      	b.n	800746c <_vfiprintf_r+0x78>
 8007596:	460c      	mov	r4, r1
 8007598:	2001      	movs	r0, #1
 800759a:	fb0c 3202 	mla	r2, ip, r2, r3
 800759e:	e7a8      	b.n	80074f2 <_vfiprintf_r+0xfe>
 80075a0:	2300      	movs	r3, #0
 80075a2:	f04f 0c0a 	mov.w	ip, #10
 80075a6:	4619      	mov	r1, r3
 80075a8:	3401      	adds	r4, #1
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	4620      	mov	r0, r4
 80075ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b2:	3a30      	subs	r2, #48	@ 0x30
 80075b4:	2a09      	cmp	r2, #9
 80075b6:	d903      	bls.n	80075c0 <_vfiprintf_r+0x1cc>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0c6      	beq.n	800754a <_vfiprintf_r+0x156>
 80075bc:	9105      	str	r1, [sp, #20]
 80075be:	e7c4      	b.n	800754a <_vfiprintf_r+0x156>
 80075c0:	4604      	mov	r4, r0
 80075c2:	2301      	movs	r3, #1
 80075c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c8:	e7f0      	b.n	80075ac <_vfiprintf_r+0x1b8>
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	462a      	mov	r2, r5
 80075d0:	4630      	mov	r0, r6
 80075d2:	4b13      	ldr	r3, [pc, #76]	@ (8007620 <_vfiprintf_r+0x22c>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	f7fd fbb5 	bl	8004d44 <_printf_float>
 80075da:	4607      	mov	r7, r0
 80075dc:	1c78      	adds	r0, r7, #1
 80075de:	d1d6      	bne.n	800758e <_vfiprintf_r+0x19a>
 80075e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075e2:	07d9      	lsls	r1, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_vfiprintf_r+0x1fe>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	059a      	lsls	r2, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_vfiprintf_r+0x1fe>
 80075ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ee:	f7fe f921 	bl	8005834 <__retarget_lock_release_recursive>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	065b      	lsls	r3, r3, #25
 80075f6:	f53f af1f 	bmi.w	8007438 <_vfiprintf_r+0x44>
 80075fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075fc:	e71e      	b.n	800743c <_vfiprintf_r+0x48>
 80075fe:	ab03      	add	r3, sp, #12
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	462a      	mov	r2, r5
 8007604:	4630      	mov	r0, r6
 8007606:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <_vfiprintf_r+0x22c>)
 8007608:	a904      	add	r1, sp, #16
 800760a:	f7fd fe39 	bl	8005280 <_printf_i>
 800760e:	e7e4      	b.n	80075da <_vfiprintf_r+0x1e6>
 8007610:	08007bf0 	.word	0x08007bf0
 8007614:	08007bf6 	.word	0x08007bf6
 8007618:	08007bfa 	.word	0x08007bfa
 800761c:	08004d45 	.word	0x08004d45
 8007620:	080073d1 	.word	0x080073d1

08007624 <__swbuf_r>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	460e      	mov	r6, r1
 8007628:	4614      	mov	r4, r2
 800762a:	4605      	mov	r5, r0
 800762c:	b118      	cbz	r0, 8007636 <__swbuf_r+0x12>
 800762e:	6a03      	ldr	r3, [r0, #32]
 8007630:	b90b      	cbnz	r3, 8007636 <__swbuf_r+0x12>
 8007632:	f7fd ffd1 	bl	80055d8 <__sinit>
 8007636:	69a3      	ldr	r3, [r4, #24]
 8007638:	60a3      	str	r3, [r4, #8]
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	071a      	lsls	r2, r3, #28
 800763e:	d501      	bpl.n	8007644 <__swbuf_r+0x20>
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	b943      	cbnz	r3, 8007656 <__swbuf_r+0x32>
 8007644:	4621      	mov	r1, r4
 8007646:	4628      	mov	r0, r5
 8007648:	f000 f82a 	bl	80076a0 <__swsetup_r>
 800764c:	b118      	cbz	r0, 8007656 <__swbuf_r+0x32>
 800764e:	f04f 37ff 	mov.w	r7, #4294967295
 8007652:	4638      	mov	r0, r7
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	b2f6      	uxtb	r6, r6
 800765c:	1a98      	subs	r0, r3, r2
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	4637      	mov	r7, r6
 8007662:	4283      	cmp	r3, r0
 8007664:	dc05      	bgt.n	8007672 <__swbuf_r+0x4e>
 8007666:	4621      	mov	r1, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f7ff fd9b 	bl	80071a4 <_fflush_r>
 800766e:	2800      	cmp	r0, #0
 8007670:	d1ed      	bne.n	800764e <__swbuf_r+0x2a>
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	60a3      	str	r3, [r4, #8]
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	6022      	str	r2, [r4, #0]
 800767e:	701e      	strb	r6, [r3, #0]
 8007680:	6962      	ldr	r2, [r4, #20]
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	429a      	cmp	r2, r3
 8007686:	d004      	beq.n	8007692 <__swbuf_r+0x6e>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	07db      	lsls	r3, r3, #31
 800768c:	d5e1      	bpl.n	8007652 <__swbuf_r+0x2e>
 800768e:	2e0a      	cmp	r6, #10
 8007690:	d1df      	bne.n	8007652 <__swbuf_r+0x2e>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f7ff fd85 	bl	80071a4 <_fflush_r>
 800769a:	2800      	cmp	r0, #0
 800769c:	d0d9      	beq.n	8007652 <__swbuf_r+0x2e>
 800769e:	e7d6      	b.n	800764e <__swbuf_r+0x2a>

080076a0 <__swsetup_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4b29      	ldr	r3, [pc, #164]	@ (8007748 <__swsetup_r+0xa8>)
 80076a4:	4605      	mov	r5, r0
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	460c      	mov	r4, r1
 80076aa:	b118      	cbz	r0, 80076b4 <__swsetup_r+0x14>
 80076ac:	6a03      	ldr	r3, [r0, #32]
 80076ae:	b90b      	cbnz	r3, 80076b4 <__swsetup_r+0x14>
 80076b0:	f7fd ff92 	bl	80055d8 <__sinit>
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	0719      	lsls	r1, r3, #28
 80076ba:	d422      	bmi.n	8007702 <__swsetup_r+0x62>
 80076bc:	06da      	lsls	r2, r3, #27
 80076be:	d407      	bmi.n	80076d0 <__swsetup_r+0x30>
 80076c0:	2209      	movs	r2, #9
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	e033      	b.n	8007738 <__swsetup_r+0x98>
 80076d0:	0758      	lsls	r0, r3, #29
 80076d2:	d512      	bpl.n	80076fa <__swsetup_r+0x5a>
 80076d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076d6:	b141      	cbz	r1, 80076ea <__swsetup_r+0x4a>
 80076d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076dc:	4299      	cmp	r1, r3
 80076de:	d002      	beq.n	80076e6 <__swsetup_r+0x46>
 80076e0:	4628      	mov	r0, r5
 80076e2:	f7fe ff09 	bl	80064f8 <_free_r>
 80076e6:	2300      	movs	r3, #0
 80076e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	81a3      	strh	r3, [r4, #12]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	b94b      	cbnz	r3, 800771a <__swsetup_r+0x7a>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007710:	d003      	beq.n	800771a <__swsetup_r+0x7a>
 8007712:	4621      	mov	r1, r4
 8007714:	4628      	mov	r0, r5
 8007716:	f000 f882 	bl	800781e <__smakebuf_r>
 800771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771e:	f013 0201 	ands.w	r2, r3, #1
 8007722:	d00a      	beq.n	800773a <__swsetup_r+0x9a>
 8007724:	2200      	movs	r2, #0
 8007726:	60a2      	str	r2, [r4, #8]
 8007728:	6962      	ldr	r2, [r4, #20]
 800772a:	4252      	negs	r2, r2
 800772c:	61a2      	str	r2, [r4, #24]
 800772e:	6922      	ldr	r2, [r4, #16]
 8007730:	b942      	cbnz	r2, 8007744 <__swsetup_r+0xa4>
 8007732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007736:	d1c5      	bne.n	80076c4 <__swsetup_r+0x24>
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	0799      	lsls	r1, r3, #30
 800773c:	bf58      	it	pl
 800773e:	6962      	ldrpl	r2, [r4, #20]
 8007740:	60a2      	str	r2, [r4, #8]
 8007742:	e7f4      	b.n	800772e <__swsetup_r+0x8e>
 8007744:	2000      	movs	r0, #0
 8007746:	e7f7      	b.n	8007738 <__swsetup_r+0x98>
 8007748:	20000018 	.word	0x20000018

0800774c <_raise_r>:
 800774c:	291f      	cmp	r1, #31
 800774e:	b538      	push	{r3, r4, r5, lr}
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	d904      	bls.n	8007760 <_raise_r+0x14>
 8007756:	2316      	movs	r3, #22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	f04f 30ff 	mov.w	r0, #4294967295
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007762:	b112      	cbz	r2, 800776a <_raise_r+0x1e>
 8007764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007768:	b94b      	cbnz	r3, 800777e <_raise_r+0x32>
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f830 	bl	80077d0 <_getpid_r>
 8007770:	4622      	mov	r2, r4
 8007772:	4601      	mov	r1, r0
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 b817 	b.w	80077ac <_kill_r>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d00a      	beq.n	8007798 <_raise_r+0x4c>
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	d103      	bne.n	800778e <_raise_r+0x42>
 8007786:	2316      	movs	r3, #22
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	2001      	movs	r0, #1
 800778c:	e7e7      	b.n	800775e <_raise_r+0x12>
 800778e:	2100      	movs	r1, #0
 8007790:	4620      	mov	r0, r4
 8007792:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007796:	4798      	blx	r3
 8007798:	2000      	movs	r0, #0
 800779a:	e7e0      	b.n	800775e <_raise_r+0x12>

0800779c <raise>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <raise+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfd3 	b.w	800774c <_raise_r>
 80077a6:	bf00      	nop
 80077a8:	20000018 	.word	0x20000018

080077ac <_kill_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	2300      	movs	r3, #0
 80077b0:	4d06      	ldr	r5, [pc, #24]	@ (80077cc <_kill_r+0x20>)
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7f9 ff96 	bl	80016ea <_kill>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_kill_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_kill_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	20000548 	.word	0x20000548

080077d0 <_getpid_r>:
 80077d0:	f7f9 bf84 	b.w	80016dc <_getpid>

080077d4 <__swhatbuf_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	4615      	mov	r5, r2
 80077de:	2900      	cmp	r1, #0
 80077e0:	461e      	mov	r6, r3
 80077e2:	b096      	sub	sp, #88	@ 0x58
 80077e4:	da0c      	bge.n	8007800 <__swhatbuf_r+0x2c>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	2100      	movs	r1, #0
 80077ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077ee:	bf14      	ite	ne
 80077f0:	2340      	movne	r3, #64	@ 0x40
 80077f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077f6:	2000      	movs	r0, #0
 80077f8:	6031      	str	r1, [r6, #0]
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	b016      	add	sp, #88	@ 0x58
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	466a      	mov	r2, sp
 8007802:	f000 f849 	bl	8007898 <_fstat_r>
 8007806:	2800      	cmp	r0, #0
 8007808:	dbed      	blt.n	80077e6 <__swhatbuf_r+0x12>
 800780a:	9901      	ldr	r1, [sp, #4]
 800780c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007810:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007814:	4259      	negs	r1, r3
 8007816:	4159      	adcs	r1, r3
 8007818:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800781c:	e7eb      	b.n	80077f6 <__swhatbuf_r+0x22>

0800781e <__smakebuf_r>:
 800781e:	898b      	ldrh	r3, [r1, #12]
 8007820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007822:	079d      	lsls	r5, r3, #30
 8007824:	4606      	mov	r6, r0
 8007826:	460c      	mov	r4, r1
 8007828:	d507      	bpl.n	800783a <__smakebuf_r+0x1c>
 800782a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	2301      	movs	r3, #1
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	b003      	add	sp, #12
 8007838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783a:	466a      	mov	r2, sp
 800783c:	ab01      	add	r3, sp, #4
 800783e:	f7ff ffc9 	bl	80077d4 <__swhatbuf_r>
 8007842:	9f00      	ldr	r7, [sp, #0]
 8007844:	4605      	mov	r5, r0
 8007846:	4639      	mov	r1, r7
 8007848:	4630      	mov	r0, r6
 800784a:	f7fe fec7 	bl	80065dc <_malloc_r>
 800784e:	b948      	cbnz	r0, 8007864 <__smakebuf_r+0x46>
 8007850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007854:	059a      	lsls	r2, r3, #22
 8007856:	d4ee      	bmi.n	8007836 <__smakebuf_r+0x18>
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	f043 0302 	orr.w	r3, r3, #2
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	e7e2      	b.n	800782a <__smakebuf_r+0xc>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800786a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	9b01      	ldr	r3, [sp, #4]
 8007872:	6020      	str	r0, [r4, #0]
 8007874:	b15b      	cbz	r3, 800788e <__smakebuf_r+0x70>
 8007876:	4630      	mov	r0, r6
 8007878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787c:	f000 f81e 	bl	80078bc <_isatty_r>
 8007880:	b128      	cbz	r0, 800788e <__smakebuf_r+0x70>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f023 0303 	bic.w	r3, r3, #3
 8007888:	f043 0301 	orr.w	r3, r3, #1
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	431d      	orrs	r5, r3
 8007892:	81a5      	strh	r5, [r4, #12]
 8007894:	e7cf      	b.n	8007836 <__smakebuf_r+0x18>
	...

08007898 <_fstat_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d06      	ldr	r5, [pc, #24]	@ (80078b8 <_fstat_r+0x20>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7f9 ff7f 	bl	80017a8 <_fstat>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_fstat_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_fstat_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000548 	.word	0x20000548

080078bc <_isatty_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	2300      	movs	r3, #0
 80078c0:	4d05      	ldr	r5, [pc, #20]	@ (80078d8 <_isatty_r+0x1c>)
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 ff7d 	bl	80017c6 <_isatty>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_isatty_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_isatty_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20000548 	.word	0x20000548

080078dc <_init>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr

080078e8 <_fini>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr
